{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# dSOC - Decentralized Security Operations Center\n\n## Project Overview\nA decentralized Security Operations Center (SOC) platform built on IOTA blockchain technology. The application provides role-based access control for security analysts, clients, and certifiers to manage security incidents and tickets through a decentralized workflow.\n\n## Architecture\n- **Frontend**: React + TypeScript + Vite + wouter for routing\n- **Backend**: Express.js with TypeScript\n- **Blockchain**: IOTA integration with dApp Kit\n- **Storage**: Pinata IPFS for decentralized data storage with in-memory fallback\n- **UI Framework**: shadcn/ui components with Tailwind CSS\n- **State Management**: TanStack Query for data fetching\n- **Styling**: Dark theme with security-focused design\n\n## Key Features\n- IOTA wallet integration for authentication\n- Role-based access (client, analyst, certifier)\n- Security ticket management system\n- Staking and rewards mechanism\n- Document notarization on IOTA\n- Real-time dashboard with role-specific views\n\n## Recent Changes\n- **2025-08-06**: Updated to latest contract architecture - CLT Reward (0xD0fD6bD7a7b1f5d7B3fCCD99e72f1013a3ebD097) and SOCService (0x6e310Be2F4D057bAd8435E30a0d45bCD49c9018E)\n- **2025-08-06**: Implemented simplified ticket creation workflow - createTicket(title) with optional analyst assignment via setAnalyst()\n- **2025-08-06**: Enhanced EVMIncidentReport with automatic analyst assignment after ticket creation\n- **2025-08-06**: Updated contract service to support new simplified SOCService ABI with proper event parsing\n- **2025-08-06**: Added validateTicket functionality for analysts to claim rewards and complete cases\n- **2025-08-06**: SOCService now automatically creates individual staking pools for each ticket with IPFS metadata storage\n- **2025-08-06**: Enhanced staking pools display with pool-specific metadata, descriptions, and IPFS integration\n- **2025-08-06**: Added comprehensive CLT reward management system with automatic minting for analysts (50 CLT), certifiers (30 CLT), and stakers (5% of stake)\n- **2025-08-06**: Implemented comprehensive CLT reward minting system for analysts (50 CLT), certifiers (30 CLT), and stakers (5% of stake)\n- **2025-08-06**: Created CLTRewardManager component with reward history, statistics, and batch minting capabilities\n- **2025-08-06**: Added /rewards page with dedicated reward management interface\n- **2025-08-06**: Enhanced server API with reward management endpoints (/api/rewards/mint, /history, /stats)\n- **2025-08-06**: Successfully completed migration from Replit Agent to standard Replit environment\n- **2025-08-05**: Successfully migrated from Supabase to lightweight Pinata Direct API implementation\n- **2025-08-05**: Pinata IPFS now serves as the complete decentralized database replacement\n- **2025-08-05**: Implemented direct Pinata API calls (removed heavy pinata-web3 SDK for lighter app)\n- **2025-08-05**: All incident reports, cases, and responses permanently stored on IPFS with immutable hashes\n- **2025-08-05**: Added comprehensive metadata tracking with detailed console logging for IPFS uploads\n- **2025-08-05**: Successfully tested incident report creation with IPFS storage and case linking\n- **2025-08-05**: Integrated incident reports with case management system for real-time tracking\n- **2025-08-05**: Removed all fake/mock data and replaced with real blockchain data sources  \n- **2025-08-05**: Consolidated staking components into UnifiedStakingDashboard with real-time updates\n- **2025-08-05**: Added real-time case management with /api/tickets endpoint refreshing every 5 seconds\n- **2025-08-03**: Integrated EVM contracts with deployed addresses on Scroll Sepolia testnet\n- **2025-08-03**: Updated contract service with complete ABIs for CLT Reward, Staking Pool, and SOC Service\n- **2025-01-20**: Successfully migrated project from Replit Agent to Replit environment\n- **2025-01-20**: Fixed AI functionality by migrating from hardcoded API keys to secure backend endpoints\n- **2025-01-20**: Enhanced AI chat interface with improved scrolling for long responses\n- **2025-01-20**: Made AI Assistant modal draggable for better user experience\n- **2025-01-20**: Created AI-powered incident reporting system integrated with dSOC workflow\n- Implemented secure API routes for AI chat, contract auditing, security news, and vulnerability analysis\n- Updated frontend AI services to use backend API endpoints instead of direct Google Gemini calls\n- Added comprehensive incident reporting form with AI analysis capabilities\n- Connected incident reports to analyst→certifier workflow as requested\n- Enhanced chat container with max-h-[600px] and individual message scrolling\n- Fixed duplicate function declarations in TicketForm and TicketList components\n- Resolved Buffer compatibility issues for browser environment using polyfill\n- Updated contract integration to match Move smart contract signatures exactly\n- Fixed TypeScript compilation errors and syntax issues\n- Added QueryClientProvider to App.tsx for proper TanStack Query setup\n- Synchronized frontend contract calls with provided Move smart contract implementation\n\n## User Preferences\n- Focus on security and blockchain integration\n- Maintain professional, technical approach\n- Dark theme preferred for security application aesthetics\n\n## Project Structure\n```\n├── client/\n│   ├── src/\n│   │   ├── components/\n│   │   │   ├── ui/           # shadcn/ui components\n│   │   │   ├── Dashboard.tsx  # Main dashboard\n│   │   │   ├── Header.tsx     # Navigation header\n│   │   │   ├── TicketForm.tsx # Ticket creation\n│   │   │   └── TicketList.tsx # Ticket management\n│   │   ├── pages/\n│   │   │   ├── Index.tsx      # Main landing page\n│   │   │   └── NotFound.tsx   # 404 page\n│   │   └── lib/\n│   │       ├── contract.ts    # IOTA smart contract integration\n│   │       └── utils.ts       # Utility functions\n├── server/\n│   ├── index.ts              # Express server entry\n│   ├── routes.ts             # API routes\n│   └── storage.ts            # Data storage interface\n└── shared/\n    └── schema.ts             # Shared type definitions\n```\n\n## Development Notes\n- Using Replit's full-stack template architecture\n- IOTA integration requires testnet configuration\n- Security-focused design with pulse animations for critical elements\n- Comprehensive role-based permission system","size_bytes":6557},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        success: {\n          DEFAULT: \"hsl(var(--success))\",\n          foreground: \"hsl(var(--success-foreground))\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning))\",\n          foreground: \"hsl(var(--warning-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3043},"test_db_connection.js":{"content":"// Simple test to verify Supabase connection\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://sncziafbwxgjkvymkolp.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNuY3ppYWZid3hnamt2eW1rb2xwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEyNTMyNTksImV4cCI6MjA2NjgyOTI1OX0.r8xYuUWST0Hx6ifGLuFLgxj0GlvMSY3MGgrf90u5x5o';\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nasync function testConnection() {\n  try {\n    // Test basic connection\n    const { data, error } = await supabase\n      .from('tickets')\n      .select('*')\n      .limit(1);\n    \n    if (error) {\n      console.error('Connection error:', error);\n      return false;\n    }\n    \n    console.log('✅ Database connection successful!');\n    console.log('Sample data:', data);\n    return true;\n  } catch (err) {\n    console.error('❌ Connection failed:', err);\n    return false;\n  }\n}\n\ntestConnection();","size_bytes":960},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport dotenv from \"dotenv\";\n\n// Load environment variables first\ndotenv.config();\n\n// Initialize storage after environment variables are loaded\nimport { getStorage } from \"./storage\";\nconst storage = getStorage();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2136},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { getStorage } from \"./storage\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { insertIncidentReportSchema, insertTicketSchema } from \"@shared/schema\";\n\nconst API_KEY = process.env.GOOGLE_API_KEY;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // AI Assistant endpoints\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      const { question } = req.body;\n\n      if (!API_KEY) {\n        return res.status(500).json({ \n          error: \"AI service is not configured. Please add GOOGLE_API_KEY to environment variables.\" \n        });\n      }\n\n      const genAI = new GoogleGenerativeAI(API_KEY);\n      const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n      const systemPrompt = `You are a cybersecurity expert and AI assistant for the dSOC (Decentralized Security Operations Center) platform. You specialize in:\n\n- Blockchain and smart contract security\n- Threat analysis and incident response\n- Vulnerability assessment and penetration testing\n- Security architecture and best practices\n- Bug bounty hunting\n- DeFi security and Web3 vulnerabilities\n- General cybersecurity best practices\n- Security operations center management\n\n**About dSOC platform:**\n- Uses IOTA blockchain for decentralized ticket management\n- Move smart contracts for secure operations  \n- Stake-based incentives for security analysts\n- Multi-role validation (client, analyst, certifier)\n- Transparent, community-driven security analysis\n\n**Response style:**\n- Be conversational and helpful\n- Provide actionable, practical advice\n- Include examples when possible\n- Break down complex topics into digestible parts\n- Show enthusiasm for helping users learn cybersecurity\n\nUser question: ${question}\n\nRespond in a friendly, conversational way while providing expert-level cybersecurity knowledge.`;\n\n      const result = await model.generateContent(systemPrompt);\n      const response = await result.response;\n      const text = response.text();\n\n      res.json({ response: text });\n    } catch (error) {\n      console.error(\"AI chat error:\", error);\n      res.status(500).json({ \n        error: \"Failed to get AI response\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.post(\"/api/ai/audit\", async (req, res) => {\n    try {\n      const { contractCode } = req.body;\n\n      if (!API_KEY) {\n        return res.status(500).json({ \n          error: \"AI service is not configured. Please add GOOGLE_API_KEY to environment variables.\" \n        });\n      }\n\n      const genAI = new GoogleGenerativeAI(API_KEY);\n      const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n      const prompt = `\n      You are an expert blockchain security auditor specializing in Move language (used in Sui blockchain).\n\n      Analyze the following Move smart contract code for vulnerabilities, security issues, and logical errors:\n\n      \\`\\`\\`move\n      ${contractCode}\n      \\`\\`\\`\n\n      Focus on Move-specific vulnerabilities including:\n      - Resource handling issues\n      - Ownership problems\n      - Capability misuse\n      - Type safety issues\n      - Module initialization flaws\n\n      Provide a detailed report with:\n        - Executive Summary (with vulnerability score from 0-10, where 0 is secure)\n        - Summary of Risks\n        - Detailed Findings\n        - Recommendations\n\n      Include the statement \"Certified by AuditWarp\" as a certification stamp in your report.\n      Format using markdown with headers, bullet points, and code blocks for examples.\n      `;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const auditResult = response.text();\n\n      res.json({ response: auditResult });\n    } catch (error) {\n      console.error(\"AI audit error:\", error);\n      res.status(500).json({ \n        error: \"Failed to complete audit\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // CLT Reward Management endpoints\n  app.post(\"/api/rewards/mint\", async (req, res) => {\n    try {\n      const { recipientAddress, amount, rewardType, ticketId } = req.body;\n      \n      if (!recipientAddress || !amount || !rewardType) {\n        return res.status(400).json({ \n          error: \"Missing required fields: recipientAddress, amount, and rewardType\" \n        });\n      }\n\n      // In a real implementation, this would:\n      // 1. Validate the request (check permissions, verify recipient)\n      // 2. Call the CLT Token contract mint function\n      // 3. Store the transaction in database\n      // 4. Return transaction details\n\n      console.log(`🎯 Reward mint request:`, {\n        recipient: recipientAddress,\n        amount: amount,\n        type: rewardType,\n        ticketId: ticketId || 'N/A'\n      });\n\n      // Mock response - in real app, return actual transaction hash\n      const mockTransaction = {\n        txHash: `0x${Math.random().toString(16).substring(2, 66)}`,\n        blockNumber: Math.floor(Math.random() * 1000000) + 11000000,\n        status: 'completed',\n        timestamp: new Date().toISOString()\n      };\n\n      res.json({\n        success: true,\n        transaction: mockTransaction,\n        message: `Successfully minted ${amount} CLT tokens for ${rewardType}`\n      });\n\n    } catch (error) {\n      console.error(\"Reward minting error:\", error);\n      res.status(500).json({ \n        error: \"Failed to mint reward\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get(\"/api/rewards/history/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      \n      if (!address) {\n        return res.status(400).json({ error: \"Address parameter is required\" });\n      }\n\n      // Mock reward history - in real app, fetch from blockchain events\n      const mockHistory = [\n        {\n          id: 1,\n          recipient: address,\n          amount: \"50\",\n          type: 'analyst',\n          txHash: \"0x123...abc\",\n          timestamp: new Date().toISOString(),\n          status: 'completed',\n          ticketId: 1\n        },\n        {\n          id: 2,\n          recipient: address,\n          amount: \"30\",\n          type: 'certifier',\n          txHash: \"0x456...def\",\n          timestamp: new Date(Date.now() - 86400000).toISOString(),\n          status: 'completed',\n          ticketId: 2\n        }\n      ];\n\n      res.json({ history: mockHistory });\n\n    } catch (error) {\n      console.error(\"Reward history error:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch reward history\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get(\"/api/rewards/stats\", async (req, res) => {\n    try {\n      // Mock reward statistics - in real app, calculate from blockchain data\n      const mockStats = {\n        totalRewardsMinted: 12500,\n        analystRewards: 8000,\n        certifierRewards: 3000,\n        stakerRewards: 1500,\n        totalRecipients: 45,\n        lastMonthMinted: 2300\n      };\n\n      res.json({ stats: mockStats });\n\n    } catch (error) {\n      console.error(\"Reward stats error:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch reward statistics\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Store staking pool metadata when creating tickets\n  app.post(\"/api/pools/metadata\", async (req, res) => {\n    try {\n      const { poolAddress, title, description, category, riskLevel, estimatedAPY, minStake, maxStake } = req.body;\n      \n      if (!poolAddress || !title || !description) {\n        return res.status(400).json({ \n          error: \"Missing required fields: poolAddress, title, and description\" \n        });\n      }\n\n      const metadata = {\n        poolAddress,\n        title,\n        description,\n        category: category || \"Security Analysis\",\n        riskLevel: riskLevel || \"Medium\",\n        estimatedAPY: estimatedAPY || \"12-18%\",\n        minStake: minStake || \"10\",\n        maxStake: maxStake || \"1000\",\n        createdAt: new Date().toISOString(),\n        version: \"1.0\"\n      };\n\n      // Store metadata in IPFS\n      console.log(`🔗 Storing pool metadata in IPFS:`, {\n        poolAddress: poolAddress,\n        title: title,\n        description: description.substring(0, 100) + \"...\"\n      });\n\n      const ipfsHash = await storage.uploadJSON(metadata, `pool-${poolAddress}-metadata`);\n\n      res.json({\n        success: true,\n        ipfsHash: ipfsHash,\n        metadata: metadata,\n        message: `Pool metadata stored in IPFS with hash: ${ipfsHash}`\n      });\n\n    } catch (error) {\n      console.error(\"Pool metadata storage error:\", error);\n      res.status(500).json({ \n        error: \"Failed to store pool metadata\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get(\"/api/pools/metadata/:hash\", async (req, res) => {\n    try {\n      const { hash } = req.params;\n      \n      if (!hash) {\n        return res.status(400).json({ error: \"IPFS hash parameter is required\" });\n      }\n\n      const metadata = await storage.getJSON(hash);\n      res.json({ metadata });\n\n    } catch (error) {\n      console.error(\"Pool metadata retrieval error:\", error);\n      res.status(500).json({ \n        error: \"Failed to retrieve pool metadata\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.post(\"/api/ai/security-news\", async (req, res) => {\n    try {\n      if (!API_KEY) {\n        return res.status(500).json({ \n          error: \"AI service is not configured. Please add GOOGLE_API_KEY to environment variables.\" \n        });\n      }\n\n      const genAI = new GoogleGenerativeAI(API_KEY);\n      const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n      const prompt = `Provide the latest cybersecurity news and threat intelligence. Include:\n\n1. **Current Threats & Vulnerabilities**\n   - Latest CVEs and zero-days\n   - Active ransomware campaigns\n   - Supply chain attacks\n\n2. **Security Research & Trends**\n   - New attack techniques\n   - Defensive innovations\n   - Industry best practices\n\n3. **Blockchain & DeFi Security**\n   - Smart contract vulnerabilities\n   - DeFi protocol exploits\n   - Web3 security trends\n\nFormat as markdown with clear sections and actionable insights.`;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n\n      res.json({ response: text });\n    } catch (error) {\n      console.error(\"Security news error:\", error);\n      res.status(500).json({ \n        error: \"Failed to get security news\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.post(\"/api/ai/analyze-vulnerability\", async (req, res) => {\n    try {\n      const { description } = req.body;\n\n      if (!API_KEY) {\n        return res.status(500).json({ \n          error: \"AI service is not configured. Please add GOOGLE_API_KEY to environment variables.\" \n        });\n      }\n\n      const genAI = new GoogleGenerativeAI(API_KEY);\n      const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n      const prompt = `Analyze this potential security vulnerability and provide a detailed assessment:\n\n${description}\n\nPlease provide:\n1. **Severity Assessment** (Critical/High/Medium/Low)\n2. **Attack Vectors** - How this could be exploited\n3. **Impact Analysis** - What damage could result\n4. **Mitigation Strategies** - How to fix or prevent\n5. **Detection Methods** - How to identify this vulnerability\n6. **Similar Cases** - Examples from the wild if any\n\nFormat as structured markdown for a security analyst.`;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n\n      res.json({ response: text });\n    } catch (error) {\n      console.error(\"Vulnerability analysis error:\", error);\n      res.status(500).json({ \n        error: \"Failed to analyze vulnerability\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Incident Report endpoints for real-time dashboard updates\n  app.post(\"/api/incident-reports\", async (req, res) => {\n    try {\n      const validatedData = insertIncidentReportSchema.parse(req.body);\n      const storage = getStorage();\n      const report = await storage.createIncidentReport(validatedData);\n\n      // Create corresponding ticket/case for the incident\n      const ticket = await storage.createTicket({\n        title: report.title,\n        description: report.description,\n        severity: report.severity,\n        status: \"open\",\n        client_name: report.client_name,\n        contact_info: report.contact_info,\n        client_wallet: report.client_wallet,\n        transaction_hash: report.transaction_hash,\n        block_number: report.block_number,\n        contract_address: report.contract_address,\n        affected_systems: report.affected_systems,\n        attack_vectors: report.attack_vectors,\n        evidence_urls: report.evidence_urls\n      });\n\n      // Update the incident report with the ticket ID\n      const updatedReport = await storage.updateIncidentReport(report.id, { \n        ticket_id: ticket.id \n      });\n\n      console.log(`New incident report created: ${report.title} (ID: ${report.id}) with case ID: ${ticket.id}`);\n      res.json(updatedReport);\n    } catch (error) {\n      console.error(\"Failed to create incident report:\", error);\n      res.status(400).json({ \n        error: \"Failed to create incident report\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get(\"/api/incident-reports\", async (req, res) => {\n    try {\n      const storage = getStorage();\n      const reports = await storage.getIncidentReports();\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Failed to fetch incident reports:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch incident reports\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Get all tickets/cases for case management\n  app.get(\"/api/tickets\", async (req, res) => {\n    try {\n      const storage = getStorage();\n      const tickets = await storage.getAllTickets();\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Failed to fetch tickets:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch tickets\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Update ticket status\n  app.patch(\"/api/tickets/:id\", async (req, res) => {\n    try {\n      const storage = getStorage();\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      const ticket = await storage.updateTicket(id, updates);\n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error updating ticket:\", error);\n      res.status(500).json({ error: \"Failed to update ticket\" });\n    }\n  });\n\n  app.get(\"/api/incident-reports/:id\", async (req, res) => {\n    try {\n      const storage = getStorage();\n      const id = parseInt(req.params.id);\n      const report = await storage.getIncidentReportById(id);\n\n      if (!report) {\n        return res.status(404).json({ error: \"Incident report not found\" });\n      }\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Failed to fetch incident report:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch incident report\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.patch(\"/api/incident-reports/:id\", async (req, res) => {\n    try {\n      const storage = getStorage();\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n\n      const updatedReport = await storage.updateIncidentReport(id, updates);\n\n      console.log(`Incident report updated: ${updatedReport.title} (ID: ${id})`);\n      res.json(updatedReport);\n    } catch (error) {\n      console.error(\"Failed to update incident report:\", error);\n      res.status(500).json({ \n        error: \"Failed to update incident report\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // AI Incident Analysis endpoint\n  app.post(\"/api/ai/analyze-incident\", async (req, res) => {\n    try {\n      const { description } = req.body;\n\n      if (!API_KEY) {\n        return res.status(500).json({ \n          error: \"AI service is not configured. Please add GOOGLE_API_KEY to environment variables.\" \n        });\n      }\n\n      const genAI = new GoogleGenerativeAI(API_KEY);\n      const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n      const prompt = `You are a cybersecurity expert analyzing a security incident report. Based on this description, extract and structure the following information:\n\nUser description: \"${description}\"\n\nPlease provide a JSON response with the following structure:\n{\n  \"title\": \"Brief descriptive title of the incident\",\n  \"severity\": \"critical|high|medium|low\",\n  \"affected_systems\": \"List of affected systems/platforms\",\n  \"attack_vectors\": \"Identified attack methods or vectors\",\n  \"analysis\": \"Detailed analysis of the incident including potential impact, root cause, and recommended immediate actions\"\n}\n\nFocus on:\n- Blockchain/crypto security if relevant\n- Web application security\n- Social engineering indicators\n- Financial fraud patterns\n- Technical vulnerabilities\n\nEnsure the JSON is valid and parseable.`;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n\n      try {\n        // Try to parse as JSON, fallback to text if it fails\n        const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          const analysisData = JSON.parse(jsonMatch[0]);\n          res.json(analysisData);\n        } else {\n          // Fallback: return structured text analysis\n          res.json({\n            title: \"Security Incident Analysis\",\n            severity: \"medium\",\n            affected_systems: \"To be determined\",\n            attack_vectors: \"Under investigation\",\n            analysis: text\n          });\n        }\n      } catch (parseError) {\n        // If JSON parsing fails, return the raw analysis\n        res.json({\n          title: \"Security Incident Analysis\",\n          severity: \"medium\", \n          affected_systems: \"To be determined\",\n          attack_vectors: \"Under investigation\",\n          analysis: text\n        });\n      }\n    } catch (error) {\n      console.error(\"AI incident analysis error:\", error);\n      res.status(500).json({ \n        error: \"Failed to analyze incident\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Ticket endpoints\n  app.get(\"/api/tickets\", async (req, res) => {\n    try {\n      const storage = getStorage();\n      const tickets = await storage.getAllTickets();\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Failed to fetch tickets:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch tickets\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.post(\"/api/tickets\", async (req, res) => {\n    try {\n      const storage = getStorage();\n      const validatedData = insertTicketSchema.parse(req.body);\n      const ticket = await storage.createTicket(validatedData);\n      res.status(201).json(ticket);\n    } catch (error) {\n      console.error(\"Failed to create ticket:\", error);\n      res.status(500).json({ \n        error: \"Failed to create ticket\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Store incident reports submitted via blockchain (handles both manual and AI-generated cases)\n  app.post('/api/incident-reports', async (req, res) => {\n    try {\n      const incidentData = req.body;\n\n      // Store in memory (in production, this would go to a database)\n      const incidentReport = {\n        id: Date.now().toString(),\n        ...incidentData,\n        submittedAt: new Date().toISOString(),\n        status: 'submitted',\n        analysisStatus: 'pending_assignment'\n      };\n\n      console.log('Unified incident report stored:', {\n        id: incidentReport.id,\n        title: incidentReport.title,\n        network: incidentReport.network,\n        txHash: incidentReport.blockchainTxHash,\n        submissionType: incidentReport.submissionType || 'manual_incident_report'\n      });\n\n      // Trigger analyst notification for both types\n      console.log('Notifying analysts of new case:', {\n        type: incidentReport.submissionType,\n        severity: incidentReport.severity,\n        requiredAnalysts: incidentReport.requiredAnalysts\n      });\n\n      res.json({ \n        success: true, \n        incidentId: incidentReport.id,\n        message: 'Case submitted successfully to dSOC network' \n      });\n\n    } catch (error) {\n      console.error('Error storing incident report:', error);\n      res.status(500).json({ \n        error: 'Failed to store incident report',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // AI-powered case analysis endpoint for blockchain submission\n  app.post('/api/ai/analyze-case', async (req, res) => {\n    try {\n      const { userInput, caseType, requestType } = req.body;\n\n      if (!userInput || !caseType) {\n        return res.status(400).json({ error: 'User input and case type are required' });\n      }\n\n      if (!API_KEY) {\n        return res.status(500).json({ \n          error: \"AI service is not configured. Please add GEMINI_API_KEY to environment variables.\" \n        });\n      }\n\n      const genAI = new GoogleGenerativeAI(API_KEY);\n      const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n      const prompt = `You are a cybersecurity expert analyzing a security incident for blockchain case submission. \n\nCase Type: ${caseType}\nUser Description: ${userInput}\n\nAnalyze this security incident and provide a structured response for security analysts. Include:\n1. A clear, professional title\n2. Severity level (low/medium/high/critical) \n3. Category classification\n4. Detailed technical analysis\n5. Security recommendations\n6. Estimated CLT reward amount (50-1000 based on severity and complexity)\n7. Number of analysts needed (1-5 based on complexity)\n\nRespond in valid JSON format:\n{\n  \"title\": \"Professional case title\",\n  \"severity\": \"low|medium|high|critical\", \n  \"category\": \"vulnerability|breach|malware|phishing|ddos|insider_threat|compliance|other\",\n  \"description\": \"Clear, concise summary for analysts\",\n  \"technicalDetails\": \"Detailed technical analysis with evidence and indicators\",\n  \"recommendations\": [\"recommendation1\", \"recommendation2\", \"recommendation3\"],\n  \"estimatedReward\": 100,\n  \"requiredAnalysts\": 2\n}`;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const analysis = response.text();\n\n      // Try to parse as JSON, fallback to structured parsing\n      let parsedResult;\n      try {\n        // Extract JSON from response\n        const jsonMatch = analysis.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          parsedResult = JSON.parse(jsonMatch[0]);\n        } else {\n          throw new Error('No JSON found');\n        }\n      } catch {\n        // Fallback structured response\n        const severityMap: Record<string, string> = {\n          'vulnerability': 'medium',\n          'breach': 'high', \n          'malware': 'high',\n          'phishing': 'medium',\n          'ddos': 'high',\n          'insider_threat': 'critical',\n          'compliance': 'low',\n          'other': 'medium'\n        };\n\n        const caseSeverity = severityMap[caseType] || 'medium';\n\n        parsedResult = {\n          title: `${caseType.charAt(0).toUpperCase() + caseType.slice(1)} Security Case`,\n          severity: caseSeverity,\n          category: caseType,\n          description: userInput.substring(0, 200) + (userInput.length > 200 ? '...' : ''),\n          technicalDetails: analysis,\n          recommendations: [\n            'Immediate containment and isolation',\n            'Comprehensive forensic analysis', \n            'Implementation of monitoring controls'\n          ],\n          estimatedReward: caseSeverity === 'critical' ? 500 : caseSeverity === 'high' ? 300 : 150,\n          requiredAnalysts: caseSeverity === 'critical' ? 3 : 2\n        };\n      }\n\n      res.json(parsedResult);\n    } catch (error: any) {\n      console.error('Case analysis error:', error.message);\n      res.status(500).json({ \n        error: 'Failed to analyze security case',\n        details: error.message \n      });\n    }\n  });\n\n  // AI Cases storage endpoint\n  app.post('/api/ai-cases', async (req, res) => {\n    try {\n      const caseData = {\n        id: Date.now().toString(),\n        ...req.body,\n        status: 'pending_analysis',\n        createdAt: new Date().toISOString()\n      };\n\n      // Store case in memory (in production, use database)\n      if (!(global as any).aiCases) {\n        (global as any).aiCases = [];\n      }\n      (global as any).aiCases.unshift(caseData);\n\n      console.log(`New AI case uploaded: ${caseData.title} (Network: ${caseData.network})`);\n\n      res.json({ success: true, caseId: caseData.id });\n    } catch (error: any) {\n      console.error('AI case storage error:', error.message);\n      res.status(500).json({ \n        error: 'Failed to store AI case',\n        details: error.message \n      });\n    }\n  });\n\n  // Get AI cases endpoint\n  app.get('/api/ai-cases', async (req, res) => {\n    try {\n      const cases = (global as any).aiCases || [];\n      res.json(cases);\n    } catch (error: any) {\n      console.error('AI cases retrieval error:', error.message);\n      res.status(500).json({ \n        error: 'Failed to retrieve AI cases',\n        details: error.message \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":26320},"server/storage.ts":{"content":"import { \n  users, tickets, incident_reports, \n  type User, type InsertUser, \n  type Ticket, type InsertTicket,\n  type IncidentReport, type InsertIncidentReport\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\nimport axios from \"axios\";\n\n// Pinata configuration for IPFS storage\nconst pinataJWT = process.env.PINATA_JWT;\nconst pinataGateway = process.env.PINATA_GATEWAY || \"https://gateway.pinata.cloud\";\n\n// Interface for all CRUD operations\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByWallet(walletAddress: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Incident Report operations\n  createIncidentReport(report: InsertIncidentReport): Promise<IncidentReport>;\n  getIncidentReports(): Promise<IncidentReport[]>;\n  getIncidentReportById(id: number): Promise<IncidentReport | undefined>;\n  updateIncidentReport(id: number, updates: Partial<IncidentReport>): Promise<IncidentReport>;\n\n  // Ticket operations\n  createTicket(ticket: InsertTicket): Promise<Ticket>;\n  getTickets(): Promise<Ticket[]>;\n  getAllTickets(): Promise<Ticket[]>;\n  getTicketById(id: number): Promise<Ticket | null>;\n  updateTicket(id: number, updates: Partial<Ticket>): Promise<Ticket>;\n}\n\n// In-memory storage as fallback when database is unavailable\nexport class MemoryStorage implements IStorage {\n  private incidentReports: Map<number, IncidentReport> = new Map();\n  private users: Map<number, User> = new Map();\n  private tickets: Map<number, Ticket> = new Map();\n  private currentId = 1;\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByWallet(walletAddress: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.wallet_address === walletAddress);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user: User = { \n      ...insertUser, \n      id: this.currentId++, \n      created_at: new Date(), \n      updated_at: new Date(),\n      clt_balance: insertUser.clt_balance ?? 0,\n      stake_balance: insertUser.stake_balance ?? 0\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async createIncidentReport(report: InsertIncidentReport): Promise<IncidentReport> {\n    const newReport: IncidentReport = {\n      ...report,\n      id: this.currentId++,\n      created_at: new Date(),\n      updated_at: new Date(),\n      ticket_id: report.ticket_id ?? null,\n      severity: report.severity ?? \"medium\",\n      status: report.status ?? \"pending\",\n      transaction_hash: report.transaction_hash ?? null,\n      affected_systems: report.affected_systems ?? null,\n      attack_vectors: report.attack_vectors ?? null,\n      ai_analysis: report.ai_analysis ?? null,\n      contract_address: report.contract_address ?? null,\n      evidence_urls: report.evidence_urls ?? null,\n      assigned_analyst: report.assigned_analyst ?? null,\n      assigned_certifier: report.assigned_certifier ?? null,\n      client_wallet: report.client_wallet ?? null,\n      block_number: report.block_number ?? null,\n      gas_used: report.gas_used ?? null\n    };\n    this.incidentReports.set(newReport.id, newReport);\n    return newReport;\n  }\n\n  async getIncidentReports(): Promise<IncidentReport[]> {\n    return Array.from(this.incidentReports.values()).sort((a, b) => \n      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n    );\n  }\n\n  async getIncidentReportById(id: number): Promise<IncidentReport | undefined> {\n    return this.incidentReports.get(id);\n  }\n\n  async updateIncidentReport(id: number, updates: Partial<IncidentReport>): Promise<IncidentReport> {\n    const existing = this.incidentReports.get(id);\n    if (!existing) {\n      throw new Error(`Incident report with id ${id} not found`);\n    }\n\n    const updated = { ...existing, ...updates, updated_at: new Date() };\n    this.incidentReports.set(id, updated);\n    return updated;\n  }\n\n  async createTicket(ticket: InsertTicket): Promise<Ticket> {\n    const newTicket: Ticket = {\n      ...ticket,\n      id: this.currentId++,\n      created_at: new Date(),\n      updated_at: new Date(),\n      analyst_address: ticket.analyst_address ?? null,\n      report_hash: ticket.report_hash ?? null,\n      transaction_hash: ticket.transaction_hash ?? null,\n      status: ticket.status ?? 0\n    };\n    this.tickets.set(newTicket.id, newTicket);\n    return newTicket;\n  }\n\n  async getTickets(): Promise<Ticket[]> {\n    return Array.from(this.tickets.values()).sort((a, b) => \n      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n    );\n  }\n\n  async getAllTickets(): Promise<Ticket[]> {\n    return this.getTickets();\n  }\n\n  async getTicketById(id: number): Promise<Ticket | null> {\n    return this.tickets.get(id) || null;\n  }\n\n  async updateTicket(id: number, updates: Partial<Ticket>): Promise<Ticket> {\n    const existing = this.tickets.get(id);\n    if (!existing) {\n      throw new Error(`Ticket with id ${id} not found`);\n    }\n\n    const updated = { ...existing, ...updates, updated_at: new Date() };\n    this.tickets.set(id, updated);\n    return updated;\n  }\n}\n\n// Pinata IPFS storage for decentralized data management (Direct API)\nexport class PinataStorage implements IStorage {\n  private dataCache: Map<string, any> = new Map();\n  private metadataHash: string | null = null;\n  private pinataApiKey: string;\n  private pinataSecretKey: string;\n  private pinataGateway: string;\n\n  constructor() {\n    this.pinataApiKey = process.env.PINATA_API_KEY || \"\";\n    this.pinataSecretKey = process.env.PINATA_SECRET_KEY || \"\";\n    this.pinataGateway = process.env.PINATA_GATEWAY || \"https://gateway.pinata.cloud\";\n    \n    console.log(\"Pinata Direct API initialization:\", {\n      apiKey: this.pinataApiKey ? \"present\" : \"missing\",\n      secretKey: this.pinataSecretKey ? \"present\" : \"missing\",\n      gateway: this.pinataGateway\n    });\n    \n    if (this.pinataApiKey && this.pinataSecretKey) {\n      this.loadMetadata();\n      console.log(\"✅ Pinata Direct API storage initialized successfully\");\n    } else {\n      console.warn(\"⚠️  Pinata API credentials not complete\");\n    }\n  }\n\n  private async loadMetadata() {\n    try {\n      if (!this.pinataApiKey || !this.pinataSecretKey) return;\n      \n      // List files to find existing metadata\n      const listResponse = await fetch('https://api.pinata.cloud/data/pinList?status=pinned', {\n        headers: {\n          pinata_api_key: this.pinataApiKey,\n          pinata_secret_api_key: this.pinataSecretKey,\n        },\n      });\n      \n      if (listResponse.ok) {\n        const files = await listResponse.json();\n        const metadataFile = files.rows.find((file: any) => file.metadata.name === 'dSOC-Metadata');\n        \n        if (metadataFile) {\n          this.metadataHash = metadataFile.ipfs_pin_hash;\n          const response = await axios.get(`${this.pinataGateway}/ipfs/${this.metadataHash}`);\n          const metadata = response.data;\n          \n          console.log(\"📋 Current IPFS Metadata:\", JSON.stringify(metadata, null, 2));\n          \n          for (const [key, value] of Object.entries(metadata.dataHashes || {})) {\n            // Check if the value is a hash string or actual data\n            if (typeof value === 'string' && value.startsWith('Qm')) {\n              try {\n                console.log(`🔄 Loading ${key} from IPFS hash: ${value}`);\n                const dataResponse = await axios.get(`${this.pinataGateway}/ipfs/${value}`);\n                this.dataCache.set(key.replace('_hash', ''), dataResponse.data);\n                this.dataCache.set(key, value); // Store the hash separately\n              } catch (error) {\n                console.warn(`Failed to load cached data for ${key}:`, error);\n              }\n            } else {\n              // It's actual data, store it directly\n              this.dataCache.set(key, value);\n            }\n          }\n          \n          console.log(\"✅ Pinata metadata loaded from IPFS\");\n        } else {\n          console.log(\"📝 No existing metadata found, starting fresh\");\n        }\n      }\n    } catch (error) {\n      console.warn(\"Could not load Pinata metadata:\", error);\n    }\n  }\n\n  private async uploadToIPFSWithPinata(data: any, filename: string, name: string): Promise<string> {\n    const url = 'https://api.pinata.cloud/pinning/pinFileToIPFS';\n\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const file = new File([blob], filename, { type: 'application/json' });\n    const fd = new FormData();\n    fd.append('file', file);\n    fd.append('pinataMetadata', JSON.stringify({ name }));\n\n    console.log(`📤 Uploading to IPFS: ${name} (${filename})`);\n    console.log(`📋 Data Preview:`, JSON.stringify(data, null, 2));\n\n    const res = await fetch(url, {\n      method: 'POST',\n      body: fd,\n      headers: {\n        pinata_api_key: this.pinataApiKey,\n        pinata_secret_api_key: this.pinataSecretKey,\n      },\n    });\n    \n    const result = await res.json();\n    if (!res.ok) {\n      throw new Error(typeof result.error === 'object' ? JSON.stringify(result.error) : result.error);\n    }\n    \n    console.log(`✅ IPFS Upload Success: ${result.IpfsHash}`);\n    return result.IpfsHash;\n  }\n\n  private async updateMetadata() {\n    if (!this.pinataApiKey || !this.pinataSecretKey) return;\n    \n    try {\n      const metadata = {\n        timestamp: new Date().toISOString(),\n        version: \"1.0.0\",\n        platform: \"dSOC\",\n        dataHashes: Object.fromEntries(this.dataCache.entries())\n      };\n      \n      const metadataHash = await this.uploadToIPFSWithPinata(metadata, 'dsoc-metadata.json', 'dSOC-Metadata');\n      this.metadataHash = metadataHash;\n      console.log(`📄 Metadata updated: ${metadataHash}`);\n      console.log(`🔗 View at: ${this.pinataGateway}/ipfs/${metadataHash}`);\n    } catch (error) {\n      console.error(\"Failed to update metadata:\", error);\n    }\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    const users = this.dataCache.get('users') || [];\n    return users.find((user: User) => user.id === id);\n  }\n\n  async getUserByWallet(walletAddress: string): Promise<User | undefined> {\n    const users = this.dataCache.get('users') || [];\n    return users.find((user: User) => user.wallet_address === walletAddress);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const users = this.dataCache.get('users') || [];\n    const newUser: User = {\n      ...insertUser,\n      id: users.length + 1,\n      created_at: new Date(),\n      updated_at: new Date(),\n      clt_balance: insertUser.clt_balance ?? 0,\n      stake_balance: insertUser.stake_balance ?? 0\n    };\n    \n    users.push(newUser);\n    this.dataCache.set('users', users);\n    \n    if (this.pinataApiKey && this.pinataSecretKey) {\n      try {\n        const hash = await this.uploadToIPFSWithPinata(users, 'dsoc-users.json', 'dSOC-Users');\n        this.dataCache.set('users_hash', hash);\n        await this.updateMetadata();\n      } catch (error) {\n        console.error(\"Failed to save users to IPFS:\", error);\n      }\n    }\n    \n    return newUser;\n  }\n\n  // Incident Report operations\n  async createIncidentReport(report: InsertIncidentReport): Promise<IncidentReport> {\n    const reports = this.dataCache.get('incident_reports') || [];\n    const newReport: IncidentReport = {\n      ...report,\n      id: reports.length + 1,\n      created_at: new Date(),\n      updated_at: new Date(),\n      ticket_id: report.ticket_id ?? null,\n      severity: report.severity ?? \"medium\",\n      status: report.status ?? \"pending\",\n      transaction_hash: report.transaction_hash ?? null,\n      affected_systems: report.affected_systems ?? null,\n      attack_vectors: report.attack_vectors ?? null,\n      ai_analysis: report.ai_analysis ?? null,\n      contract_address: report.contract_address ?? null,\n      evidence_urls: report.evidence_urls ?? null,\n      assigned_analyst: report.assigned_analyst ?? null,\n      assigned_certifier: report.assigned_certifier ?? null,\n      client_wallet: report.client_wallet ?? null,\n      block_number: report.block_number ?? null,\n      gas_used: report.gas_used ?? null\n    };\n    \n    reports.push(newReport);\n    this.dataCache.set('incident_reports', reports);\n    \n    if (this.pinataApiKey && this.pinataSecretKey) {\n      try {\n        const hash = await this.uploadToIPFSWithPinata(reports, 'dsoc-incident-reports.json', 'dSOC-IncidentReports');\n        this.dataCache.set('incident_reports_hash', hash);\n        await this.updateMetadata();\n      } catch (error) {\n        console.error(\"Failed to save incident reports to IPFS:\", error);\n      }\n    }\n    \n    return newReport;\n  }\n\n  async getIncidentReports(): Promise<IncidentReport[]> {\n    // Return cached data directly for better performance\n    const reports = this.dataCache.get('incident_reports') || [];\n    console.log(`📊 Returning ${Array.isArray(reports) ? reports.length : 0} incident reports from cache`);\n    return Array.isArray(reports) ? reports.sort((a: IncidentReport, b: IncidentReport) => \n      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n    ) : [];\n  }\n\n  async getIncidentReportById(id: number): Promise<IncidentReport | undefined> {\n    // Ensure we have fresh data\n    const reports = await this.getIncidentReports();\n    return reports.find((report: IncidentReport) => report.id === id);\n  }\n\n  async updateIncidentReport(id: number, updates: Partial<IncidentReport>): Promise<IncidentReport> {\n    const reports = this.dataCache.get('incident_reports') || [];\n    const index = reports.findIndex((report: IncidentReport) => report.id === id);\n    \n    if (index === -1) {\n      throw new Error(`Incident report with id ${id} not found`);\n    }\n    \n    const updated = { ...reports[index], ...updates, updated_at: new Date() };\n    reports[index] = updated;\n    this.dataCache.set('incident_reports', reports);\n    \n    if (this.pinataApiKey && this.pinataSecretKey) {\n      try {\n        const hash = await this.uploadToIPFSWithPinata(reports, 'dsoc-incident-reports.json', 'dSOC-IncidentReports');\n        this.dataCache.set('incident_reports_hash', hash);\n        await this.updateMetadata();\n      } catch (error) {\n        console.error(\"Failed to update incident reports on IPFS:\", error);\n      }\n    }\n    \n    return updated;\n  }\n\n  // Ticket operations\n  async createTicket(ticket: InsertTicket): Promise<Ticket> {\n    const tickets = this.dataCache.get('tickets') || [];\n    const newTicket: Ticket = {\n      ...ticket,\n      id: tickets.length + 1,\n      created_at: new Date(),\n      updated_at: new Date(),\n      analyst_address: ticket.analyst_address ?? null,\n      report_hash: ticket.report_hash ?? null,\n      transaction_hash: ticket.transaction_hash ?? null,\n      status: ticket.status ?? 0\n    };\n    \n    tickets.push(newTicket);\n    this.dataCache.set('tickets', tickets);\n    \n    if (this.pinataApiKey && this.pinataSecretKey) {\n      try {\n        const hash = await this.uploadToIPFSWithPinata(tickets, 'dsoc-tickets.json', 'dSOC-Tickets');\n        this.dataCache.set('tickets_hash', hash);\n        await this.updateMetadata();\n      } catch (error) {\n        console.error(\"Failed to save tickets to IPFS:\", error);\n      }\n    }\n    \n    return newTicket;\n  }\n\n  async getTickets(): Promise<Ticket[]> {\n    const tickets = this.dataCache.get('tickets') || [];\n    return Array.isArray(tickets) ? tickets.sort((a: Ticket, b: Ticket) => \n      new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n    ) : [];\n  }\n\n  async getAllTickets(): Promise<Ticket[]> {\n    return this.getTickets();\n  }\n\n  async getTicketById(id: number): Promise<Ticket | null> {\n    const tickets = this.dataCache.get('tickets') || [];\n    return tickets.find((ticket: Ticket) => ticket.id === id) || null;\n  }\n\n  async updateTicket(id: number, updates: Partial<Ticket>): Promise<Ticket> {\n    const tickets = this.dataCache.get('tickets') || [];\n    const index = tickets.findIndex((ticket: Ticket) => ticket.id === id);\n    \n    if (index === -1) {\n      throw new Error(`Ticket with id ${id} not found`);\n    }\n    \n    const updated = { ...tickets[index], ...updates, updated_at: new Date() };\n    tickets[index] = updated;\n    this.dataCache.set('tickets', tickets);\n    \n    if (this.pinataApiKey && this.pinataSecretKey) {\n      try {\n        const hash = await this.uploadToIPFSWithPinata(tickets, 'dsoc-tickets.json', 'dSOC-Tickets');\n        this.dataCache.set('tickets_hash', hash);\n        await this.updateMetadata();\n      } catch (error) {\n        console.error(\"Failed to update tickets on IPFS:\", error);\n      }\n    }\n    \n    return updated;\n  }\n}\n\n// Real database storage using Drizzle + Neon\nexport class DatabaseStorage implements IStorage {\n\n  async getUser(id: number): Promise<User | undefined> {\n    if (!db) throw new Error(\"Database not initialized\");\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByWallet(walletAddress: string): Promise<User | undefined> {\n    if (!db) throw new Error(\"Database not initialized\");\n    const result = await db.select().from(users).where(eq(users.wallet_address, walletAddress)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    if (!db) throw new Error(\"Database not initialized\");\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async createIncidentReport(report: InsertIncidentReport): Promise<IncidentReport> {\n    if (!db) throw new Error(\"Database not initialized\");\n    const result = await db.insert(incident_reports).values(report).returning();\n    return result[0];\n  }\n\n  async getIncidentReports(): Promise<IncidentReport[]> {\n    if (!db) throw new Error(\"Database not initialized\");\n    return await db.select().from(incident_reports).orderBy(desc(incident_reports.created_at));\n  }\n\n  async getIncidentReportById(id: number): Promise<IncidentReport | undefined> {\n    if (!db) throw new Error(\"Database not initialized\");\n    const result = await db.select().from(incident_reports).where(eq(incident_reports.id, id)).limit(1);\n    return result[0];\n  }\n\n  async updateIncidentReport(id: number, updates: Partial<IncidentReport>): Promise<IncidentReport> {\n    if (!db) throw new Error(\"Database not initialized\");\n    const result = await db.update(incident_reports)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(incident_reports.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async createTicket(ticket: InsertTicket): Promise<Ticket> {\n    if (!db) throw new Error(\"Database not initialized\");\n    const result = await db.insert(tickets).values(ticket).returning();\n    return result[0];\n  }\n\n  async getTickets(): Promise<Ticket[]> {\n    if (!db) throw new Error(\"Database not initialized\");\n    return await db.select().from(tickets).orderBy(desc(tickets.created_at));\n  }\n\n  async getAllTickets(): Promise<Ticket[]> {\n    return this.getTickets();\n  }\n\n  async getTicketById(id: number): Promise<Ticket | null> {\n    if (!db) throw new Error(\"Database not initialized\");\n    const result = await db.select().from(tickets).where(eq(tickets.id, id)).limit(1);\n    return result[0] || null;\n  }\n\n  async updateTicket(id: number, updates: Partial<Ticket>): Promise<Ticket> {\n    if (!db) throw new Error(\"Database not initialized\");\n    const result = await db.update(tickets)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(tickets.id, id))\n      .returning();\n    return result[0];\n  }\n}\n\n// Storage factory - determines which storage to use based on environment\nexport function createStorage(): IStorage {\n  const databaseUrl = process.env.DATABASE_URL;\n  const pinataJWT = process.env.PINATA_JWT;\n\n  console.log(\"Environment check:\", { \n    pinataJWT: pinataJWT ? \"present\" : \"missing\", \n    databaseUrl: databaseUrl ? \"present\" : \"missing\" \n  });\n\n  if (pinataJWT) {\n    console.log(\"🔗 Using Pinata IPFS storage for decentralized data\");\n    return new PinataStorage();\n  } else if (databaseUrl) {\n    console.log(\"🗄️ Using database storage\");\n    return new DatabaseStorage();\n  } else {\n    console.log(\"📝 Using in-memory storage for demo\");\n    return new MemoryStorage();\n  }\n}\n\n// Global storage instance - will be initialized after environment variables are loaded\nlet storage: IStorage;\n\nexport function getStorage(): IStorage {\n  if (!storage) {\n    storage = createStorage();\n  }\n  return storage;\n}","size_bytes":20674},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/mockData.ts":{"content":"\nexport interface MockTicket {\n  id: number;\n  ticket_id: number;\n  client_address: string;\n  analyst_address?: string;\n  title: string;\n  description: string;\n  category: string;\n  evidence_hash: string;\n  report_hash?: string;\n  status: number;\n  stake_amount: number;\n  transaction_hash: string;\n  created_at: string;\n  updated_at: string;\n  severity: 'Critical' | 'High' | 'Medium' | 'Low';\n  loss_amount?: string;\n  affected_protocols?: string[];\n  attack_vector?: string;\n  blockchain?: string;\n}\n\nexport const mockTickets: MockTicket[] = [\n  // Recent Critical Incidents (2024)\n  {\n    id: 1,\n    ticket_id: 1001,\n    client_address: \"0x1234567890abcdef1234567890abcdef12345678\",\n    analyst_address: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n    title: \"Multichain Bridge Exploit - $126M Drained\",\n    description: \"Attackers exploited Multichain's anyCall v7 cross-chain infrastructure by compromising validator signatures. The exploit affected bridges on Ethereum, BNB Chain, Arbitrum, and other networks. Unauthorized withdrawals totaling $126M were executed across multiple chains within 4 hours.\",\n    category: \"Cross-Chain Bridge\",\n    evidence_hash: \"0xa1b2c3d4e5f6789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xf1e2d3c4b5a6789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 15000,\n    transaction_hash: \"0x123abc456def789ghi012jkl345mno678pqr901stu234vwx567yz890abcdef123\",\n    created_at: \"2024-01-20T08:30:00Z\",\n    updated_at: \"2024-01-21T16:45:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$126,000,000\",\n    affected_protocols: [\"Multichain\", \"Fantom\", \"Moonbeam\"],\n    attack_vector: \"Validator Compromise\",\n    blockchain: \"Multi-Chain\"\n  },\n  {\n    id: 2,\n    ticket_id: 1002,\n    client_address: \"0x9876543210fedcba9876543210fedcba98765432\",\n    analyst_address: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n    title: \"Radiant Capital Flash Loan Attack - $58M Loss\",\n    description: \"Sophisticated flash loan attack on Radiant Capital's lending protocol. Attackers manipulated oracle prices through multiple DEX trades, inflated collateral values, and borrowed maximum liquidity before crashing prices. The attack utilized Balancer flash loans and targeted USDC, WETH, and ARB pools.\",\n    category: \"Flash Loan Attack\",\n    evidence_hash: \"0xb2c3d4e5f6a1789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xg2f3e4d5c6b7789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 12000,\n    transaction_hash: \"0x456def789abc012ghi345jkl678mno901pqr234stu567vwx890yz123abcdef456\",\n    created_at: \"2024-01-19T14:22:00Z\",\n    updated_at: \"2024-01-20T09:15:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$58,000,000\",\n    affected_protocols: [\"Radiant Capital\", \"Balancer\", \"Arbitrum\"],\n    attack_vector: \"Oracle Manipulation\",\n    blockchain: \"Arbitrum\"\n  },\n  {\n    id: 3,\n    ticket_id: 1003,\n    client_address: \"0x1111222233334444555566667777888899990000\",\n    analyst_address: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n    title: \"Orbit Chain Bridge Hack - $82M Stolen\",\n    description: \"Orbit Chain's cross-chain bridge suffered a critical security breach when attackers gained control of 7 out of 9 multisig wallet private keys. The compromise led to unauthorized minting and withdrawal of wrapped tokens including WETH, USDT, USDC, and DAI across Ethereum and Klaytn networks.\",\n    category: \"Multisig Compromise\",\n    evidence_hash: \"0xc3d4e5f6a1b2789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xh3g4f5e6d7c8789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 18000,\n    transaction_hash: \"0x789abc012def345ghi678jkl901mno234pqr567stu890vwx123yz456abcdef789\",\n    created_at: \"2024-01-18T11:45:00Z\",\n    updated_at: \"2024-01-19T17:30:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$82,000,000\",\n    affected_protocols: [\"Orbit Chain\", \"Ethereum\", \"Klaytn\"],\n    attack_vector: \"Private Key Compromise\",\n    blockchain: \"Multi-Chain\"\n  },\n  {\n    id: 4,\n    ticket_id: 1004,\n    client_address: \"0xaaaa1111bbbb2222cccc3333dddd4444eeee5555\",\n    analyst_address: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n    title: \"KyberSwap Concentrated Liquidity Exploit - $46M\",\n    description: \"Attackers exploited a vulnerability in KyberSwap's concentrated liquidity feature by manipulating tick boundaries and liquidity calculations. The exploit affected multiple pools across Ethereum, Arbitrum, Optimism, and Polygon, draining LP tokens through price manipulation.\",\n    category: \"AMM Exploit\",\n    evidence_hash: \"0xd4e5f6a1b2c3789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xi4h5g6f7e8d9789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 9500,\n    transaction_hash: \"0xabc012def345ghi678jkl901mno234pqr567stu890vwx123yz456cdefab012345\",\n    created_at: \"2024-01-17T16:20:00Z\",\n    updated_at: \"2024-01-18T12:40:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$46,000,000\",\n    affected_protocols: [\"KyberSwap\", \"Ethereum\", \"Arbitrum\", \"Optimism\", \"Polygon\"],\n    attack_vector: \"Liquidity Pool Manipulation\",\n    blockchain: \"Multi-Chain\"\n  },\n  {\n    id: 5,\n    ticket_id: 1005,\n    client_address: \"0x5555eeee4444dddd3333cccc2222bbbb1111aaaa\",\n    analyst_address: \"0x2222333344445555666677778888999900001111\",\n    title: \"Mixin Network Hack - $200M Database Breach\",\n    description: \"Mixin Network suffered a catastrophic database attack affecting their cloud service infrastructure. Attackers gained access to partial private keys and transaction data, compromising user assets across multiple cryptocurrencies. The breach affected BTC, ETH, USDT, and other major tokens.\",\n    category: \"Infrastructure Breach\",\n    evidence_hash: \"0xe5f6a1b2c3d4789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xj5i6h7g8f9e0789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 25000,\n    transaction_hash: \"0xdef345ghi678jkl901mno234pqr567stu890vwx123yz456abcdef789012345678\",\n    created_at: \"2024-01-16T09:15:00Z\",\n    updated_at: \"2024-01-17T14:50:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$200,000,000\",\n    affected_protocols: [\"Mixin Network\"],\n    attack_vector: \"Database Compromise\",\n    blockchain: \"Multi-Chain\"\n  },\n  {\n    id: 6,\n    ticket_id: 1006,\n    client_address: \"0x6666ffff5555eeee4444dddd3333cccc2222bbbb\",\n    analyst_address: \"0x2222333344445555666677778888999900001111\",\n    title: \"HTX Exchange Hot Wallet Compromise - $30M\",\n    description: \"HTX (formerly Huobi) exchange suffered a hot wallet security breach affecting ETH, TRX, and other cryptocurrency holdings. The attacker used compromised private keys to drain multiple hot wallets across different blockchain networks within a 2-hour window.\",\n    category: \"Exchange Hack\",\n    evidence_hash: \"0xf6a1b2c3d4e5789012345678901234567890123456789012345678901234567890\",\n    status: 2,\n    stake_amount: 11000,\n    transaction_hash: \"0x012345678901234567890123456789012345678901234567890123456789abcdef\",\n    created_at: \"2024-01-15T13:30:00Z\",\n    updated_at: \"2024-01-16T08:20:00Z\",\n    severity: \"High\",\n    loss_amount: \"$30,000,000\",\n    affected_protocols: [\"HTX\", \"Ethereum\", \"Tron\"],\n    attack_vector: \"Hot Wallet Compromise\",\n    blockchain: \"Multi-Chain\"\n  },\n\n  // 2023 Major Incidents\n  {\n    id: 7,\n    ticket_id: 1007,\n    client_address: \"0x7777000066665555444433332222111100009999\",\n    analyst_address: \"0x3333444455556666777788889999000011112222\",\n    title: \"Euler Finance Donation Attack - $197M\",\n    description: \"Massive flash loan attack exploiting Euler's donation mechanism. Attackers manipulated eToken and dToken exchange rates through donation functions, then liquidated positions for massive profits across multiple collateral types.\",\n    category: \"Flash Loan Attack\",\n    evidence_hash: \"0xe1f2a3b4c5d6789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xa1b2c3d4e5f6789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 22000,\n    transaction_hash: \"0x567890123456789012345678901234567890123456789012345678901234abcdef\",\n    created_at: \"2023-03-13T16:40:00Z\",\n    updated_at: \"2023-03-14T10:20:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$197,000,000\",\n    affected_protocols: [\"Euler Finance\"],\n    attack_vector: \"Donation Manipulation\",\n    blockchain: \"Ethereum\"\n  },\n  {\n    id: 8,\n    ticket_id: 1008,\n    client_address: \"0x8888111177776666555544443333222211110000\",\n    analyst_address: \"0x4444777733332222111100009999888877776666\",\n    title: \"BonqDAO Liquidation Manipulation - $120M\",\n    description: \"Attackers manipulated WALBT token price oracle to artificially inflate collateral values, borrowed maximum amounts, then crashed the token price to liquidate positions at massive discounts, draining protocol treasury.\",\n    category: \"Oracle Manipulation\",\n    evidence_hash: \"0xf2a3b4c5d6e7789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xb2c3d4e5f6a7789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 8900,\n    transaction_hash: \"0x890123456789012345678901234567890123456789012345678901234567abcdef\",\n    created_at: \"2023-02-01T09:15:00Z\",\n    updated_at: \"2023-02-02T14:30:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$120,000,000\",\n    affected_protocols: [\"BonqDAO\", \"AllianceBlock\"],\n    attack_vector: \"Oracle Price Manipulation\",\n    blockchain: \"Polygon\"\n  },\n  {\n    id: 9,\n    ticket_id: 1009,\n    client_address: \"0x9999222288887777666655554444333322221111\",\n    analyst_address: \"0x5555888844443333222211110000999988887777\",\n    title: \"FTX Exchange Collapse - $8B Lost\",\n    description: \"Massive liquidity crisis at FTX exchange resulting in customer fund misappropriation and exchange bankruptcy. Investigation revealed improper use of customer deposits for trading operations at Alameda Research.\",\n    category: \"Exchange Collapse\",\n    evidence_hash: \"0xa3b4c5d6e7f8789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xc3d4e5f6a7b8789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 50000,\n    transaction_hash: \"0x123456789012345678901234567890123456789012345678901234567890abcdef\",\n    created_at: \"2022-11-11T12:00:00Z\",\n    updated_at: \"2022-11-15T18:00:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$8,000,000,000\",\n    affected_protocols: [\"FTX\"],\n    attack_vector: \"Misappropriation of Funds\",\n    blockchain: \"Multi-Chain\"\n  },\n\n  // Generate 80+ more realistic incidents\n  {\n    id: 10,\n    ticket_id: 1010,\n    client_address: \"0x0000333399998888777766665555444433332222\",\n    analyst_address: \"0x6666999955554444333322221111000099998888\",\n    title: \"Wormhole Bridge Exploit - $325M\",\n    description: \"Attackers exploited signature verification vulnerability in Wormhole bridge between Ethereum and Solana. Forged guardian signatures allowed minting of 120,000 wETH on Ethereum without proper backing.\",\n    category: \"Bridge Exploit\",\n    evidence_hash: \"0xd0e1f2a3b4c5789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xd0e1f2a3b4c5789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 35000,\n    transaction_hash: \"0x234567890123456789012345678901234567890123456789012345678901abcdef\",\n    created_at: \"2022-02-02T19:24:00Z\",\n    updated_at: \"2022-02-03T08:15:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$325,000,000\",\n    affected_protocols: [\"Wormhole\", \"Ethereum\", \"Solana\"],\n    attack_vector: \"Signature Verification Bypass\",\n    blockchain: \"Multi-Chain\"\n  },\n  {\n    id: 11,\n    ticket_id: 1011,\n    client_address: \"0x1111444400009999888877776666555544443333\",\n    analyst_address: \"0x7777000066665555444433332222111100009999\",\n    title: \"Ronin Network Bridge Hack - $625M\",\n    description: \"Nation-state level attack compromising 5 of 9 validator private keys on Ronin Network bridge. Largest DeFi hack in history affecting Axie Infinity ecosystem with unauthorized withdrawals over 6 days.\",\n    category: \"Validator Compromise\",\n    evidence_hash: \"0xe1f2a3b4c5d6789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xe1f2a3b4c5d6789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 45000,\n    transaction_hash: \"0x567890123456789012345678901234567890123456789012345678901234abcdef\",\n    created_at: \"2022-03-23T00:00:00Z\",\n    updated_at: \"2022-03-29T15:00:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$625,000,000\",\n    affected_protocols: [\"Ronin Network\", \"Axie Infinity\"],\n    attack_vector: \"Social Engineering + Private Key Theft\",\n    blockchain: \"Ethereum\"\n  },\n  {\n    id: 12,\n    ticket_id: 1012,\n    client_address: \"0x2222555511110000999988887777666655554444\",\n    analyst_address: \"0x8888111177776666555544443333222211110000\",\n    title: \"Terra Luna UST Depeg Collapse - $60B\",\n    description: \"Catastrophic failure of Terra ecosystem's algorithmic stablecoin UST leading to LUNA hyperinflation. Death spiral triggered by large UST redemptions and arbitrage exploitation of mint/burn mechanism.\",\n    category: \"Algorithmic Stablecoin Failure\",\n    evidence_hash: \"0xf2a3b4c5d6e7789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xf2a3b4c5d6e7789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 40000,\n    transaction_hash: \"0x890123456789012345678901234567890123456789012345678901234567abcdef\",\n    created_at: \"2022-05-07T14:00:00Z\",\n    updated_at: \"2022-05-12T20:00:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$60,000,000,000\",\n    affected_protocols: [\"Terra\", \"Anchor Protocol\"],\n    attack_vector: \"Economic Attack on Stablecoin\",\n    blockchain: \"Terra\"\n  },\n  {\n    id: 13,\n    ticket_id: 1013,\n    client_address: \"0x3333666622221111000099998888777766665555\",\n    analyst_address: \"0x9999222288887777666655554444333322221111\",\n    title: \"Nomad Bridge Hack - $190M\",\n    description: \"Copy-paste attack on Nomad bridge after initial exploit transaction. Users replicated successful withdrawal transactions by changing recipient addresses, turning bridge into a free-for-all extraction.\",\n    category: \"Bridge Validation Failure\",\n    evidence_hash: \"0xa3b4c5d6e7f8789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xa3b4c5d6e7f8789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 28000,\n    transaction_hash: \"0x123456789012345678901234567890123456789012345678901234567890abcdef\",\n    created_at: \"2022-08-01T20:43:00Z\",\n    updated_at: \"2022-08-02T12:00:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$190,000,000\",\n    affected_protocols: [\"Nomad\", \"Ethereum\", \"Milkomeda\"],\n    attack_vector: \"Transaction Replay\",\n    blockchain: \"Multi-Chain\"\n  },\n  {\n    id: 14,\n    ticket_id: 1014,\n    client_address: \"0x4444777733332222111100009999888877776666\",\n    analyst_address: \"0x0000333399998888777766665555444433332222\",\n    title: \"Wintermute Market Maker Hack - $160M\",\n    description: \"Private key compromise of Wintermute's DeFi operations wallet. Attacker gained access to hot wallet containing various tokens and systematically drained positions across multiple DeFi protocols.\",\n    category: \"Private Key Compromise\",\n    evidence_hash: \"0xb4c5d6e7f8a9789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xb4c5d6e7f8a9789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 32000,\n    transaction_hash: \"0x456789012345678901234567890123456789012345678901234567890123abcdef\",\n    created_at: \"2022-09-20T08:00:00Z\",\n    updated_at: \"2022-09-21T14:30:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$160,000,000\",\n    affected_protocols: [\"Wintermute\", \"1inch\", \"Curve\"],\n    attack_vector: \"Wallet Compromise\",\n    blockchain: \"Ethereum\"\n  },\n  {\n    id: 15,\n    ticket_id: 1015,\n    client_address: \"0x5555888844443333222211110000999988887777\",\n    analyst_address: \"0x1111444400009999888877776666555544443333\",\n    title: \"Poly Network Cross-Chain Hack - $610M\",\n    description: \"Exploitation of signature verification process across Poly Network's cross-chain infrastructure. Attacker forged withdrawal transactions by manipulating keeper signature verification.\",\n    category: \"Cross-Chain Exploit\",\n    evidence_hash: \"0xc5d6e7f8a9b0789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xc5d6e7f8a9b0789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 38000,\n    transaction_hash: \"0x789012345678901234567890123456789012345678901234567890123456abcdef\",\n    created_at: \"2021-08-10T14:00:00Z\",\n    updated_at: \"2021-08-15T10:00:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$610,000,000\",\n    affected_protocols: [\"Poly Network\", \"Ethereum\", \"BSC\", \"Polygon\"],\n    attack_vector: \"Signature Forging\",\n    blockchain: \"Multi-Chain\"\n  },\n\n  // Continue with more 2021-2020 incidents\n  {\n    id: 16,\n    ticket_id: 1016,\n    client_address: \"0x6666999955554444333322221111000099998888\",\n    analyst_address: \"0x2222555511110000999988887777666655554444\",\n    title: \"Compound Protocol Liquidation Bug - $80M\",\n    description: \"Critical bug in Compound's liquidation mechanism allowed users to claim COMP tokens from empty distribution without proper validation. Users drained the protocol's reserves through repeated claims.\",\n    category: \"Protocol Logic Bug\",\n    evidence_hash: \"0xd6e7f8a9b0c1789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xd6e7f8a9b0c1789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 15000,\n    transaction_hash: \"0x012345678901234567890123456789012345678901234567890123456789abcdef\",\n    created_at: \"2021-09-30T18:30:00Z\",\n    updated_at: \"2021-10-01T09:00:00Z\",\n    severity: \"High\",\n    loss_amount: \"$80,000,000\",\n    affected_protocols: [\"Compound\"],\n    attack_vector: \"Logic Error Exploitation\",\n    blockchain: \"Ethereum\"\n  },\n  {\n    id: 17,\n    ticket_id: 1017,\n    client_address: \"0x7777000066665555444433332222111100009999\",\n    analyst_address: \"0x3333666622221111000099998888777766665555\",\n    title: \"Cream Finance Flash Loan Attack - $130M\",\n    description: \"Complex flash loan attack exploiting price oracle manipulation and reentrancy vulnerabilities. Attacker borrowed from multiple protocols, manipulated AMP token price, and extracted value through liquidations.\",\n    category: \"Flash Loan + Oracle Attack\",\n    evidence_hash: \"0xe7f8a9b0c1d2789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xe7f8a9b0c1d2789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 20000,\n    transaction_hash: \"0x345678901234567890123456789012345678901234567890123456789012abcdef\",\n    created_at: \"2021-10-27T14:54:00Z\",\n    updated_at: \"2021-10-28T11:20:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$130,000,000\",\n    affected_protocols: [\"Cream Finance\", \"Yearn\", \"SushiSwap\"],\n    attack_vector: \"Multi-Protocol Flash Loan\",\n    blockchain: \"Ethereum\"\n  },\n  {\n    id: 18,\n    ticket_id: 1018,\n    client_address: \"0x8888111177776666555544443333222211110000\",\n    analyst_address: \"0x4444777733332222111100009999888877776666\",\n    title: \"BadgerDAO Frontend Attack - $120M\",\n    description: \"Sophisticated social engineering attack compromising BadgerDAO's frontend. Malicious scripts injected into the interface prompted users to approve unlimited token allowances to attacker's contract.\",\n    category: \"Frontend Compromise\",\n    evidence_hash: \"0xf8a9b0c1d2e3789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0xf8a9b0c1d2e3789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 22000,\n    transaction_hash: \"0x678901234567890123456789012345678901234567890123456789012345abcdef\",\n    created_at: \"2021-12-02T00:00:00Z\",\n    updated_at: \"2021-12-03T16:00:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$120,000,000\",\n    affected_protocols: [\"BadgerDAO\"],\n    attack_vector: \"Frontend Injection\",\n    blockchain: \"Ethereum\"\n  },\n\n  // Add many more recent and historical incidents (abbreviated for space)\n  {\n    id: 19,\n    ticket_id: 1019,\n    client_address: \"0x9999222288887777666655554444333322221111\",\n    title: \"Curve Finance DNS Hijack - $570K\",\n    description: \"DNS hijacking attack on Curve Finance website redirecting users to malicious clone. Users connecting wallets had tokens drained through malicious contract interactions.\",\n    category: \"DNS Hijacking\",\n    evidence_hash: \"0xa9b0c1d2e3f4789012345678901234567890123456789012345678901234567890\",\n    status: 1,\n    stake_amount: 3500,\n    transaction_hash: \"0x901234567890123456789012345678901234567890123456789012345678abcdef\",\n    created_at: \"2024-01-09T11:30:00Z\",\n    updated_at: \"2024-01-09T11:30:00Z\",\n    severity: \"High\",\n    loss_amount: \"$570,000\",\n    affected_protocols: [\"Curve Finance\"],\n    attack_vector: \"DNS Poisoning\",\n    blockchain: \"Ethereum\"\n  },\n  {\n    id: 20,\n    ticket_id: 1020,\n    client_address: \"0x0000333399998888777766665555444433332222\",\n    title: \"Balancer V2 Vault Reentrancy - $238K\",\n    description: \"Reentrancy vulnerability in Balancer V2's vault emergency pause mechanism allowed attackers to drain pool tokens during emergency withdrawals.\",\n    category: \"Reentrancy Attack\",\n    evidence_hash: \"0xb0c1d2e3f4a5789012345678901234567890123456789012345678901234567890\",\n    status: 0,\n    stake_amount: 2800,\n    transaction_hash: \"0x234567890123456789012345678901234567890123456789012345678901abcdef\",\n    created_at: \"2024-01-08T16:45:00Z\",\n    updated_at: \"2024-01-08T16:45:00Z\",\n    severity: \"Medium\",\n    loss_amount: \"$238,000\",\n    affected_protocols: [\"Balancer\", \"Ethereum\"],\n    attack_vector: \"Emergency Pause Reentrancy\",\n    blockchain: \"Ethereum\"\n  },\n\n  // Add 70 more realistic incidents spanning 2020-2024\n  {\n    id: 21,\n    ticket_id: 1021,\n    client_address: \"0x1a2b3c4d5e6f7890abcdef1234567890abcdef12\",\n    analyst_address: \"0x2b3c4d5e6f7890ab1234567890abcdef12345678\",\n    title: \"Harvest Finance Economic Attack - $33.8M\",\n    description: \"Economic attack exploiting price slippage in Curve pools. Attacker used flash loans to manipulate USDC/USDT prices, causing significant slippage in Harvest's yield farming strategies.\",\n    category: \"Economic Attack\",\n    evidence_hash: \"0x1a2b3c4d5e6f789012345678901234567890123456789012345678901234567890\",\n    report_hash: \"0x1a2b3c4d5e6f789012345678901234567890123456789012345678901234567890\",\n    status: 3,\n    stake_amount: 8500,\n    transaction_hash: \"0xa1b2c3d4e5f67890123456789012345678901234567890123456789012345678ab\",\n    created_at: \"2020-10-26T15:34:00Z\",\n    updated_at: \"2020-10-27T10:15:00Z\",\n    severity: \"Critical\",\n    loss_amount: \"$33,800,000\",\n    affected_protocols: [\"Harvest Finance\", \"Curve\"],\n    attack_vector: \"Price Manipulation\",\n    blockchain: \"Ethereum\"\n  },\n  {\n    id: 22,\n    ticket_id: 1022,\n    client_address: \"0x3c4d5e6f7890abcd1234567890abcdef12345678\",\n    analyst_address: \"0x4d5e6f7890abcd12567890abcdef1234567890ab\",\n    title: \"Value DeFi Flash Loan Attack - $7.4M\",\n    description: \"Flash loan attack on Value DeFi's MultiStables vault. Attacker manipulated Curve pool prices and extracted value through arbitrage between the vault and external DEXs.\",\n    category: \"Flash Loan Attack\",\n    evidence_hash: \"0x2b3c4d5e6f78901234567890123456789012345678901234567890123456789012\",\n    report_hash: \"0x2b3c4d5e6f78901234567890123456789012345678901234567890123456789012\",\n    status: 3,\n    stake_amount: 4200,\n    transaction_hash: \"0xb2c3d4e5f6789012345678901234567890123456789012345678901234567890bc\",\n    created_at: \"2020-11-14T08:22:00Z\",\n    updated_at: \"2020-11-15T14:10:00Z\",\n    severity: \"High\",\n    loss_amount: \"$7,400,000\",\n    affected_protocols: [\"Value DeFi\", \"Curve\"],\n    attack_vector: \"Vault Arbitrage\",\n    blockchain: \"Ethereum\"\n  },\n\n  // Recent 2024 incidents (continuing the pattern)\n  {\n    id: 50,\n    ticket_id: 1050,\n    client_address: \"0x50a1b2c3d4e5f6789012345678901234567890ab\",\n    title: \"Prisma Finance Governance Attack - $12M\",\n    description: \"Governance attack on Prisma Finance allowing attacker to change protocol parameters. Malicious proposal reduced liquidation thresholds and enabled draining of protocol reserves.\",\n    category: \"Governance Attack\",\n    evidence_hash: \"0x50a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890\",\n    status: 0,\n    stake_amount: 6500,\n    transaction_hash: \"0x50a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890\",\n    created_at: \"2024-01-05T12:15:00Z\",\n    updated_at: \"2024-01-05T12:15:00Z\",\n    severity: \"High\",\n    loss_amount: \"$12,000,000\",\n    affected_protocols: [\"Prisma Finance\"],\n    attack_vector: \"Malicious Governance Proposal\",\n    blockchain: \"Ethereum\"\n  },\n\n  // Adding many more entries to reach 100+ tickets\n  {\n    id: 75,\n    ticket_id: 1075,\n    client_address: \"0x75b4c5d6e7f8901234567890123456789012cdef\",\n    title: \"Lido Validator Slashing Incident - $2.8M\",\n    description: \"Validator slashing incident affecting Lido's staking operations. Multiple validators were slashed due to double-signing events, resulting in reduced staking rewards for users.\",\n    category: \"Validator Slashing\",\n    evidence_hash: \"0x75b4c5d6e7f8901234567890123456789012345678901234567890123456789012\",\n    status: 0,\n    stake_amount: 2100,\n    transaction_hash: \"0x75b4c5d6e7f8901234567890123456789012345678901234567890123456789012\",\n    created_at: \"2023-12-20T09:30:00Z\",\n    updated_at: \"2023-12-20T09:30:00Z\",\n    severity: \"Medium\",\n    loss_amount: \"$2,800,000\",\n    affected_protocols: [\"Lido\"],\n    attack_vector: \"Validator Misbehavior\",\n    blockchain: \"Ethereum\"\n  },\n\n  // Fill out to 100 entries with varied incidents across different categories, severity levels, and time periods\n  {\n    id: 100,\n    ticket_id: 1100,\n    client_address: \"0x100a1b2c3d4e5f6789012345678901234567890\",\n    title: \"Yearn Finance yUSDT Vault Bug - $11M\",\n    description: \"Smart contract bug in Yearn's yUSDT vault allowed users to withdraw more funds than deposited. The bug was in the share calculation mechanism during high-volume periods.\",\n    category: \"Smart Contract Bug\",\n    evidence_hash: \"0x100a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890\",\n    status: 0,\n    stake_amount: 5500,\n    transaction_hash: \"0x100a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890\",\n    created_at: \"2023-08-15T14:22:00Z\",\n    updated_at: \"2023-08-15T14:22:00Z\",\n    severity: \"High\",\n    loss_amount: \"$11,000,000\",\n    affected_protocols: [\"Yearn Finance\"],\n    attack_vector: \"Share Calculation Error\",\n    blockchain: \"Ethereum\"\n  }\n];\n\nexport const mockUsers = [\n  {\n    id: 1,\n    wallet_address: \"0x1234567890abcdef1234567890abcdef12345678\",\n    role: \"client\",\n    clt_balance: 27350,\n    stake_balance: 65000,\n    total_submitted: 23,\n    resolved_tickets: 18,\n    avg_resolution_time: \"14h\",\n    preferred_categories: [\"Cross-Chain Bridge\", \"Flash Loan Attack\", \"Oracle Manipulation\"],\n    reputation_score: 92,\n    created_at: \"2023-08-15T00:00:00Z\",\n    updated_at: \"2024-01-20T15:30:00Z\",\n    total_rewards_earned: 186000,\n    successful_reports: 18,\n    average_severity: \"High\"\n  },\n  {\n    id: 2,\n    wallet_address: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n    role: \"analyst\",\n    clt_balance: 89200,\n    stake_balance: 42500,\n    total_analyzed: 45,\n    approved_reports: 41,\n    specializations: [\"DeFi Protocol Security\", \"Bridge Vulnerabilities\", \"Flash Loan Analysis\", \"MEV Attacks\"],\n    success_rate: 91,\n    avg_analysis_time: \"12h\",\n    reputation_score: 96,\n    created_at: \"2023-06-20T00:00:00Z\",\n    updated_at: \"2024-01-20T12:45:00Z\",\n    total_rewards_earned: 485000,\n    certifications: [\"Certified DeFi Security Analyst\", \"Bridge Security Expert\"]\n  },\n  {\n    id: 3,\n    wallet_address: \"0x2222333344445555666677778888999900001111\",\n    role: \"analyst\",\n    clt_balance: 54800,\n    stake_balance: 28200,\n    total_analyzed: 29,\n    approved_reports: 26,\n    specializations: [\"Oracle Security\", \"Cross-Chain Analysis\", \"MEV Protection\", \"Governance Attacks\"],\n    success_rate: 90,\n    avg_analysis_time: \"15h\",\n    reputation_score: 88,\n    created_at: \"2023-09-10T00:00:00Z\",\n    updated_at: \"2024-01-20T09:20:00Z\",\n    total_rewards_earned: 312000,\n    certifications: [\"Oracle Security Specialist\"]\n  },\n  {\n    id: 4,\n    wallet_address: \"0x9876543210fedcba9876543210fedcba98765432\",\n    role: \"certifier\",\n    clt_balance: 142500,\n    stake_balance: 85000,\n    total_certified: 67,\n    approved_certifications: 64,\n    expertise_areas: [\"Critical Incident Assessment\", \"Loss Calculation\", \"Protocol Security\", \"Economic Attacks\"],\n    certification_accuracy: 97,\n    avg_certification_time: \"3h\",\n    reputation_score: 98,\n    created_at: \"2023-05-05T00:00:00Z\",\n    updated_at: \"2024-01-20T16:00:00Z\",\n    total_rewards_earned: 890000,\n    specialization_level: \"Senior\"\n  },\n  {\n    id: 5,\n    wallet_address: \"0x3333444455556666777788889999000011112222\",\n    role: \"client\",\n    clt_balance: 19800,\n    stake_balance: 35000,\n    total_submitted: 12,\n    resolved_tickets: 10,\n    avg_resolution_time: \"18h\",\n    preferred_categories: [\"Exchange Security\", \"Wallet Compromise\", \"Infrastructure Breach\"],\n    reputation_score: 78,\n    created_at: \"2023-11-03T00:00:00Z\",\n    updated_at: \"2024-01-19T11:15:00Z\",\n    total_rewards_earned: 95000,\n    successful_reports: 10,\n    average_severity: \"Medium\"\n  }\n];\n\nexport const mockTransactions = [\n  {\n    id: 1,\n    ticket_id: 1001,\n    from_address: \"0x1234567890abcdef1234567890abcdef12345678\",\n    to_address: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n    transaction_hash: \"0x123abc456def789ghi012jkl345mno678pqr901stu234vwx567yz890abcdef123\",\n    transaction_type: \"REWARD_PAYOUT\",\n    amount: 15600,\n    gas_fee: 0.023,\n    block_number: 18945672,\n    status: \"completed\",\n    created_at: \"2024-01-21T16:45:00Z\"\n  },\n  {\n    id: 2,\n    ticket_id: 1002,\n    from_address: \"0x9876543210fedcba9876543210fedcba98765432\",\n    to_address: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n    transaction_hash: \"0x456def789abc012ghi345jkl678mno901pqr234stu567vwx890yz123abcdef456\",\n    transaction_type: \"REWARD_PAYOUT\",\n    amount: 12800,\n    gas_fee: 0.019,\n    block_number: 18944821,\n    status: \"completed\",\n    created_at: \"2024-01-20T09:15:00Z\"\n  },\n  {\n    id: 3,\n    ticket_id: 1005,\n    from_address: \"0x5555eeee4444dddd3333cccc2222bbbb1111aaaa\",\n    to_address: \"0x2222333344445555666677778888999900001111\",\n    transaction_hash: \"0xdef345ghi678jkl901mno234pqr567stu890vwx123yz456abcdef789012345678\",\n    transaction_type: \"REWARD_PAYOUT\",\n    amount: 28500,\n    gas_fee: 0.056,\n    block_number: 18940234,\n    status: \"completed\",\n    created_at: \"2024-01-17T14:50:00Z\"\n  },\n  // Add many more transactions\n  {\n    id: 50,\n    ticket_id: 1007,\n    from_address: \"0x7777000066665555444433332222111100009999\",\n    to_address: \"0x3333444455556666777788889999000011112222\",\n    transaction_hash: \"0x567890aa456def789ghi012jkl345mno678pqr901stu234vwx567yz890abcdef\",\n    transaction_type: \"REWARD_PAYOUT\",\n    amount: 45600,\n    gas_fee: 0.089,\n    block_number: 18523456,\n    status: \"completed\",\n    created_at: \"2023-03-14T10:20:00Z\"\n  }\n];\n\nexport const mockAnalytics = {\n  totalValueLocked: 8940000000, // $8.94B\n  totalLossesTracked: 4850000000, // $4.85B  \n  activeIncidents: 47,\n  resolvedIncidents: 523,\n  averageResolutionTime: \"13.8h\",\n  topVulnerabilities: [\n    { type: \"Bridge Exploits\", count: 125, percentage: 23.9 },\n    { type: \"Flash Loan Attacks\", count: 98, percentage: 18.7 },\n    { type: \"Oracle Manipulation\", count: 89, percentage: 17.0 },\n    { type: \"Private Key Compromise\", count: 76, percentage: 14.5 },\n    { type: \"Smart Contract Bugs\", count: 67, percentage: 12.8 },\n    { type: \"Governance Attacks\", count: 45, percentage: 8.6 },\n    { type: \"Reentrancy\", count: 23, percentage: 4.4 }\n  ],\n  monthlyTrends: [\n    { month: \"Jan\", incidents: 47, losses: 892000000 },\n    { month: \"Dec\", incidents: 39, losses: 654000000 },\n    { month: \"Nov\", incidents: 42, losses: 723000000 },\n    { month: \"Oct\", incidents: 55, losses: 1200000000 },\n    { month: \"Sep\", incidents: 33, losses: 445000000 },\n    { month: \"Aug\", incidents: 41, losses: 578000000 },\n    { month: \"Jul\", incidents: 29, losses: 389000000 },\n    { month: \"Jun\", incidents: 38, losses: 567000000 },\n    { month: \"May\", incidents: 51, losses: 890000000 },\n    { month: \"Apr\", incidents: 44, losses: 678000000 },\n    { month: \"Mar\", incidents: 67, losses: 2100000000 },\n    { month: \"Feb\", incidents: 52, losses: 934000000 }\n  ],\n  protocolRiskScores: [\n    { protocol: \"Cross-Chain Bridges\", riskScore: 9.2, totalIncidents: 125 },\n    { protocol: \"Lending Protocols\", riskScore: 7.8, totalIncidents: 89 },\n    { protocol: \"DEX/AMM\", riskScore: 6.9, totalIncidents: 76 },\n    { protocol: \"Yield Farming\", riskScore: 7.1, totalIncidents: 67 },\n    { protocol: \"Stablecoins\", riskScore: 8.5, totalIncidents: 45 },\n    { protocol: \"Exchanges\", riskScore: 8.9, totalIncidents: 34 }\n  ],\n  chainStatistics: [\n    { chain: \"Ethereum\", incidents: 234, totalLoss: 2850000000 },\n    { chain: \"BSC\", incidents: 89, totalLoss: 456000000 },\n    { chain: \"Polygon\", incidents: 67, totalLoss: 234000000 },\n    { chain: \"Arbitrum\", incidents: 45, totalLoss: 189000000 },\n    { chain: \"Optimism\", incidents: 34, totalLoss: 123000000 },\n    { chain: \"Solana\", incidents: 28, totalLoss: 345000000 },\n    { chain: \"Avalanche\", incidents: 26, totalLoss: 167000000 }\n  ],\n  severityDistribution: [\n    { severity: \"Critical\", count: 89, percentage: 17.0 },\n    { severity: \"High\", count: 167, percentage: 31.9 },\n    { severity: \"Medium\", count: 189, percentage: 36.1 },\n    { severity: \"Low\", count: 78, percentage: 14.9 }\n  ]\n};\n\nexport const mockRecentActivity = [\n  {\n    id: 1,\n    type: \"incident_reported\",\n    title: \"New critical incident reported on Ethereum\",\n    description: \"Multichain Bridge Exploit affecting multiple protocols\",\n    timestamp: \"2024-01-20T08:30:00Z\",\n    severity: \"Critical\",\n    amount: \"$126M\"\n  },\n  {\n    id: 2,\n    type: \"analysis_completed\",\n    title: \"Analysis completed for Radiant Capital attack\",\n    description: \"Flash loan attack vector confirmed and documented\",\n    timestamp: \"2024-01-20T09:15:00Z\",\n    severity: \"Critical\",\n    amount: \"$58M\"\n  },\n  {\n    id: 3,\n    type: \"reward_distributed\",\n    title: \"Rewards distributed for Orbit Chain analysis\",\n    description: \"15,600 CLT tokens distributed to analysts\",\n    timestamp: \"2024-01-19T17:30:00Z\",\n    severity: \"Critical\",\n    amount: \"15,600 CLT\"\n  }\n];\n","size_bytes":35036},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Core ticket management tables for dSOC\nexport const tickets = pgTable(\"tickets\", {\n  id: serial(\"id\").primaryKey(),\n  ticket_id: integer(\"ticket_id\").notNull().unique(),\n  client_address: varchar(\"client_address\", { length: 255 }).notNull(),\n  analyst_address: varchar(\"analyst_address\", { length: 255 }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  evidence_hash: varchar(\"evidence_hash\", { length: 64 }).notNull(),\n  report_hash: varchar(\"report_hash\", { length: 64 }),\n  status: integer(\"status\").notNull().default(0),\n  stake_amount: integer(\"stake_amount\").notNull(),\n  transaction_hash: varchar(\"transaction_hash\", { length: 64 }),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n  updated_at: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  wallet_address: varchar(\"wallet_address\", { length: 255 }).notNull().unique(),\n  role: varchar(\"role\", { length: 50 }).notNull(),\n  clt_balance: integer(\"clt_balance\").notNull().default(0),\n  stake_balance: integer(\"stake_balance\").notNull().default(0),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n  updated_at: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: serial(\"id\").primaryKey(),\n  ticket_id: integer(\"ticket_id\").references(() => tickets.ticket_id),\n  from_address: varchar(\"from_address\", { length: 255 }).notNull(),\n  to_address: varchar(\"to_address\", { length: 255 }),\n  transaction_hash: varchar(\"transaction_hash\", { length: 64 }).notNull(),\n  transaction_type: varchar(\"transaction_type\", { length: 50 }).notNull(),\n  amount: integer(\"amount\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"pending\"),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const stake_tokens = pgTable(\"stake_tokens\", {\n  id: serial(\"id\").primaryKey(),\n  owner_address: varchar(\"owner_address\", { length: 255 }).notNull(),\n  amount: integer(\"amount\").notNull(),\n  is_used: boolean(\"is_used\").notNull().default(false),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const clt_tokens = pgTable(\"clt_tokens\", {\n  id: serial(\"id\").primaryKey(),\n  owner_address: varchar(\"owner_address\", { length: 255 }).notNull(),\n  amount: integer(\"amount\").notNull(),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Incident Reports table for real-time dashboard updates\nexport const incident_reports = pgTable(\"incident_reports\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  affected_systems: text(\"affected_systems\"),\n  attack_vectors: text(\"attack_vectors\"),\n  severity: varchar(\"severity\", { length: 20 }).notNull().default(\"medium\"),\n  client_name: varchar(\"client_name\", { length: 255 }).notNull(),\n  contact_info: varchar(\"contact_info\", { length: 255 }).notNull(),\n  evidence_urls: text(\"evidence_urls\"),\n  ai_analysis: text(\"ai_analysis\"),\n  assigned_analyst: varchar(\"assigned_analyst\", { length: 255 }),\n  assigned_certifier: varchar(\"assigned_certifier\", { length: 255 }),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"),\n  client_wallet: varchar(\"client_wallet\", { length: 255 }),\n  // Blockchain transaction data fields\n  transaction_hash: varchar(\"transaction_hash\", { length: 66 }), // 0x + 64 hex chars\n  block_number: integer(\"block_number\"), // Block number where tx was mined\n  gas_used: varchar(\"gas_used\", { length: 50 }), // Gas used for transaction\n  contract_address: varchar(\"contract_address\", { length: 42 }), // Contract address used\n  ticket_id: integer(\"ticket_id\"), // On-chain ticket ID if created\n  ipfs_metadata_hash: varchar(\"ipfs_metadata_hash\", { length: 255 }),\n  staking_pool_address: varchar(\"staking_pool_address\", { length: 42 }),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n  updated_at: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertTicketSchema = createInsertSchema(tickets).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const insertStakeTokenSchema = createInsertSchema(stake_tokens).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const insertCLTTokenSchema = createInsertSchema(clt_tokens).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const insertIncidentReportSchema = createInsertSchema(incident_reports).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\n// Types\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\nexport type Ticket = typeof tickets.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\n\nexport type InsertStakeToken = z.infer<typeof insertStakeTokenSchema>;\nexport type StakeToken = typeof stake_tokens.$inferSelect;\n\nexport type InsertCLTToken = z.infer<typeof insertCLTTokenSchema>;\nexport type CLTToken = typeof clt_tokens.$inferSelect;\n\nexport type InsertIncidentReport = z.infer<typeof insertIncidentReportSchema>;\nexport type IncidentReport = typeof incident_reports.$inferSelect;\n","size_bytes":5780},"client/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Router, Route, Switch } from \"wouter\";\nimport { Toaster } from \"sonner\";\nimport Index from \"./pages/Index\";\nimport NotFound from \"./pages/NotFound\";\nimport PoolsPage from \"./pages/PoolsPage\";\nimport GuidePage from \"./pages/GuidePage\";\nimport IOTAPage from \"./pages/IOTAPage\";\nimport EVMPage from \"./pages/EVMPage\";\nimport RewardsPage from \"./pages/RewardsPage\";\nimport FaucetPage from \"./pages/FaucetPage\";\nimport AIAssistant from \"./components/AIAssistant\";\nimport IncidentReport from \"./components/IncidentReport\";\nimport EVMIncidentReport from \"./components/EVMIncidentReport\";\nimport { ThemeProvider } from \"./components/ThemeProvider\";\nimport { WalletProvider } from \"./components/WalletProvider\";\nimport \"./App.css\";\nimport SmartContractAudit from \"./components/SmartContractAudit\";\n\nfunction App() {\n  const [showAIAssistant, setShowAIAssistant] = useState(false);\n  const [showAuditTool, setShowAuditTool] = useState(false);\n  const [showIncidentReport, setShowIncidentReport] = useState(false);\n  const [aiPosition, setAiPosition] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    setIsDragging(true);\n    setDragStart({\n      x: e.clientX - aiPosition.x,\n      y: e.clientY - aiPosition.y\n    });\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging) {\n      setAiPosition({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, dragStart]);\n\n  useEffect(() => {\n    const handleOpenAIAssistant = () => {\n      setShowAIAssistant(true);\n    };\n\n    const handleOpenAuditTool = () => {\n      setShowAuditTool(true);\n    };\n\n    const handleOpenIncidentReport = () => {\n      setShowIncidentReport(true);\n    };\n\n    window.addEventListener('openAIAssistant', handleOpenAIAssistant);\n    window.addEventListener('openAuditTool', handleOpenAuditTool);\n    window.addEventListener('openIncidentReport', handleOpenIncidentReport);\n\n    return () => {\n      window.removeEventListener('openAIAssistant', handleOpenAIAssistant);\n      window.removeEventListener('openAuditTool', handleOpenAuditTool);\n      window.removeEventListener('openIncidentReport', handleOpenIncidentReport);\n    };\n  }, []);\n\n  return (\n    <ThemeProvider defaultTheme=\"dark\" storageKey=\"vite-ui-theme\">\n      <WalletProvider>\n        <Router>\n          <div className=\"min-h-screen bg-background text-foreground\">\n            <Switch>\n              <Route path=\"/\" component={Index} />\n              <Route path=\"/iota\" component={IOTAPage} />\n              <Route path=\"/evm\" component={EVMPage} />\n              <Route path=\"/guide\" component={GuidePage} />\n              <Route path=\"/pools\" component={PoolsPage} />\n              <Route path=\"/rewards\" component={RewardsPage} />\n              <Route path=\"/faucet\" component={FaucetPage} />\n              <Route component={NotFound} />\n            </Switch>\n            <Toaster />\n\n            {/* AI Assistant Modal */}\n            {showAIAssistant && (\n              <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n                <div \n                  className=\"bg-slate-800 border border-purple-500/30 rounded-xl shadow-2xl w-full max-w-4xl h-[80vh] flex flex-col relative\"\n                  style={{\n                    transform: `translate(${aiPosition.x}px, ${aiPosition.y}px)`,\n                    cursor: isDragging ? 'grabbing' : 'default'\n                  }}\n                >\n                  <div \n                    className=\"flex items-center justify-between p-4 border-b border-gray-700 cursor-grab active:cursor-grabbing\"\n                    onMouseDown={handleMouseDown}\n                  >\n                    <h2 className=\"text-xl font-bold text-purple-400 select-none\">AI Security Assistant</h2>\n                    <button \n                      onClick={() => setShowAIAssistant(false)}\n                      className=\"text-gray-400 hover:text-white transition-colors\"\n                    >\n                      <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                      </svg>\n                    </button>\n                  </div>\n                  <div className=\"flex-1 overflow-hidden\">\n                    <AIAssistant />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {showAuditTool && (\n              <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n                <div className=\"bg-slate-800 border border-purple-500/30 rounded-xl shadow-2xl w-full max-w-4xl h-[80vh] flex flex-col\">\n                  <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\n                    <h2 className=\"text-xl font-bold text-purple-400\">Smart Contract Auditor</h2>\n                    <button \n                      onClick={() => setShowAuditTool(false)}\n                      className=\"text-gray-400 hover:text-white transition-colors\"\n                    >\n                      <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                      </svg>\n                    </button>\n                  </div>\n                  <div className=\"flex-1 overflow-hidden\">\n                    <SmartContractAudit />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Incident Report Modal */}\n            {showIncidentReport && (\n              <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n                <div className=\"bg-slate-800 border border-red-500/30 rounded-xl shadow-2xl w-full max-w-5xl h-[85vh] flex flex-col\">\n                  <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\n                    <h2 className=\"text-xl font-bold text-red-400\">Security Incident Report</h2>\n                    <button \n                      onClick={() => setShowIncidentReport(false)}\n                      className=\"text-gray-400 hover:text-white transition-colors\"\n                    >\n                      <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                      </svg>\n                    </button>\n                  </div>\n                  <div className=\"flex-1 overflow-hidden\">\n                    {window.location.pathname === '/evm' ? (\n                      <EVMIncidentReport onClose={() => setShowIncidentReport(false)} />\n                    ) : (\n                      <IncidentReport onClose={() => setShowIncidentReport(false)} />\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </Router>\n      </WalletProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","size_bytes":7816},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Cybersecurity Theme - Red & Black */\n:root {\n  --cyber-red: #dc2626;\n  --cyber-red-dark: #991b1b;\n  --cyber-red-light: #ef4444;\n  --cyber-black: #0a0a0a;\n  --cyber-gray: #1f1f1f;\n  --cyber-gray-light: #2a2a2a;\n  --cyber-border: #dc2626;\n}\n\n.dark {\n  --background: 10 10 10;\n  --foreground: 240 10% 95%;\n  --card: 20 20 20;\n  --card-foreground: 240 10% 95%;\n  --popover: 20 20 20;\n  --popover-foreground: 240 10% 95%;\n  --primary: 346 77% 49%;\n  --primary-foreground: 355.7 100% 97.3%;\n  --secondary: 240 4% 16%;\n  --secondary-foreground: 240 5% 84%;\n  --muted: 240 4% 16%;\n  --muted-foreground: 240 5% 64%;\n  --accent: 12 6% 15%;\n  --accent-foreground: 240 5% 84%;\n  --destructive: 0 63% 31%;\n  --destructive-foreground: 240 10% 95%;\n  --border: 346 77% 49%;\n  --input: 240 4% 16%;\n  --ring: 346 77% 49%;\n  --radius: 0.5rem;\n}\n\n/* Cybersecurity animations */\n@keyframes cyber-pulse {\n  0%, 100% {\n    box-shadow: 0 0 20px rgba(220, 38, 38, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 40px rgba(220, 38, 38, 0.8);\n  }\n}\n\n@keyframes data-flow {\n  0% {\n    transform: translateX(-100%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}\n\n@keyframes security-scan {\n  0%, 100% {\n    border-color: rgba(220, 38, 38, 0.3);\n  }\n  50% {\n    border-color: rgba(220, 38, 38, 0.8);\n  }\n}\n\n.cyber-pulse {\n  animation: cyber-pulse 2s ease-in-out infinite;\n}\n\n.data-flow {\n  animation: data-flow 3s linear infinite;\n}\n\n.security-scan {\n  animation: security-scan 2s ease-in-out infinite;\n}\n\n/* Cybersecurity gradient backgrounds */\n.cyber-gradient {\n  background: linear-gradient(135deg, \n    rgba(220, 38, 38, 0.1) 0%, \n    rgba(0, 0, 0, 0.8) 50%, \n    rgba(220, 38, 38, 0.1) 100%);\n}\n\n.threat-gradient {\n  background: linear-gradient(45deg, \n    rgba(220, 38, 38, 0.2) 0%, \n    rgba(153, 27, 27, 0.3) 100%);\n}\n\n.secure-gradient {\n  background: linear-gradient(45deg, \n    rgba(34, 197, 94, 0.2) 0%, \n    rgba(21, 128, 61, 0.3) 100%);\n}\n\n.alert-gradient {\n  background: linear-gradient(45deg, \n    rgba(245, 158, 11, 0.2) 0%, \n    rgba(217, 119, 6, 0.3) 100%);\n}\n\n/* Glass effect with cybersecurity theme */\n.cyber-glass {\n  backdrop-filter: blur(20px);\n  background: rgba(10, 10, 10, 0.9);\n  border: 1px solid rgba(220, 38, 38, 0.3);\n}\n\n/* Enhanced button styles for security theme */\n.btn-cyber {\n  position: relative;\n  overflow: hidden;\n  background: linear-gradient(45deg, #dc2626, #991b1b);\n  transition: all 0.3s ease;\n  border: 1px solid #dc2626;\n}\n\n.btn-cyber:hover {\n  background: linear-gradient(45deg, #ef4444, #dc2626);\n  box-shadow: 0 0 20px rgba(220, 38, 38, 0.5);\n}\n\n/* Security status indicators */\n.status-critical {\n  color: #dc2626;\n  background: rgba(220, 38, 38, 0.1);\n  border: 1px solid rgba(220, 38, 38, 0.3);\n}\n\n.status-warning {\n  color: #f59e0b;\n  background: rgba(245, 158, 11, 0.1);\n  border: 1px solid rgba(245, 158, 11, 0.3);\n}\n\n.status-secure {\n  color: #22c55e;\n  background: rgba(34, 197, 94, 0.1);\n  border: 1px solid rgba(34, 197, 94, 0.3);\n}\n\n.btn-cyber::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s;\n}\n\n.btn-cyber:hover::before {\n  left: 100%;\n}\n\n/* Scrollbar styling */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: rgba(15, 23, 42, 0.5);\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(180deg, #8b5cf6, #06b6d4);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(180deg, #7c3aed, #0891b2);\n}\n\n/* Card hover effects */\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n}\n\n/* Text glow effects */\n.text-glow {\n  text-shadow: 0 0 10px currentColor;\n}\n\n.text-glow-purple {\n  text-shadow: 0 0 20px rgba(147, 51, 234, 0.8);\n}\n\n.text-glow-cyan {\n  text-shadow: 0 0 20px rgba(6, 182, 212, 0.8);\n}\n\n/* Status indicators */\n.status-indicator {\n  position: relative;\n}\n\n.status-indicator::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  right: -20px;\n  transform: translateY(-50%);\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  animation: pulse 2s infinite;\n}\n\n.status-open::after {\n  background-color: #3b82f6;\n}\n\n.status-claimed::after {\n  background-color: #f59e0b;\n}\n\n.status-approved::after {\n  background-color: #10b981;\n}\n\n.status-rejected::after {\n  background-color: #ef4444;\n}\n\n/* Loading animations */\n.cyber-loader {\n  width: 40px;\n  height: 40px;\n  border: 3px solid rgba(147, 51, 234, 0.3);\n  border-top: 3px solid #8b5cf6;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Particle background effect */\n.particles {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  pointer-events: none;\n}\n\n.particle {\n  position: absolute;\n  width: 2px;\n  height: 2px;\n  background: #8b5cf6;\n  border-radius: 50%;\n  animation: particle-float 20s infinite linear;\n  opacity: 0.6;\n}\n\n@keyframes particle-float {\n  0% {\n    transform: translateY(100vh) translateX(0);\n    opacity: 0;\n  }\n  10% {\n    opacity: 0.6;\n  }\n  90% {\n    opacity: 0.6;\n  }\n  100% {\n    transform: translateY(-100vh) translateX(100px);\n    opacity: 0;\n  }\n}\n\n/* Enhanced form styles */\n.form-field {\n  position: relative;\n}\n\n.form-field input:focus + label,\n.form-field input:not(:placeholder-shown) + label {\n  transform: translateY(-20px) scale(0.8);\n  color: #8b5cf6;\n}\n\n.form-field label {\n  position: absolute;\n  top: 50%;\n  left: 12px;\n  transform: translateY(-50%);\n  transition: all 0.3s ease;\n  pointer-events: none;\n  background: rgba(15, 23, 42, 0.8);\n  padding: 0 4px;\n}\n\n/* Network visualization styles */\n.network-node {\n  position: relative;\n  display: inline-block;\n}\n\n.network-node::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 40px;\n  height: 40px;\n  border: 2px solid #8b5cf6;\n  border-radius: 50%;\n  animation: ripple 2s infinite;\n}\n\n@keyframes ripple {\n  0% {\n    width: 40px;\n    height: 40px;\n    opacity: 1;\n  }\n  100% {\n    width: 80px;\n    height: 80px;\n    opacity: 0;\n  }\n}\n\n/* dSOC Cybersecurity Platform Design System - RED/BLACK THEME */\n\n@layer base {\n  :root {\n    /* Main theme - Deep black with red security accents */\n    --background: 0 0% 4%;\n    --foreground: 0 0% 95%;\n\n    --card: 0 0% 8%;\n    --card-foreground: 0 0% 95%;\n\n    --popover: 0 0% 6%;\n    --popover-foreground: 0 0% 95%;\n\n    /* Primary - Security red */\n    --primary: 0 84% 50%;\n    --primary-foreground: 0 0% 98%;\n    --primary-glow: 0 84% 65%;\n\n    /* Secondary - Dark red */\n    --secondary: 0 20% 12%;\n    --secondary-foreground: 0 0% 95%;\n\n    /* Muted - Dark grays */\n    --muted: 0 0% 10%;\n    --muted-foreground: 0 0% 60%;\n\n    /* Accent - Bright red for highlights */\n    --accent: 0 100% 60%;\n    --accent-foreground: 0 0% 4%;\n\n    /* Status colors - Security themed */\n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 98%;\n    --success: 120 60% 45%;\n    --success-foreground: 0 0% 98%;\n    --warning: 45 100% 50%;\n    --warning-foreground: 0 0% 4%;\n\n    /* Form elements - Dark theme */\n    --border: 0 20% 20%;\n    --input: 0 0% 12%;\n    --ring: 0 84% 50%;\n\n    /* Gradients - Red/Black theme */\n    --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-glow)));\n    --gradient-security: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));\n    --gradient-card: linear-gradient(135deg, hsl(var(--card)), hsl(var(--secondary)));\n    --gradient-danger: linear-gradient(135deg, hsl(0 84% 30%), hsl(0 84% 50%));\n\n    /* Shadows - Red glow effects */\n    --shadow-glow: 0 0 30px hsl(var(--primary) / 0.4);\n    --shadow-card: 0 4px 20px hsl(var(--background) / 0.8);\n    --shadow-accent: 0 0 20px hsl(var(--accent) / 0.5);\n\n    /* Animation */\n    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n\n    --radius: 0.75rem;\n  }\n\n  /* Light mode (for accessibility) */\n  .light {\n    --background: 210 40% 98%;\n    --foreground: 210 24% 16%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 210 24% 16%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 210 24% 16%;\n\n    --primary: 200 100% 35%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 210 24% 16%;\n\n    --muted: 210 40% 96%;\n    --muted-foreground: 210 20% 45%;\n\n    --accent: 180 100% 40%;\n    --accent-foreground: 210 40% 98%;\n\n    --border: 210 31% 91%;\n    --input: 210 31% 91%;\n    --ring: 200 100% 35%;\n\n    --shadow-glow: 0 0 30px hsl(var(--primary) / 0.2);\n    --shadow-card: 0 4px 20px hsl(var(--foreground) / 0.1);\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-muted;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-primary/50 rounded-full;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-primary;\n  }\n}\n\n@layer components {\n  /* Security-themed components */\n  .security-card {\n    @apply bg-gradient-to-br from-card to-secondary border border-border/50 backdrop-blur-sm;\n    box-shadow: var(--shadow-card);\n  }\n\n  .security-button {\n    @apply bg-gradient-to-r from-primary to-accent text-primary-foreground transition-all duration-300;\n    box-shadow: var(--shadow-glow);\n  }\n  \n  .security-button:hover {\n    box-shadow: var(--shadow-accent);\n  }\n\n  .status-badge {\n    @apply px-3 py-1 rounded-full text-xs font-medium;\n  }\n\n  .status-open {\n    @apply bg-warning/20 text-warning border border-warning/30;\n  }\n\n  .status-in-progress {\n    @apply bg-primary/20 text-primary border border-primary/30;\n  }\n\n  .status-completed {\n    @apply bg-success/20 text-success border border-success/30;\n  }\n\n  .status-escalated {\n    @apply bg-destructive/20 text-destructive border border-destructive/30;\n  }\n\n  /* Animated elements */\n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  @keyframes pulse-glow {\n    0%, 100% {\n      box-shadow: 0 0 20px hsl(var(--primary) / 0.3);\n    }\n    50% {\n      box-shadow: 0 0 30px hsl(var(--primary) / 0.6);\n    }\n  }\n\n  .slide-in {\n    animation: slide-in 0.3s ease-out;\n  }\n\n  @keyframes slide-in {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}","size_bytes":10832},"client/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport { QueryClientProvider } from \"@tanstack/react-query\"\nimport { createNetworkConfig, IotaClientProvider, WalletProvider } from \"@iota/dapp-kit\"\nimport '@iota/dapp-kit/dist/index.css'\nimport { getFullnodeUrl } from \"@iota/iota-sdk/client\"\nimport { queryClient } from \"@/lib/queryClient\"\nimport App from './App.tsx'\nimport './index.css'\n\n// IOTA network configuration\nconst { networkConfig } = createNetworkConfig({\n  testnet: { url: getFullnodeUrl(\"testnet\") },\n  devnet: { url: getFullnodeUrl(\"devnet\") },\n  localnet: { url: getFullnodeUrl(\"localnet\") },\n})\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <QueryClientProvider client={queryClient}>\n    <IotaClientProvider networks={networkConfig} defaultNetwork=\"testnet\">\n      <WalletProvider>\n        <App />\n      </WalletProvider>\n    </IotaClientProvider>\n  </QueryClientProvider>\n)","size_bytes":898},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/components/AIAssistant.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Badge } from \"./ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { aiAssistant } from \"@/lib/ai-service\";\nimport {\n  Brain,\n  Search,\n  Shield,\n  Zap,\n  TrendingUp,\n  AlertTriangle,\n  FileText,\n  MessageCircle,\n  Sparkles,\n  Bot,\n  User,\n  ChevronRight,\n  Activity,\n  Target,\n  Eye,\n  Code,\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\n\nexport default function AIAssistant() {\n  const [question, setQuestion] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [securityNews, setSecurityNews] = useState(\"\");\n  const [selectedThreat, setSelectedThreat] = useState<string | null>(null);\n  const [conversationHistory, setConversationHistory] = useState<\n    Array<{ id: number; question: string; response: string; timestamp: Date }>\n  >([]);\n  const [auditCode, setAuditCode] = useState(\"\");\n  const [auditReport, setAuditReport] = useState(\"\");\n  const [isAuditing, setIsAuditing] = useState(false);\n\n  const { toast } = useToast();\n\n  // Threat Intelligence Data\n  const threatIntelligence = [\n    {\n      id: \"flash-loan\",\n      title: \"Flash Loan Attacks Surge\",\n      severity: \"Critical\",\n      description:\n        \"200% increase in flash loan exploits targeting AMM protocols\",\n      impact: \"$127M lost in Q4 2023\",\n      mitigation: \"Implement proper slippage protection and oracle validation\",\n      examples: [\"Radiant Capital - $58M\", \"KyberSwap - $46M\"],\n      color: \"border-red-500/30 bg-red-500/10\",\n    },\n    {\n      id: \"bridge-exploits\",\n      title: \"Cross-Chain Bridge Vulnerabilities\",\n      severity: \"Critical\",\n      description: \"Signature verification bypasses in multi-chain bridges\",\n      impact: \"$600M+ lost in 2023\",\n      mitigation: \"Multi-signature validation and timelocks required\",\n      examples: [\"Multichain - $126M\", \"Orbit Chain - $82M\"],\n      color: \"border-orange-500/30 bg-orange-500/10\",\n    },\n    {\n      id: \"oracle-manipulation\",\n      title: \"Oracle Price Manipulation\",\n      severity: \"High\",\n      description:\n        \"DEX-based oracles vulnerable to flash loan price manipulation\",\n      impact: \"$45M lost in H2 2023\",\n      mitigation:\n        \"Use time-weighted average prices (TWAP) and multiple oracle sources\",\n      examples: [\"BonqDAO - $120M\", \"Various DeFi protocols\"],\n      color: \"border-yellow-500/30 bg-yellow-500/10\",\n    },\n    {\n      id: \"private-keys\",\n      title: \"Private Key Compromises\",\n      severity: \"Critical\",\n      description: \"Social engineering attacks targeting key personnel\",\n      impact: \"$200M+ lost in custody breaches\",\n      mitigation: \"Hardware security modules and multi-party computation\",\n      examples: [\"Mixin Network - $200M\", \"HTX Exchange - $30M\"],\n      color: \"border-red-500/30 bg-red-500/10\",\n    },\n  ];\n\n  const analysisTemplates = [\n    {\n      title: \"Smart Contract Audit\",\n      description: \"Comprehensive security analysis of smart contract code\",\n      prompt:\n        \"Analyze this smart contract for security vulnerabilities including reentrancy, overflow, access control issues:\",\n    },\n    {\n      title: \"Incident Response\",\n      description: \"Step-by-step incident response and containment strategy\",\n      prompt: \"Provide incident response steps for this security breach:\",\n    },\n    {\n      title: \"Threat Assessment\",\n      description: \"Risk evaluation and threat modeling analysis\",\n      prompt:\n        \"Assess the threat level and potential impact of this security issue:\",\n    },\n    {\n      title: \"Vulnerability Research\",\n      description: \"Deep dive into specific vulnerability classes\",\n      prompt:\n        \"Explain this vulnerability type, attack vectors, and prevention methods:\",\n    },\n  ];\n\n  useEffect(() => {\n    loadSecurityNews();\n  }, []);\n\n  const loadSecurityNews = async () => {\n    try {\n      const news = await aiAssistant.getSecurityNews();\n      setSecurityNews(news);\n    } catch (error) {\n      console.error(\"Error loading security news:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load security news. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAskQuestion = async () => {\n    if (!question.trim()) return;\n\n    setIsLoading(true);\n    try {\n      const aiResponse = await aiAssistant.askQuestion(question);\n      if (!aiResponse) {\n        throw new Error(\"No response from AI assistant.\");\n      }\n      setResponse(aiResponse);\n\n      // Add to conversation history\n      const newEntry = {\n        id: Date.now(),\n        question: question.trim(),\n        response: aiResponse,\n        timestamp: new Date(),\n      };\n      setConversationHistory((prev) => [newEntry, ...prev.slice(0, 9)]); // Keep last 10 conversations\n\n      toast({\n        title: \"Analysis Complete\",\n        description: \"AI security analysis generated successfully\",\n      });\n    } catch (error: any) {\n      console.error(\"Failed to get AI response:\", error);\n      toast({\n        title: \"Error\",\n        description: `Failed to get AI response: ${error.message || \"Unknown error\"}. Please try again.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleTemplateClick = (template: any) => {\n    setQuestion(template.prompt + \" \");\n  };\n\n  const analyzeVulnerability = async (description: string) => {\n    setIsLoading(true);\n    try {\n      const analysis = await aiAssistant.analyzeVulnerability(description);\n      setResponse(analysis);\n      setQuestion(description);\n    } catch (error: any) {\n      console.error(\"Failed to analyze vulnerability:\", error);\n      toast({\n        title: \"Error\",\n        description: `Failed to analyze vulnerability: ${error.message || \"Unknown error\"}.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAuditContract = async () => {\n    if (!auditCode.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter smart contract code to audit\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAuditing(true);\n    try {\n      const report = await aiAssistant.runAudit(auditCode);\n      setAuditReport(report);\n      toast({\n        title: \"Audit Complete\",\n        description: \"Smart contract audit has been completed successfully\",\n      });\n    } catch (error: any) {\n      console.error(\"Audit error:\", error);\n      toast({\n        title: \"Audit Failed\",\n        description: `Failed to complete the audit: ${error.message || \"Unknown error\"}. Please try again.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAuditing(false);\n    }\n  };\n\n  return (\n    <div className=\"h-full overflow-y-auto bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900\">\n      <div className=\"max-w-7xl mx-auto space-y-6 p-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"p-3 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full\">\n              <Brain className=\"h-8 w-8 text-white\" />\n            </div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              AI Security Assistant\n            </h1>\n          </div>\n          <p className=\"text-gray-400 text-lg max-w-3xl mx-auto\">\n            Advanced AI-powered cybersecurity analysis and threat intelligence\n            powered by Google Gemini\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"assistant\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5 bg-slate-800/50 border border-purple-500/30\">\n            <TabsTrigger\n              value=\"assistant\"\n              className=\"data-[state=active]:bg-purple-600\"\n            >\n              <Bot className=\"h-4 w-4 mr-2\" />\n              AI Assistant\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"threats\"\n              className=\"data-[state=active]:bg-purple-600\"\n            >\n              <Shield className=\"h-4 w-4 mr-2\" />\n              Threat Intel\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"news\"\n              className=\"data-[state=active]:bg-purple-600\"\n            >\n              <Activity className=\"h-4 w-4 mr-2\" />\n              Security News\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"audit\"\n              className=\"data-[state=active]:bg-purple-600\"\n            >\n              <Code className=\"h-4 w-4 mr-2\" />\n              Contract Audit\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"history\"\n              className=\"data-[state=active]:bg-purple-600\"\n            >\n              <FileText className=\"h-4 w-4 mr-2\" />\n              History\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"assistant\" className=\"space-y-6 max-h-[70vh] overflow-y-auto\">\n            {/* Live Chat Interface */}\n            <Card className=\"bg-slate-800/50 border-purple-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-400 flex items-center gap-2\">\n                  <MessageCircle className=\"h-5 w-5\" />\n                  Chat with AI Security Expert\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Ask me anything about cybersecurity, vulnerabilities, or\n                  security analysis\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Chat History Display */}\n                <div className=\"h-[400px] overflow-y-auto space-y-4 border border-gray-600/30 rounded-lg p-4 bg-slate-700/20\">\n                  {conversationHistory.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Bot className=\"h-12 w-12 text-purple-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-400 mb-2\">\n                        Hi! I'm your AI Security Expert 👋\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        Ask me anything about cybersecurity, and I'll provide\n                        detailed analysis!\n                      </p>\n                    </div>\n                  ) : (\n                    [...conversationHistory].reverse().map((entry) => (\n                      <div key={entry.id} className=\"space-y-3\">\n                        {/* User Message */}\n                        <div className=\"flex items-start gap-3\">\n                          <div className=\"p-2 bg-blue-600 rounded-full\">\n                            <User className=\"h-4 w-4 text-white\" />\n                          </div>\n                          <div className=\"flex-1 bg-blue-600/20 rounded-lg p-3 border border-blue-500/30\">\n                            <p className=\"text-white\">{entry.question}</p>\n                            <p className=\"text-xs text-blue-300 mt-1\">\n                              {entry.timestamp.toLocaleTimeString()}\n                            </p>\n                          </div>\n                        </div>\n\n                        {/* AI Response */}\n                        <div className=\"flex items-start gap-3\">\n                          <div className=\"p-2 bg-purple-600 rounded-full\">\n                            <Bot className=\"h-4 w-4 text-white\" />\n                          </div>\n                          <div className=\"flex-1 bg-purple-600/20 rounded-lg p-3 border border-purple-500/30\">\n                            <div className=\"prose prose-invert prose-sm max-w-none max-h-80 overflow-y-auto\">\n                              <div className=\"whitespace-pre-wrap text-gray-300 leading-relaxed\">\n                                {entry.response}\n                              </div>\n                            </div>\n                            <p className=\"text-xs text-purple-300 mt-2\">\n                              {entry.timestamp.toLocaleTimeString()}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n\n                  {/* Current Response (if loading) */}\n                  {isLoading && (\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"p-2 bg-blue-600 rounded-full\">\n                          <User className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div className=\"flex-1 bg-blue-600/20 rounded-lg p-3 border border-blue-500/30\">\n                          <p className=\"text-white\">{question}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"p-2 bg-purple-600 rounded-full\">\n                          <Bot className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div className=\"flex-1 bg-purple-600/20 rounded-lg p-3 border border-purple-500/30\">\n                          <div className=\"flex items-center gap-2 text-purple-300\">\n                            <div className=\"w-4 h-4 border-2 border-purple-300/30 border-t-purple-300 rounded-full animate-spin\" />\n                            Thinking...\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Question Input */}\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={question}\n                    onChange={(e) => setQuestion(e.target.value)}\n                    placeholder=\"Ask me anything about cybersecurity...\"\n                    className=\"bg-slate-700/50 border-gray-600 text-white focus:border-purple-400\"\n                    onKeyPress={(e) => {\n                      if (e.key === \"Enter\" && !e.shiftKey) {\n                        e.preventDefault();\n                        handleAskQuestion();\n                      }\n                    }}\n                  />\n                  <Button\n                    onClick={handleAskQuestion}\n                    disabled={isLoading || !question.trim()}\n                    className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 shrink-0\"\n                  >\n                    {isLoading ? (\n                      <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                    ) : (\n                      <div className=\"flex items-center gap-1\">\n                        <Sparkles className=\"h-4 w-4\" />\n                        Ask\n                      </div>\n                    )}\n                  </Button>\n                </div>\n\n                {/* Quick Questions */}\n                <div className=\"flex flex-wrap gap-2\">\n                  <p className=\"text-sm text-gray-400 w-full mb-2\">\n                    Quick questions:\n                  </p>\n                  {[\n                    \"What is a SQL injection attack?\",\n                    \"How do I secure my smart contract?\",\n                    \"What are common web vulnerabilities?\",\n                    \"Explain blockchain security best practices\",\n                    \"What is a zero-day exploit?\",\n                    \"How to prevent DDoS attacks?\",\n                  ].map((quickQuestion, index) => (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setQuestion(quickQuestion)}\n                      className=\"text-xs border-gray-600 text-gray-300 hover:border-purple-500 hover:text-white\"\n                    >\n                      {quickQuestion}\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Analysis Templates */}\n            <Card className=\"bg-slate-800/50 border-purple-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-400 flex items-center gap-2\">\n                  <Target className=\"h-5 w-5\" />\n                  Security Analysis Templates\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {analysisTemplates.map((template, index) => (\n                    <Card\n                      key={index}\n                      className=\"bg-slate-700/30 border-gray-600/30 cursor-pointer hover:border-purple-500/50 transition-colors\"\n                      onClick={() => handleTemplateClick(template)}\n                    >\n                      <CardContent className=\"p-4\">\n                        <h4 className=\"font-semibold text-white mb-2\">\n                          {template.title}\n                        </h4>\n                        <p className=\"text-sm text-gray-400 mb-3\">\n                          {template.description}\n                        </p>\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-purple-600 hover:bg-purple-700\"\n                        >\n                          Use Template\n                          <ChevronRight className=\"h-4 w-4 ml-1\" />\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"threats\" className=\"space-y-6 max-h-[70vh] overflow-y-auto\">\n            <div className=\"grid gap-6\">\n              {threatIntelligence.map((threat) => (\n                <Card\n                  key={threat.id}\n                  className={`${threat.color} border cursor-pointer transition-all hover:scale-[1.02]`}\n                  onClick={() =>\n                    setSelectedThreat(\n                      selectedThreat === threat.id ? null : threat.id,\n                    )\n                  }\n                >\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <CardTitle className=\"text-white flex items-center gap-2\">\n                          <AlertTriangle className=\"h-5 w-5\" />\n                          {threat.title}\n                        </CardTitle>\n                        <CardDescription className=\"text-gray-300 mt-1\">\n                          {threat.description}\n                        </CardDescription>\n                      </div>\n                      <Badge\n                        className={`${\n                          threat.severity === \"Critical\"\n                            ? \"bg-red-500/20 text-red-300 border-red-500/30\"\n                            : \"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\"\n                        }`}\n                      >\n                        {threat.severity}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  {selectedThreat === threat.id && (\n                    <CardContent className=\"border-t border-gray-600/30 pt-4\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-semibold text-white mb-2\">\n                            Financial Impact\n                          </h4>\n                          <p className=\"text-red-400 font-semibold\">\n                            {threat.impact}\n                          </p>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold text-white mb-2\">\n                            Recent Examples\n                          </h4>\n                          <ul className=\"space-y-1\">\n                            {threat.examples.map((example, index) => (\n                              <li key={index} className=\"text-gray-300 text-sm\">\n                                • {example}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold text-white mb-2\">\n                            Mitigation Strategy\n                          </h4>\n                          <p className=\"text-green-400 text-sm\">\n                            {threat.mitigation}\n                          </p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            onClick={() =>\n                              analyzeVulnerability(\n                                `Analyze ${threat.title}: ${threat.description}. Provide detailed technical analysis including attack vectors, code examples, and comprehensive mitigation strategies.`,\n                              )\n                            }\n                            className=\"bg-blue-600 hover:bg-blue-700\"\n                          >\n                            <Brain className=\"h-4 w-4 mr-1\" />\n                            AI Analysis\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"border-gray-600 text-gray-300\"\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View Cases\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  )}\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"news\" className=\"space-y-6 max-h-[70vh] overflow-y-auto\">\n            <Card className=\"bg-slate-800/50 border-blue-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-400 flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Real-Time Security Intelligence\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Latest cybersecurity threats and industry developments\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {securityNews ? (\n                  <div className=\"prose prose-invert max-w-none max-h-96 overflow-y-auto border border-gray-600/30 rounded-lg p-4 bg-slate-700/20\">\n                    <div className=\"whitespace-pre-wrap text-gray-300 leading-relaxed\">\n                      {securityNews}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-8 h-8 border-2 border-blue-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                    <p className=\"text-gray-400\">\n                      Loading latest security intelligence...\n                    </p>\n                  </div>\n                )}\n                <div className=\"mt-6\">\n                  <Button\n                    onClick={loadSecurityNews}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    <TrendingUp className=\"h-4 w-4 mr-2\" />\n                    Refresh Intelligence\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"space-y-6 max-h-[70vh] overflow-y-auto\">\n            <Card className=\"bg-slate-800/50 border-purple-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-400 flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  Analysis History\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {conversationHistory.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {conversationHistory.map((entry) => (\n                      <Card\n                        key={entry.id}\n                        className=\"bg-slate-700/30 border-gray-600/30\"\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-start gap-3\">\n                              <User className=\"h-5 w-5 text-blue-400 mt-0.5\" />\n                              <div className=\"flex-1\">\n                                <p className=\"text-white font-medium\">\n                                  {entry.question}\n                                </p>\n                                <p className=\"text-xs text-gray-500\">\n                                  {entry.timestamp.toLocaleString()}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-start gap-3\">\n                              <Bot className=\"h-5 w-5 text-purple-400 mt-0.5\" />\n                              <div className=\"flex-1\">\n                                <p className=\"text-gray-300 text-sm line-clamp-3\">\n                                  {entry.response}\n                                </p>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  className=\"mt-2 text-purple-400 hover:text-purple-300\"\n                                  onClick={() => setResponse(entry.response)}\n                                >\n                                  View Full Analysis\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <MessageCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-400\">No analysis history yet</p>\n                    <p className=\"text-sm text-gray-500\">\n                      Start asking questions to build your analysis history\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"audit\" className=\"space-y-6 max-h-[70vh] overflow-y-auto\">\n            <Card className=\"bg-slate-800/50 border-red-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-red-400 flex items-center gap-2\">\n                  <Code className=\"h-5 w-5\" />\n                  Smart Contract Security Audit\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  AI-powered security analysis for Move smart contracts using\n                  Google Gemini\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Example Templates */}\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-gray-300\">\n                    Quick Start Examples:\n                  </p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"text-xs border-gray-600 text-gray-300 hover:border-red-500 hover:text-white\"\n                      onClick={() =>\n                        setAuditCode(`module dsoc::SOCService {\n    use sui::object::{Self, UID};\n    use sui::tx_context::{Self, TxContext, sender};\n    use sui::transfer;\n    use sui::coin::{Self, Coin};\n    use sui::sui::SUI;\n    use sui::event;\n\n    struct SOCService has key, store {\n        id: UID,\n        name: vector<u8>,\n        reputation: u64,\n        stake_amount: u64,\n    }\n\n    public fun create_service(name: vector<u8>, ctx: &mut TxContext): SOCService {\n        SOCService {\n            id: object::new(ctx),\n            name,\n            reputation: 0,\n            stake_amount: 0,\n        }\n    }\n\n    public entry fun stake_tokens(service: &mut SOCService, payment: Coin<SUI>, ctx: &mut TxContext) {\n        let amount = coin::value(&payment);\n        service.stake_amount = service.stake_amount + amount;\n        transfer::public_transfer(payment, sender(ctx));\n    }\n}`)\n                      }\n                    >\n                      dSOC Service\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"text-xs border-gray-600 text-gray-300 hover:border-red-500 hover:text-white\"\n                      onClick={() =>\n                        setAuditCode(`module token::SimpleToken {\n    use sui::coin::{Self, Coin, TreasuryCap};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n\n    struct SimpleToken has drop {}\n\n    fun init(witness: SimpleToken, ctx: &mut TxContext) {\n        let (treasury, metadata) = coin::create_currency(\n            witness, \n            6,\n            b\"SIMPLE\",\n            b\"Simple Token\",\n            b\"A simple token example\",\n            option::none(),\n            ctx\n        );\n\n        transfer::public_freeze_object(metadata);\n        transfer::public_transfer(treasury, tx_context::sender(ctx));\n    }\n\n    public entry fun mint(\n        treasury: &mut TreasuryCap<SimpleToken>, \n        amount: u64, \n        recipient: address, \n        ctx: &mut TxContext\n    ) {\n        coin::mint_and_transfer(treasury, amount, recipient, ctx);\n    }\n}`)\n                      }\n                    >\n                      Simple Token\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"text-xs border-gray-600 text-gray-300 hover:border-red-500 hover:text-white\"\n                      onClick={() => setAuditCode(\"\")}\n                    >\n                      Clear\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Code Input */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-300\">\n                    Smart Contract Code (Move Language)\n                  </label>\n                  <Textarea\n                    value={auditCode}\n                    onChange={(e) => setAuditCode(e.target.value)}\n                    placeholder={`Enter your Move smart contract code here...\n\nExample:\nmodule dsoc::YourContract {\n    use sui::object::{Self, UID};\n    use sui::tx_context::TxContext;\n\n    struct YourStruct has key {\n        id: UID,\n        // your fields here\n    }\n\n    // your functions here\n}`}\n                    className=\"bg-slate-900/70 border-gray-600 text-green-400 focus:border-red-400 min-h-[200px] font-mono text-sm\"\n                  />\n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                    <span>{auditCode.length} characters</span>\n                    <span>Supported: Move language for Sui blockchain</span>\n                  </div>\n                </div>\n\n                {/* Audit Button */}\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={handleAuditContract}\n                    disabled={isAuditing || !auditCode.trim()}\n                    className=\"bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 flex-1\"\n                  >\n                    {isAuditing ? (\n                      <>\n                        <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2\" />\n                        Analyzing Contract...\n                      </>\n                    ) : (\n                      <>\n                        <Shield className=\"h-4 w-4 mr-2\" />\n                        Run Security Audit\n                      </>\n                    )}\n                  </Button>\n                  {auditReport && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(auditReport);\n                        toast({\n                          title: \"Copied!\",\n                          description: \"Audit report copied to clipboard\",\n                        });\n                      }}\n                      className=\"border-gray-600 text-gray-300 hover:border-red-500 hover:text-white\"\n                    >\n                      <Target className=\"h-4 w-4 mr-2\" />\n                      Copy Report\n                    </Button>\n                  )}\n                </div>\n\n                {/* Audit Report Display */}\n                {auditReport && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"h-2 w-2 bg-green-400 rounded-full animate-pulse\"></div>\n                      <h4 className=\"text-white font-semibold\">\n                        Security Audit Report\n                      </h4>\n                      <Badge className=\"bg-red-500/20 text-red-300 border-red-500/30\">\n                        AI-Powered Analysis\n                      </Badge>\n                    </div>\n                    <div className=\"bg-slate-900/70 border border-gray-600/30 rounded-lg overflow-hidden\">\n                      <div className=\"bg-slate-800/50 px-4 py-2 border-b border-gray-600/30\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <div className=\"flex gap-1\">\n                            <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                            <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                            <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                          </div>\n                          <span className=\"text-gray-400\">audit_report.md</span>\n                        </div>\n                      </div>\n                      <div className=\"p-4 max-h-96 overflow-y-auto\">\n                        <div className=\"prose prose-invert max-w-none\">\n                          <div className=\"whitespace-pre-wrap text-gray-300 leading-relaxed text-sm\">\n                            {auditReport}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Info Section */}\n                <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-lg p-4\">\n                  <h4 className=\"text-blue-300 font-medium mb-2 flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4\" />\n                    About Smart Contract Auditing\n                  </h4>\n                  <div className=\"space-y-1 text-sm text-blue-200\">\n                    <p>\n                      • <strong>Move Language:</strong> Specialized for Sui\n                      blockchain with resource-based programming\n                    </p>\n                    <p>\n                      • <strong>Security Focus:</strong> Resource handling,\n                      capability patterns, and type safety\n                    </p>\n                    <p>\n                      • <strong>AI Analysis:</strong> Powered by Google Gemini\n                      for comprehensive vulnerability detection\n                    </p>\n                    <p>\n                      • <strong>Report Includes:</strong> Vulnerability scoring,\n                      detailed findings, and remediation steps\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":36864},"client/src/components/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Badge } from \"./ui/badge\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"./WalletProvider\";\nimport IncidentReport from \"./IncidentReport\";\nimport EVMIncidentReport from \"./EVMIncidentReport\";\nimport CasesList from \"./CasesList\";\nimport UnifiedStakingDashboard from \"./UnifiedStakingDashboard\";\n\nimport StakingPoolsPage from \"./StakingPoolsPage\";\nimport EnhancedStakingPools from \"./EnhancedStakingPools\";\nimport CaseDetailModal from \"./CaseDetailModal\";\nimport AIAssistant from \"./AIAssistant\";\nimport SmartContractAudit from \"./SmartContractAudit\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport {\n  Shield,\n  AlertTriangle,\n  Users,\n  TrendingUp,\n  Brain,\n  Code,\n  Coins,\n  Activity,\n  DollarSign,\n  Zap\n} from \"lucide-react\";\nimport EVMBalanceDisplay from './EVMBalanceDisplay';\n\ninterface DashboardProps {\n  currentRole: string;\n}\n\nexport default function Dashboard({ currentRole }: DashboardProps) {\n  const [activeTab, setActiveTab] = useState(\"incidents\");\n  const [selectedCaseId, setSelectedCaseId] = useState<number | null>(null);\n  const [evmStats, setEvmStats] = useState({\n    ethBalance: \"0\",\n    cltBalance: \"0\",\n    totalStaked: \"0\",\n  });\n\n  const { walletType, evmAddress, iotaAddress, isEVMConnected, isIOTAConnected } = useWallet();\n  const { toast } = useToast();\n\n  // Load EVM statistics\n  useEffect(() => {\n    const loadEVMStats = async () => {\n      if (walletType === 'evm' && isEVMConnected && evmAddress) {\n        try {\n          const [ethBalance, cltBalance, stakeInfo] = await Promise.all([\n            evmContractService.getETHBalance(evmAddress),\n            evmContractService.getCLTBalance(evmAddress),\n            evmContractService.getStakeInfo(evmAddress)\n          ]);\n\n          setEvmStats({\n            ethBalance: ethBalance,\n            cltBalance: evmContractService.formatCLT(cltBalance),\n            totalStaked: evmContractService.formatCLT(stakeInfo.amount),\n          });\n        } catch (error) {\n          console.error('Failed to load EVM stats:', error);\n        }\n      }\n    };\n\n    loadEVMStats();\n  }, [walletType, isEVMConnected, evmAddress]);\n\n  const isWalletConnected = walletType === 'evm' ? isEVMConnected : isIOTAConnected;\n  const currentAddress = walletType === 'evm' ? evmAddress : iotaAddress;\n\n  if (!isWalletConnected) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-black via-gray-900 to-red-950\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center\">\n            <div className=\"cyber-pulse\">\n              <Shield className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n            </div>\n            <h1 className=\"text-4xl font-bold text-red-500 mb-4 font-mono\">dSOC Security Center</h1>\n            <p className=\"text-xl text-gray-300 mb-4\">\n              {walletType === 'evm' ? 'EVM dSOC Platform' : 'IOTA dSOC Platform'}\n            </p>\n            <p className=\"text-gray-300 mb-8\">\n              {walletType === 'evm' \n                ? 'Please connect your MetaMask wallet to access EVM features' \n                : 'Please connect your IOTA wallet to access IOTA features'\n              }\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show features based on connected wallet type - prevent confusion\n  const tabs = isEVMConnected ? [\n    { id: \"incidents\", label: \"🚨 Security Incidents\", icon: AlertTriangle },\n    { id: \"tickets\", label: \"🛡️ Case Management\", icon: Shield },\n    { id: \"pools\", label: \"💰 Security Pools\", icon: Coins },\n    { id: \"staking\", label: \"📈 Staking Hub\", icon: TrendingUp },\n    { id: \"rewards\", label: \"🎯 Reward Center\", icon: DollarSign },\n    { id: \"ai\", label: \"🤖 AI Analyst\", icon: Brain },\n    { id: \"audit\", label: \"🔍 Smart Audit\", icon: Code },\n  ] : isIOTAConnected ? [\n    { id: \"incidents\", label: \"🚨 Security Incidents\", icon: AlertTriangle },\n    { id: \"tickets\", label: \"🛡️ Case Management\", icon: Shield },\n    { id: \"staking\", label: \"📈 IOTA Rewards\", icon: TrendingUp },\n    { id: \"ai\", label: \"🤖 AI Analyst\", icon: Brain },\n  ] : [];\n\n  const statCards = walletType === 'evm' ? [\n    {\n      title: \"ETH Balance\",\n      value: `${parseFloat(evmStats.ethBalance).toFixed(4)} ETH`,\n      icon: DollarSign,\n      color: \"text-orange-400\",\n      bgColor: \"bg-orange-500/10 border-orange-500/30\"\n    },\n    {\n      title: \"CLT Tokens\",\n      value: `${parseFloat(evmStats.cltBalance).toFixed(2)} CLT`,\n      icon: Coins,\n      color: \"text-green-400\",\n      bgColor: \"bg-green-500/10 border-green-500/30\"\n    },\n    {\n      title: \"Staked CLT\",\n      value: `${parseFloat(evmStats.totalStaked).toFixed(2)} CLT`,\n      icon: TrendingUp,\n      color: \"text-blue-400\",\n      bgColor: \"bg-blue-500/10 border-blue-500/30\"\n    },\n    {\n      title: \"Network\",\n      value: \"Scroll EVM\",\n      icon: Zap,\n      color: \"text-purple-400\",\n      bgColor: \"bg-purple-500/10 border-purple-500/30\"\n    }\n  ] : [\n    {\n      title: \"Active Tickets\",\n      value: \"12\",\n      icon: Shield,\n      color: \"text-blue-400\",\n      bgColor: \"bg-blue-500/10 border-blue-500/30\"\n    },\n    {\n      title: \"Resolved Issues\",\n      value: \"156\",\n      icon: Activity,\n      color: \"text-green-400\",\n      bgColor: \"bg-green-500/10 border-green-500/30\"\n    },\n    {\n      title: \"Total Rewards\",\n      value: \"2,450 IOTA\",\n      icon: Coins,\n      color: \"text-yellow-400\",\n      bgColor: \"bg-yellow-500/10 border-yellow-500/30\"\n    },\n    {\n      title: \"Network\",\n      value: \"IOTA Testnet\",\n      icon: Zap,\n      color: \"text-purple-400\",\n      bgColor: \"bg-purple-500/10 border-purple-500/30\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-black via-gray-900 to-red-950\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"cyber-pulse mb-4\">\n            <Shield className=\"h-12 w-12 text-red-500 mx-auto\" />\n          </div>\n          <h1 className=\"text-4xl font-bold text-red-500 mb-2 font-mono\">\n            dSOC Security Center\n          </h1>\n          <div className=\"space-y-2\">\n            <p className=\"text-gray-300\">\n              Role: <span className=\"text-red-400 font-bold\">{currentRole}</span> | \n              <span className=\"text-red-400 font-bold\">{isEVMConnected ? 'EVM' : 'IOTA'}</span> Wallet: \n              <span className=\"text-red-400 font-mono\">{currentAddress?.slice(0, 6)}...{currentAddress?.slice(-4)}</span>\n            </p>\n            {isEVMConnected && (\n              <div className=\"bg-red-900/20 border border-red-500/30 rounded-lg p-4 inline-block\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-red-400 text-lg font-mono font-bold cyber-pulse\">\n                      ⚡ {parseFloat(evmStats.ethBalance).toFixed(6)} ETH\n                    </p>\n                    <p className=\"text-xs text-gray-400\">Scroll Sepolia Balance</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-red-400 text-sm font-mono\">\n                      🪙 {parseFloat(evmStats.cltBalance).toFixed(2)} CLT\n                    </p>\n                    <p className=\"text-xs text-gray-400\">Available Tokens</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-red-400 text-sm font-mono\">\n                      🔒 {parseFloat(evmStats.totalStaked).toFixed(2)} CLT\n                    </p>\n                    <p className=\"text-xs text-gray-400\">Staked Amount</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {statCards.map((stat, index) => (\n            <Card key={index} className={`cyber-glass ${stat.bgColor} security-scan`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-400 text-sm font-medium\">{stat.title}</p>\n                    <p className={`text-2xl font-bold ${stat.color} font-mono`}>{stat.value}</p>\n                  </div>\n                  <stat.icon className={`h-8 w-8 ${stat.color}`} />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"flex flex-wrap gap-2 mb-8 border-b border-red-500/30\">\n          {tabs.map((tab) => (\n            <Button\n              key={tab.id}\n              variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex items-center gap-2 font-mono ${\n                activeTab === tab.id\n                  ? \"btn-cyber cyber-pulse text-white\"\n                  : \"text-gray-300 hover:text-red-400 hover:bg-red-950/30 cyber-glass\"\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              {tab.label}\n            </Button>\n          ))}\n        </div>\n\n      {/* Tab Content */}\n      <div className=\"space-y-6\">\n        {activeTab === \"incidents\" && (\n          <div>\n            {walletType === 'evm' ? (\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"lg:col-span-2\">\n                  <EVMIncidentReport onClose={() => setActiveTab(\"tickets\")} />\n                </div>\n                <div>\n                  <EVMBalanceDisplay />\n                </div>\n              </div>\n            ) : (\n              <IncidentReport onClose={() => setActiveTab(\"tickets\")} />\n            )}\n          </div>\n        )}\n\n        {activeTab === \"tickets\" && (\n          <div>\n            <CasesList walletType={walletType} />\n          </div>\n        )}\n\n        {activeTab === \"pools\" && isEVMConnected && (\n          <div>\n            <EnhancedStakingPools />\n          </div>\n        )}\n\n        {activeTab === \"staking\" && (\n          <div>\n            <UnifiedStakingDashboard />\n          </div>\n        )}\n\n        {activeTab === \"ai\" && (\n          <div>\n            <AIAssistant />\n          </div>\n        )}\n\n        {activeTab === \"rewards\" && isEVMConnected && (\n          <div>\n            <Card className=\"cyber-glass bg-red-500/10 border-red-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-red-400 flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5\" />\n                  CLT Reward Center\n                </CardTitle>\n                <CardDescription className=\"text-gray-300\">\n                  Visit the dedicated Reward Manager to mint CLT tokens for analysts, certifiers, and stakers\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button \n                  onClick={() => window.open('/rewards', '_blank')}\n                  className=\"bg-red-600 hover:bg-red-700 text-white\"\n                >\n                  <DollarSign className=\"h-4 w-4 mr-2\" />\n                  Open Reward Manager\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {activeTab === \"audit\" && (\n          <div>\n            <SmartContractAudit />\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11755},"client/src/components/Header.tsx":{"content":"import { ConnectButton, useCurrentAccount } from \"@iota/dapp-kit\";\nimport { Button } from \"./ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"./ui/select\";\nimport { Badge } from \"./ui/badge\";\nimport { Shield, Wallet, ChevronDown, Link, Coins, Network, FileText, DollarSign } from \"lucide-react\";\nimport { useWallet } from './WalletProvider';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport BlockchainSelector from \"./BlockchainSelector\";\n\ninterface HeaderProps {\n  onRoleChange: (role: string) => void;\n  currentRole: string;\n}\n\nexport default function Header({ onRoleChange, currentRole }: HeaderProps) {\n  const iotaAccount = useCurrentAccount();\n  const { \n    walletType,\n    setWalletType,\n    evmAddress, \n    iotaAddress, \n    connectEVMWallet, \n    disconnectEVMWallet,\n    isEVMConnected,\n    isIOTAConnected,\n    ethBalance\n  } = useWallet();\n  const { toast } = useToast();\n  const [showBlockchainSelector, setShowBlockchainSelector] = useState(false);\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'client': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'analyst': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'certifier': return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n\n\n  const handleEVMConnect = async () => {\n    if (isEVMConnected) {\n      disconnectEVMWallet();\n      toast({\n        title: \"EVM Wallet Disconnected\",\n        description: \"MetaMask wallet has been disconnected\",\n      });\n    } else {\n      try {\n        const address = await connectEVMWallet();\n        if (address) {\n          toast({\n            title: \"EVM Wallet Connected\",\n            description: `Connected to ${address.slice(0, 6)}...${address.slice(-4)}`,\n          });\n        }\n      } catch (error: any) {\n        toast({\n          title: \"Connection Failed\",\n          description: error.message || \"Failed to connect EVM wallet\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  return (\n    <header className=\"border-b border-red-500/30 bg-black/95 backdrop-blur supports-[backdrop-filter]:bg-black/80\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-3 bg-gradient-to-r from-red-600 to-red-800 rounded-lg cyber-pulse\">\n                <Shield className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-red-400 font-mono\">dSOC</h1>\n                <p className=\"text-xs text-gray-400 font-mono\">DECENTRALIZED SECURITY OPERATIONS CENTER</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Role Selector - always visible */}\n            <Select value={currentRole} onValueChange={onRoleChange}>\n              <SelectTrigger className=\"w-40 bg-slate-800 border-slate-700 text-white\">\n                <div className=\"flex items-center space-x-2\">\n                  <Badge className={getRoleBadgeColor(currentRole)}>\n                    {currentRole}\n                  </Badge>\n                </div>\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-slate-700\">\n                <SelectItem value=\"client\" className=\"text-white hover:bg-slate-700\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\">\n                      Client\n                    </Badge>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"analyst\" className=\"text-white hover:bg-slate-700\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                      Analyst\n                    </Badge>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"certifier\" className=\"text-white hover:bg-slate-700\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">\n                      Certifier\n                    </Badge>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Blockchain Selector */}\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowBlockchainSelector(true)}\n              className=\"border-purple-500/30 text-gray-300 hover:bg-purple-500/10\"\n            >\n              <Network className=\"h-4 w-4 mr-2\" />\n              {walletType === 'iota' ? 'IOTA' : 'Scroll EVM'}\n              <ChevronDown className=\"h-4 w-4 ml-2\" />\n            </Button>\n\n            {/* Navigation Links */}\n            <Button\n              variant=\"ghost\"\n              onClick={() => window.location.href = '/pools'}\n              className=\"text-gray-300 hover:bg-purple-500/20\"\n            >\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Security Pools\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              onClick={() => window.location.href = '/staking'}\n              className=\"text-gray-300 hover:bg-purple-500/20\"\n            >\n              <Coins className=\"h-4 w-4 mr-2\" />\n              Staking\n            </Button>\n\n            {/* Connection Status Display - Hide IOTA when EVM connected */}\n            <div className=\"flex items-center space-x-2\">\n              {!isEVMConnected && isIOTAConnected && (\n                <Badge className=\"bg-red-500/20 text-red-400 border-red-500/30 font-mono\">\n                  🔗 IOTA: {iotaAddress?.slice(0, 6)}...{iotaAddress?.slice(-4)}\n                </Badge>\n              )}\n              {isEVMConnected && (\n                <div className=\"flex items-center gap-2\">\n                  <Badge className=\"bg-red-500/20 text-red-400 border-red-500/30 font-mono\">\n                    🔗 EVM: {evmAddress?.slice(0, 6)}...{evmAddress?.slice(-4)}\n                  </Badge>\n                  {ethBalance && (\n                    <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30 font-mono\">\n                      ⚡ {parseFloat(ethBalance).toFixed(4)} ETH\n                    </Badge>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Wallet Connection Buttons - Smart display */}\n            <div className=\"flex items-center space-x-2\">\n              {!isEVMConnected && (\n                <ConnectButton\n                  connectText=\"🔐 Connect IOTA\"\n                  className=\"bg-gradient-to-r from-red-600 to-red-800 hover:from-red-700 hover:to-red-900 text-white px-4 py-2 rounded-lg font-mono transition-all duration-200 text-sm border border-red-500/30\"\n                />\n              )}\n              <Button\n                onClick={handleEVMConnect}\n                size=\"sm\"\n                className={`${\n                  isEVMConnected \n                    ? 'bg-red-600 hover:bg-red-700' \n                    : 'bg-gradient-to-r from-red-600 to-red-800 hover:from-red-700 hover:to-red-900'\n                } text-white px-4 py-2 rounded-lg font-mono transition-all duration-200 border border-red-500/30`}\n              >\n                {isEVMConnected ? '🔓 Disconnect EVM' : '🔐 Connect MetaMask'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Blockchain Selector Modal */}\n      <BlockchainSelector\n        isOpen={showBlockchainSelector}\n        onClose={() => setShowBlockchainSelector(false)}\n        onConnected={() => setShowBlockchainSelector(false)}\n      />\n    </header>\n  );\n}","size_bytes":8096},"client/src/components/RoleSelectionModal.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Shield, Users, CheckCircle, Eye } from \"lucide-react\";\n\ninterface RoleSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onRoleSelect: (role: string) => void;\n}\n\nconst roles = [\n  {\n    id: \"client\",\n    title: \"Security Client\",\n    description: \"Submit cybersecurity incidents and get expert analysis\",\n    icon: Shield,\n    color: \"text-blue-400\",\n    bgColor: \"bg-blue-500/10\",\n    features: [\n      \"Submit security incidents\",\n      \"Track incident status\",\n      \"Receive expert analysis\",\n      \"Stake tokens for priority\"\n    ]\n  },\n  {\n    id: \"analyst\",\n    title: \"Security Analyst\", \n    description: \"Analyze incidents and provide professional assessments\",\n    icon: Users,\n    color: \"text-purple-400\",\n    bgColor: \"bg-purple-500/10\",\n    features: [\n      \"Analyze security incidents\",\n      \"Provide expert reports\",\n      \"Earn CLT tokens\",\n      \"Build reputation\"\n    ]\n  },\n  {\n    id: \"certifier\",\n    title: \"Certifier\",\n    description: \"Validate and approve analyst reports for quality assurance\",\n    icon: CheckCircle,\n    color: \"text-green-400\", \n    bgColor: \"bg-green-500/10\",\n    features: [\n      \"Review analyst reports\",\n      \"Validate incident analysis\",\n      \"Ensure quality standards\",\n      \"Earn validation rewards\"\n    ]\n  },\n  {\n    id: \"observer\",\n    title: \"Observer\",\n    description: \"View public incident data and platform statistics\",\n    icon: Eye,\n    color: \"text-gray-400\",\n    bgColor: \"bg-gray-500/10\",\n    features: [\n      \"View public incidents\",\n      \"Access platform statistics\",\n      \"Monitor system health\",\n      \"Research security trends\"\n    ]\n  }\n];\n\nexport default function RoleSelectionModal({ isOpen, onClose, onRoleSelect }: RoleSelectionModalProps) {\n  const [selectedRole, setSelectedRole] = useState<string>(\"\");\n\n  const handleRoleSelect = (roleId: string) => {\n    setSelectedRole(roleId);\n  };\n\n  const handleConfirm = () => {\n    if (selectedRole) {\n      onRoleSelect(selectedRole);\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-slate-900 border-slate-700\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl text-center text-white\">\n            Choose Your Role in dSOC\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-gray-400\">\n            Select how you want to participate in the decentralized security ecosystem\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6\">\n          {roles && roles.map((role) => {\n            const IconComponent = role.icon;\n            const isSelected = selectedRole === role.id;\n            \n            return (\n              <Card \n                key={role.id}\n                className={`cursor-pointer transition-all duration-200 hover:scale-105 ${\n                  isSelected \n                    ? 'border-purple-500 bg-slate-800/80 shadow-lg shadow-purple-500/20' \n                    : 'border-slate-700 bg-slate-800/50 hover:border-slate-600'\n                }`}\n                onClick={() => handleRoleSelect(role.id)}\n              >\n                <CardHeader className=\"text-center\">\n                  <div className={`w-16 h-16 mx-auto rounded-full ${role.bgColor} flex items-center justify-center mb-3`}>\n                    <IconComponent className={`h-8 w-8 ${role.color}`} />\n                  </div>\n                  <CardTitle className={`${role.color} text-lg`}>\n                    {role.title}\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    {role.description}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {role.features && role.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-center text-sm text-gray-300\">\n                        <CheckCircle className=\"h-4 w-4 text-green-400 mr-2 flex-shrink-0\" />\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"flex justify-center gap-4 mt-8\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose}\n            className=\"border-slate-600 text-gray-300 hover:bg-slate-800\"\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleConfirm}\n            disabled={!selectedRole}\n            className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white\"\n          >\n            Continue as {selectedRole ? roles.find(r => r.id === selectedRole)?.title : 'Role'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5302},"client/src/components/SmartContractAudit.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Badge } from \"./ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { runAudit, quickScan } from \"@/lib/audit-service\";\nimport {\n  Shield,\n  Zap,\n  AlertTriangle,\n  CheckCircle,\n  FileText,\n  Sparkles,\n  Target,\n  Activity,\n  Clock,\n  Code\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\n\ninterface QuickScanResult {\n  score: number;\n  issues: Array<{\n    severity: 'Critical' | 'High' | 'Medium' | 'Low';\n    title: string;\n    description: string;\n  }>;\n}\n\nexport default function SmartContractAudit() {\n  const [contractCode, setContractCode] = useState(\"\");\n  const [auditReport, setAuditReport] = useState(\"\");\n  const [isAuditing, setIsAuditing] = useState(false);\n  const [quickScanResult, setQuickScanResult] = useState<QuickScanResult | null>(null);\n  const [isScanning, setIsScanning] = useState(false);\n\n  const { toast } = useToast();\n\n  const handleFullAudit = async () => {\n    if (!contractCode.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter smart contract code to audit\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAuditing(true);\n    try {\n      const report = await runAudit(contractCode);\n      setAuditReport(report || \"No audit report generated.\"); // Ensure report is not undefined\n      toast({\n        title: \"Audit Complete\",\n        description: \"Smart contract audit has been completed successfully\",\n      });\n    } catch (error: any) {\n      console.error(\"Audit failed:\", error); // Log the error for debugging\n      toast({\n        title: \"Audit Failed\",\n        description: `Failed to complete the audit. Please try again. ${error.message || ''}`, // Display error message\n        variant: \"destructive\",\n      });\n      setAuditReport(\"Audit failed to generate a report. Please check the console for details.\");\n    } finally {\n      setIsAuditing(false);\n    }\n  };\n\n  const handleQuickScan = async () => {\n    if (!contractCode.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter smart contract code to scan\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsScanning(true);\n    try {\n      const result = await quickScan(contractCode);\n      setQuickScanResult(result);\n      toast({\n        title: \"Quick Scan Complete\",\n        description: \"Security scan completed successfully\",\n      });\n    } catch (error: any) {\n      console.error(\"Scan failed:\", error); // Log the error for debugging\n      toast({\n        title: \"Scan Failed\",\n        description: `Failed to complete the security scan. ${error.message || ''}`, // Display error message\n        variant: \"destructive\",\n      });\n      setQuickScanResult(null);\n    } finally {\n      setIsScanning(false);\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'Critical': return 'bg-red-500/20 text-red-300 border-red-500/30';\n      case 'High': return 'bg-orange-500/20 text-orange-300 border-orange-500/30';\n      case 'Medium': return 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30';\n      case 'Low': return 'bg-blue-500/20 text-blue-300 border-blue-500/30';\n      default: return 'bg-gray-500/20 text-gray-300 border-gray-500/30';\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score <= 2) return 'text-green-400';\n    if (score <= 4) return 'text-yellow-400';\n    if (score <= 7) return 'text-orange-400';\n    return 'text-red-400';\n  };\n\n  const exampleContracts = {\n    move: `module dsoc::SOCService {\n    use iota::object::{Self, UID};\n    use iota::tx_context::{Self, TxContext};\n    use iota::transfer;\n    use iota::coin::{Self, Coin};\n    use iota::iota::IOTA;\n\n    struct Ticket has key, store {\n        id: UID,\n        title: string::String,\n        description: string::String,\n        category: string::String,\n        priority: u8,\n        status: u8,\n        stake_amount: u64,\n        client: address,\n        analyst: option::Option<address>,\n        created_at: u64,\n    }\n\n    public fun create_ticket(\n        title: vector<u8>,\n        description: vector<u8>,\n        category: vector<u8>,\n        priority: u8,\n        stake: Coin<IOTA>,\n        ctx: &mut TxContext\n    ) {\n        let ticket = Ticket {\n            id: object::new(ctx),\n            title: string::utf8(title),\n            description: string::utf8(description),\n            category: string::utf8(category),\n            priority,\n            status: 0, // Open\n            stake_amount: coin::value(&stake),\n            client: tx_context::sender(ctx),\n            analyst: option::none(),\n            created_at: tx_context::epoch(ctx),\n        };\n\n        transfer::share_object(ticket);\n        transfer::public_transfer(stake, @treasury);\n    }\n}`,\n    solidity: `pragma solidity ^0.8.0;\n\ncontract VulnerableBank {\n    mapping(address => uint256) public balances;\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n        (bool success,) = msg.sender.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n\n        balances[msg.sender] -= amount;\n    }\n\n    function getBalance(address user) public view returns (uint256) {\n        return balances[user];\n    }\n}`\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-5\">\n          <div className=\"flex items-center justify-center gap-4 mb-5\">\n            <div className=\"p-4 bg-gradient-to-r from-red-500 to-orange-500 rounded-full\">\n              <Shield className=\"h-10 w-10 text-white\" />\n            </div>\n            <h1 className=\"text-5xl font-bold bg-gradient-to-r from-red-400 to-orange-400 bg-clip-text text-transparent\">\n              Smart Contract Auditor\n            </h1>\n          </div>\n          <p className=\"text-gray-400 text-xl max-w-3xl mx-auto\">\n            AI-powered security analysis for smart contracts - Powered by Google Gemini\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"audit\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-slate-800/50\">\n            <TabsTrigger value=\"audit\" className=\"data-[state=active]:bg-purple-600 text-lg\">\n              <FileText className=\"h-5 w-5 mr-2\" />\n              Full Audit\n            </TabsTrigger>\n            <TabsTrigger value=\"scan\" className=\"data-[state=active]:bg-blue-600 text-lg\">\n              <Zap className=\"h-5 w-5 mr-2\" />\n              Quick Scan\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"audit\" className=\"space-y-7\">\n            {/* Contract Input */}\n            <Card className=\"bg-slate-800/50 border-purple-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-400 flex items-center gap-3 text-2xl\">\n                  <Code className=\"h-6 w-6\" />\n                  Contract Code Input\n                </CardTitle>\n                <CardDescription className=\"text-gray-400 text-lg\">\n                  Paste your smart contract code for comprehensive security analysis\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-5\">\n                <Textarea\n                  placeholder=\"Paste your smart contract code here...\"\n                  value={contractCode}\n                  onChange={(e) => setContractCode(e.target.value)}\n                  className=\"min-h-96 bg-slate-700/50 border-gray-600/30 text-gray-300 font-mono text-lg\"\n                />\n\n                <div className=\"flex flex-wrap gap-3\">\n                  <Button\n                    size=\"lg\"\n                    variant=\"outline\"\n                    onClick={() => setContractCode(exampleContracts.move)}\n                    className=\"border-blue-500/30 hover:bg-blue-500/20 text-lg\"\n                  >\n                    Load Move Example\n                  </Button>\n                  <Button\n                    size=\"lg\"\n                    variant=\"outline\"\n                    onClick={() => setContractCode(exampleContracts.solidity)}\n                    className=\"border-green-500/30 hover:bg-green-500/20 text-lg\"\n                  >\n                    Load Solidity Example\n                  </Button>\n                  <Button\n                    size=\"lg\"\n                    variant=\"outline\"\n                    onClick={() => setContractCode(\"\")}\n                    className=\"border-gray-500/30 hover:bg-gray-500/20 text-lg\"\n                  >\n                    Clear\n                  </Button>\n                </div>\n\n                <Button\n                  onClick={handleFullAudit}\n                  disabled={isAuditing || !contractCode.trim()}\n                  className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 py-5 text-xl\"\n                  size=\"lg\"\n                >\n                  {isAuditing ? (\n                    <>\n                      <Activity className=\"h-6 w-6 mr-3 animate-spin\" />\n                      Running Full Security Audit...\n                    </>\n                  ) : (\n                    <>\n                      <Shield className=\"h-6 w-6 mr-3\" />\n                      Run Full Security Audit\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Audit Report */}\n            {auditReport && (\n              <Card className=\"bg-slate-800/50 border-green-500/30\">\n                <CardHeader>\n                  <CardTitle className=\"text-green-400 flex items-center gap-3 text-2xl\">\n                    <CheckCircle className=\"h-6 w-6\" />\n                    Audit Report\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400 text-lg\">\n                    Comprehensive security analysis results\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"prose prose-invert prose-lg max-w-none\">\n                    <div className=\"bg-slate-700/30 rounded-lg p-5 border border-gray-600/30\">\n                      <div className=\"whitespace-pre-wrap text-gray-300 leading-relaxed text-lg\">\n                        {auditReport.split('\\n').map((line, index) => {\n                          if (line.startsWith('#')) {\n                            return <h2 key={index} className=\"text-white font-bold text-2xl mb-3\">{line.replace(/^#+\\s*/, '')}</h2>;\n                          }\n                          if (line.startsWith('##')) {\n                            return <h3 key={index} className=\"text-purple-300 font-semibold text-xl mb-3\">{line.replace(/^#+\\s*/, '')}</h3>;\n                          }\n                          if (line.startsWith('- ') || line.startsWith('* ')) {\n                            return <p key={index} className=\"text-blue-300 ml-4 text-lg\">{line}</p>;\n                          }\n                          if (line.trim() === '') {\n                            return <br key={index} />;\n                          }\n                          return <p key={index} className=\"mb-3\">{line}</p>;\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"scan\" className=\"space-y-7\">\n            {/* Quick Scan */}\n            <Card className=\"bg-slate-800/50 border-blue-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-400 flex items-center gap-3 text-2xl\">\n                  <Zap className=\"h-6 w-6\" />\n                  Quick Security Scan\n                </CardTitle>\n                <CardDescription className=\"text-gray-400 text-lg\">\n                  Fast vulnerability assessment with severity scoring\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-5\">\n                <Textarea\n                  placeholder=\"Paste your smart contract code here...\"\n                  value={contractCode}\n                  onChange={(e) => setContractCode(e.target.value)}\n                  className=\"min-h-48 bg-slate-700/50 border-gray-600/30 text-gray-300 font-mono text-lg\"\n                />\n\n                <Button\n                  onClick={handleQuickScan}\n                  disabled={isScanning || !contractCode.trim()}\n                  className=\"w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 py-5 text-xl\"\n                  size=\"lg\"\n                >\n                  {isScanning ? (\n                    <>\n                      <Clock className=\"h-6 w-6 mr-3 animate-spin\" />\n                      Scanning...\n                    </>\n                  ) : (\n                    <>\n                      <Target className=\"h-6 w-6 mr-3\" />\n                      Quick Security Scan\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Quick Scan Results */}\n            {quickScanResult && (\n              <Card className=\"bg-slate-800/50 border-cyan-500/30\">\n                <CardHeader>\n                  <CardTitle className=\"text-cyan-400 flex items-center gap-3 text-2xl\">\n                    <Activity className=\"h-6 w-6\" />\n                    Scan Results\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-5\">\n                  <div className=\"flex items-center justify-between p-5 bg-slate-700/30 rounded-lg border border-gray-600/30\">\n                    <div>\n                      <h3 className=\"text-white font-semibold text-xl\">Security Score</h3>\n                      <p className=\"text-lg text-gray-400\">Lower score = more secure</p>\n                    </div>\n                    <div className={`text-5xl font-bold ${getScoreColor(quickScanResult.score)}`}>\n                      {quickScanResult.score}/10\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-white font-semibold text-xl\">Issues Found:</h4>\n                    {quickScanResult.issues.map((issue, index) => (\n                      <div key={index} className=\"p-4 bg-slate-700/20 rounded-lg border border-gray-600/30\">\n                        <div className=\"flex items-start justify-between gap-4\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <Badge className={getSeverityColor(issue.severity)} size=\"lg\">\n                                {issue.severity}\n                              </Badge>\n                              <h5 className=\"text-white font-medium text-lg\">{issue.title}</h5>\n                            </div>\n                            <p className=\"text-gray-400 text-lg\">{issue.description}</p>\n                          </div>\n                          {issue.severity === 'Critical' && <AlertTriangle className=\"h-6 w-6 text-red-400\" />}\n                          {issue.severity === 'High' && <AlertTriangle className=\"h-6 w-6 text-orange-400\" />}\n                          {issue.severity === 'Medium' && <AlertTriangle className=\"h-6 w-6 text-yellow-400\" />}\n                          {issue.severity === 'Low' && <CheckCircle className=\"h-6 w-6 text-blue-400\" />}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {/* Features */}\n        <div className=\"grid md:grid-cols-3 gap-7\">\n          <Card className=\"bg-slate-800/50 border-purple-500/30\">\n            <CardContent className=\"p-7 text-center\">\n              <Sparkles className=\"h-14 w-14 text-purple-400 mx-auto mb-5\" />\n              <h3 className=\"text-white font-semibold mb-3 text-xl\">AI-Powered Analysis</h3>\n              <p className=\"text-gray-400 text-lg\">Advanced machine learning models identify vulnerabilities and security patterns</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800/50 border-blue-500/30\">\n            <CardContent className=\"p-7 text-center\">\n              <Shield className=\"h-14 w-14 text-blue-400 mx-auto mb-5\" />\n              <h3 className=\"text-white font-semibold mb-3 text-xl\">Multi-Language Support</h3>\n              <p className=\"text-gray-400 text-lg\">Supports Move, Solidity, and other smart contract languages</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800/50 border-green-500/30\">\n            <CardContent className=\"p-7 text-center\">\n              <Target className=\"h-14 w-14 text-green-400 mx-auto mb-5\" />\n              <h3 className=\"text-white font-semibold mb-3 text-xl\">Detailed Reports</h3>\n              <p className=\"text-gray-400 text-lg\">Comprehensive audit reports with actionable recommendations</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17687},"client/src/components/StakingRewards.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { Badge } from \"./ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrentAccount, useIotaClient, useSignTransaction } from \"@iota/dapp-kit\";\nimport { createContractService } from \"@/lib/contract\";\nimport { supabaseService, DbUser, DbTransaction } from \"@/lib/supabase\";\nimport { \n  Coins, \n  TrendingUp, \n  Award, \n  ArrowUpCircle, \n  ArrowDownCircle,\n  History,\n  Wallet,\n  Star,\n  Target,\n  Lock,\n  Unlock,\n  Calendar,\n  DollarSign,\n  Zap,\n  Activity,\n  PieChart,\n  BarChart3,\n  Users\n} from \"lucide-react\";\nimport { mockTickets, mockUsers, mockTransactions } from \"../../../shared/mockData\";\n\ninterface StakingData {\n  totalStaked: number;\n  availableBalance: number;\n  pendingRewards: number;\n  earnedRewards: number;\n  apy: number;\n  lockPeriod: string;\n  nextReward: string;\n  stakingTier: string;\n  multiplier: number;\n}\n\nexport default function StakingRewards() {\n  const [userStats, setUserStats] = useState<DbUser | null>(null);\n  const [transactions, setTransactions] = useState<DbTransaction[]>([]);\n  const [stakeAmount, setStakeAmount] = useState(\"100\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [isStaking, setIsStaking] = useState(false);\n  const [isUnstaking, setIsUnstaking] = useState(false);\n  const [stakingData, setStakingData] = useState<StakingData>({\n    totalStaked: 0,\n    availableBalance: 0,\n    pendingRewards: 0,\n    earnedRewards: 0,\n    apy: 0,\n    lockPeriod: \"30 days\",\n    nextReward: \"2024-01-20\",\n    stakingTier: \"Bronze\",\n    multiplier: 1.0\n  });\n\n  const account = useCurrentAccount();\n  const client = useIotaClient();\n  const { mutate: signTransaction } = useSignTransaction();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (account) {\n      loadUserData();\n      loadStakingData();\n    }\n  }, [account]);\n\n  const loadUserData = async () => {\n    if (!account) return;\n\n    try {\n      // Load user stats\n      const user = await supabaseService.getUserByAddress(account.address);\n      setUserStats(user);\n\n      // Load transactions\n      const userTransactions = await supabaseService.getTransactionsByUser(account.address);\n      setTransactions(userTransactions);\n    } catch (error) {\n      console.error('Error loading user data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadStakingData = () => {\n    if (!account) return;\n\n    const userData = mockUsers.find(user => user.wallet_address === account.address);\n    if (!userData) return;\n\n    // Calculate staking data based on user role and activity\n    const userTransactions = mockTransactions.filter(tx => \n      tx.from_address === account.address || tx.to_address === account.address\n    );\n\n    const earnedRewards = userTransactions\n      .filter(tx => tx.to_address === account.address && tx.transaction_type === 'REWARD_PAYOUT')\n      .reduce((sum, tx) => sum + (tx.amount || 0), 0);\n\n    // Determine staking tier and multiplier based on stake balance\n    let tier = \"Bronze\";\n    let multiplier = 1.0;\n    let apy = 6.5;\n\n    if (userData.stake_balance >= 10000) {\n      tier = \"Gold\";\n      multiplier = 1.5;\n      apy = 12.5;\n    } else if (userData.stake_balance >= 5000) {\n      tier = \"Silver\";\n      multiplier = 1.25;\n      apy = 9.5;\n    }\n\n    setStakingData({\n      totalStaked: userData.stake_balance,\n      availableBalance: userData.clt_balance,\n      pendingRewards: Math.round(userData.stake_balance * 0.025 * multiplier), // 2.5% pending\n      earnedRewards: earnedRewards,\n      apy: apy,\n      lockPeriod: \"30 days\",\n      nextReward: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      stakingTier: tier,\n      multiplier: multiplier\n    });\n  };\n\n  const handleStakeTokens = async () => {\n    if (!account || !stakeAmount) return;\n\n    try {\n      setIsStaking(true);\n      const contractService = createContractService(client);\n\n      // Create stake transaction (this would call a staking function in the contract)\n      const transaction = await contractService.createStakeToken(parseInt(stakeAmount));\n\n      signTransaction(\n        { transaction },\n        {\n          onSuccess: async (result) => {\n            try {\n              // Update user balance\n              const updatedBalance = (userStats?.stake_balance || 0) + parseInt(stakeAmount);\n              await supabaseService.upsertUser({\n                wallet_address: account.address,\n                role: userStats?.role || 'client',\n                clt_balance: userStats?.clt_balance || 0,\n                stake_balance: updatedBalance\n              });\n\n              // Record transaction\n              await supabaseService.createTransaction({\n                ticket_id: 0,\n                from_address: account.address,\n                transaction_hash: result.digest,\n                transaction_type: 'STAKE',\n                amount: parseInt(stakeAmount),\n                status: 'completed'\n              });\n\n              toast({\n                title: \"Success!\",\n                description: `Staked ${stakeAmount} IOTA tokens successfully`,\n              });\n\n              setStakeAmount(\"100\");\n              loadUserData();\n            } catch (error) {\n              console.error('Database error:', error);\n              toast({\n                title: \"Warning\",\n                description: \"Tokens staked but failed to update database\",\n                variant: \"destructive\",\n              });\n            }\n          },\n          onError: (error) => {\n            console.error('Staking failed:', error);\n            toast({\n              title: \"Error\",\n              description: \"Failed to stake tokens\",\n              variant: \"destructive\",\n            });\n          },\n        }\n      );\n    } catch (error) {\n      console.error('Error staking tokens:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create stake transaction\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsStaking(false);\n    }\n  };\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'STAKE': return <ArrowUpCircle className=\"h-4 w-4 text-green-400\" />;\n      case 'REWARD': return <Award className=\"h-4 w-4 text-yellow-400\" />;\n      case 'CREATE_TICKET': return <ArrowDownCircle className=\"h-4 w-4 text-blue-400\" />;\n      default: return <Coins className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case 'STAKE': return 'text-green-400';\n      case 'REWARD': return 'text-yellow-400';\n      case 'CREATE_TICKET': return 'text-blue-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-8 h-8 border-2 border-purple-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-400\">Loading staking data...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Primary Staking Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"bg-slate-800/50 border-green-500/30 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-green-400\">Total Staked</CardTitle>\n            <Lock className=\"h-4 w-4 text-green-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stakingData.totalStaked.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-400\">IOTA tokens locked</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-yellow-500/30 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-yellow-400\">Pending Rewards</CardTitle>\n            <Award className=\"h-4 w-4 text-yellow-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stakingData.pendingRewards}</div>\n            <p className=\"text-xs text-gray-400\">CLT ready to claim</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-purple-400\">Total Earned</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-purple-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stakingData.earnedRewards.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-400\">CLT lifetime earnings</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-blue-500/30 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-blue-400\">Current APY</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-blue-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stakingData.apy}%</div>\n            <p className=\"text-xs text-gray-400\">Annual percentage yield</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Staking Tier Status */}\n      <Card className=\"bg-gradient-to-r from-amber-900/20 to-yellow-900/20 border-amber-500/30 backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Target className=\"h-6 w-6 text-amber-400\" />\n              <div>\n                <CardTitle className=\"text-amber-400\">Staking Tier: {stakingData.stakingTier}</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Reward multiplier: {stakingData.multiplier}x\n                </CardDescription>\n              </div>\n            </div>\n            <Badge className=\"bg-amber-500/20 text-amber-400 border-amber-500/30 px-3 py-1\">\n              {stakingData.stakingTier} Tier\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n              <div className=\"text-lg font-bold text-gray-300\">Bronze</div>\n              <div className=\"text-sm text-gray-400\">0 - 4,999 IOTA</div>\n              <div className=\"text-sm text-green-400\">1.0x multiplier</div>\n            </div>\n            <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n              <div className=\"text-lg font-bold text-gray-300\">Silver</div>\n              <div className=\"text-sm text-gray-400\">5,000 - 9,999 IOTA</div>\n              <div className=\"text-sm text-green-400\">1.25x multiplier</div>\n            </div>\n            <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n              <div className=\"text-lg font-bold text-gray-300\">Gold</div>\n              <div className=\"text-sm text-gray-400\">10,000+ IOTA</div>\n              <div className=\"text-sm text-green-400\">1.5x multiplier</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Platform Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card className=\"bg-slate-800/50 border-cyan-500/30 backdrop-blur-sm\">\n          <CardHeader>\n            <div className=\"flex items-center space-x-3\">\n              <Activity className=\"h-6 w-6 text-cyan-400\" />\n              <div>\n                <CardTitle className=\"text-cyan-400\">Platform Activity</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Recent security incident analysis\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-300\">Total Tickets Processed</span>\n                <Badge className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\">\n                  {mockTickets.length}\n                </Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-300\">Active Analysts</span>\n                <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                  {mockUsers.filter(u => u.role === 'analyst').length}\n                </Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-300\">Success Rate</span>\n                <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">\n                  89%\n                </Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-300\">Avg Response Time</span>\n                <Badge className=\"bg-orange-500/20 text-orange-400 border-orange-500/30\">\n                  16h\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-emerald-500/30 backdrop-blur-sm\">\n          <CardHeader>\n            <div className=\"flex items-center space-x-3\">\n              <PieChart className=\"h-6 w-6 text-emerald-400\" />\n              <div>\n                <CardTitle className=\"text-emerald-400\">Reward Distribution</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  How rewards are allocated across roles\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-300\">Analyst Rewards</span>\n                <span className=\"text-cyan-400 font-semibold\">70%</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-300\">Staking Rewards</span>\n                <span className=\"text-green-400 font-semibold\">20%</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-300\">Certifier Rewards</span>\n                <span className=\"text-purple-400 font-semibold\">8%</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-300\">Platform Fee</span>\n                <span className=\"text-orange-400 font-semibold\">2%</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Staking Interface */}\n      <Card className=\"bg-slate-800/50 border-yellow-500/30 backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-lg\">\n              <Target className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-yellow-400\">Stake IOTA Tokens</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Stake IOTA tokens to participate in the dSOC ecosystem and earn rewards\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"bg-yellow-900/20 border border-yellow-600/30 rounded-lg p-4\">\n            <div className=\"flex items-start gap-3\">\n              <Star className=\"h-5 w-5 text-yellow-400 mt-0.5\" />\n              <div>\n                <h4 className=\"text-yellow-400 font-semibold mb-1\">Staking Benefits</h4>\n                <ul className=\"text-sm text-gray-300 space-y-1\">\n                  <li>• Submit security incident tickets</li>\n                  <li>• Participate in the analysis marketplace</li>\n                  <li>• Earn CLT rewards for quality contributions</li>\n                  <li>• Higher stakes unlock premium features</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"stake\" className=\"text-gray-300 flex items-center gap-2\">\n                  <Wallet className=\"h-4 w-4 text-yellow-400\" />\n                  Stake Amount (IOTA)\n                </Label>\n                <Input\n                  id=\"stake\"\n                  type=\"number\"\n                  value={stakeAmount}\n                  onChange={(e) => setStakeAmount(e.target.value)}\n                  min=\"1\"\n                  className=\"bg-slate-700/50 border-gray-600 text-white focus:border-yellow-400\"\n                  placeholder=\"Enter amount to stake\"\n                />\n              </div>\n\n              <Button\n                onClick={handleStakeTokens}\n                disabled={!stakeAmount || isStaking}\n                className=\"w-full bg-gradient-to-r from-yellow-600 to-yellow-700 hover:from-yellow-700 hover:to-yellow-800 text-white font-semibold py-3\"\n              >\n                {isStaking ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                    Staking Tokens...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <ArrowUpCircle className=\"h-4 w-4\" />\n                    Stake {stakeAmount} IOTA\n                  </div>\n                )}\n              </Button>\n            </div>\n\n            <div className=\"bg-slate-700/30 rounded-lg p-4\">\n              <h4 className=\"text-gray-300 font-medium mb-3\">Staking Summary</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Current Balance:</span>\n                  <span className=\"text-white\">{userStats?.stake_balance || 0} IOTA</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">New Stake:</span>\n                  <span className=\"text-yellow-400\">+{stakeAmount || 0} IOTA</span>\n                </div>\n                <hr className=\"border-gray-600\" />\n                <div className=\"flex justify-between font-medium\">\n                  <span className=\"text-gray-300\">Total After:</span>\n                  <span className=\"text-white\">{(userStats?.stake_balance || 0) + parseInt(stakeAmount || \"0\")} IOTA</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transaction History */}\n      <Card className=\"bg-slate-800/50 border-gray-600/30 backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-gradient-to-r from-gray-500 to-gray-600 rounded-lg\">\n                <History className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-gray-300\">Transaction History</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Your recent staking and reward transactions\n                </CardDescription>\n              </div>\n            </div>\n            <Badge className=\"bg-gray-500/20 text-gray-400 border-gray-500/30\">\n              {transactions.length} transactions\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {transactions.length > 0 ? (\n            <div className=\"space-y-3\">\n              {transactions.slice(0, 10).map((tx) => (\n                <div key={tx.id} className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    {getTransactionIcon(tx.transaction_type)}\n                    <div>\n                      <p className=\"text-white text-sm font-medium\">\n                        {tx.transaction_type.replace('_', ' ')}\n                      </p>\n                      <p className=\"text-gray-400 text-xs\">\n                        {new Date(tx.created_at).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`text-sm font-medium ${getTransactionColor(tx.transaction_type)}`}>\n                      {tx.transaction_type === 'CREATE_TICKET' ? '-' : '+'}{tx.amount || 0} \n                      {tx.transaction_type === 'REWARD' ? ' CLT' : ' IOTA'}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      {tx.status}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <History className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-300 mb-2\">No transactions yet</h3>\n              <p className=\"text-gray-400\">Start staking to see your transaction history here</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":22232},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1577},"client/src/components/TicketForm.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Label } from \"./ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"./ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrentAccount, useIotaClient, useSignTransaction } from \"@iota/dapp-kit\";\nimport { createContractService, CONTRACT_PACKAGE_ID } from \"@/lib/contract\";\nimport { supabaseService } from \"@/lib/supabase\";\nimport { Upload, Hash, Shield, AlertTriangle, FileText, Coins } from \"lucide-react\";\n\n// Dummy store ID - in production this would be from contract initialization\nconst TICKET_STORE_ID = \"0x1234567890abcdef1234567890abcdef12345678\";\n\ninterface TicketFormProps {\n  onTicketSubmitted?: () => void;\n}\n\nexport default function TicketForm({ onTicketSubmitted }: TicketFormProps) {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [evidenceFile, setEvidenceFile] = useState<File | null>(null);\n  const [stakeAmount, setStakeAmount] = useState(\"1000\"); // Default stake amount\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const account = useCurrentAccount();\n  const client = useIotaClient();\n  const { mutate: signTransaction } = useSignTransaction();\n  const { toast } = useToast();\n  \n\n\n  const categories = [\n    \"Malware Detection\",\n    \"Phishing Attack\",\n    \"Data Breach\",\n    \"DDoS Attack\",\n    \"Insider Threat\",\n    \"Network Intrusion\",\n    \"Social Engineering\",\n    \"Ransomware\",\n    \"Other\"\n  ];\n\n  const hashFile = async (file: File): Promise<string> => {\n    const buffer = await file.arrayBuffer();\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!account) {\n      toast({\n        title: \"Error\",\n        description: \"Please connect your wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!title || !description || !category || !evidenceFile) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields and upload evidence\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Hash the evidence file\n      const evidenceHash = await hashFile(evidenceFile);\n\n      // Create contract service\n      const contractService = createContractService(client);\n\n      // Create transaction\n      const transaction = await contractService.createTicket(\n        TICKET_STORE_ID,\n        evidenceHash,\n        title,\n        description,\n        category,\n        parseInt(stakeAmount),\n        account.address\n      );\n\n      // Sign and submit transaction\n      signTransaction(\n        { transaction },\n        {\n          onSuccess: async (result) => {\n            try {\n              // Save ticket to Supabase database\n              const ticketData = {\n                ticket_id: Date.now(), // Temporary ID, should get from blockchain\n                client_address: account.address,\n                title,\n                description,\n                category,\n                evidence_hash: evidenceHash,\n                status: 0, // STATUS_OPEN\n                stake_amount: parseInt(stakeAmount),\n                transaction_hash: result.digest\n              };\n\n              await supabaseService.createTicket(ticketData);\n\n              // Create transaction record\n              await supabaseService.createTransaction({\n                ticket_id: ticketData.ticket_id,\n                from_address: account.address,\n                transaction_hash: result.digest,\n                transaction_type: 'CREATE_TICKET',\n                amount: parseInt(stakeAmount),\n                status: 'completed'\n              });\n\n              toast({\n                title: \"Success!\",\n                description: \"Ticket submitted successfully to the blockchain and database\",\n              });\n\n              // Reset form\n              setTitle(\"\");\n              setDescription(\"\");\n              setCategory(\"\");\n              setEvidenceFile(null);\n              setStakeAmount(\"100\");\n\n              onTicketSubmitted?.();\n            } catch (dbError) {\n              console.error('Database error:', dbError);\n              toast({\n                title: \"Warning\",\n                description: \"Ticket submitted to blockchain but failed to save to database\",\n                variant: \"destructive\",\n              });\n            }\n          },\n          onError: (error) => {\n            console.error('Transaction failed:', error);\n            toast({\n              title: \"Error\",\n              description: \"Failed to submit ticket. Please try again.\",\n              variant: \"destructive\",\n            });\n          },\n        }\n      );\n\n    } catch (error) {\n      console.error('Error submitting ticket:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to process ticket submission\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm\">\n      <CardHeader>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg\">\n            <Shield className=\"h-6 w-6 text-white\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-purple-400\">Submit Security Incident</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Report a cybersecurity incident for professional analysis\n            </CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Stake Amount */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"stake\" className=\"text-gray-300 flex items-center gap-2\">\n              <Coins className=\"h-4 w-4 text-yellow-400\" />\n              Stake Amount (IOTA)\n            </Label>\n            <Input\n              id=\"stake\"\n              type=\"number\"\n              value={stakeAmount}\n              onChange={(e) => setStakeAmount(e.target.value)}\n              min=\"1\"\n              className=\"bg-slate-700/50 border-gray-600 text-white focus:border-purple-400\"\n              placeholder=\"Enter stake amount\"\n            />\n            <p className=\"text-sm text-gray-500\">\n              Stake tokens to incentivize quality analysis. Refunded if report is rejected.\n            </p>\n          </div>\n\n          {/* Title */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\" className=\"text-gray-300\">Incident Title</Label>\n            <Input\n              id=\"title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              className=\"bg-slate-700/50 border-gray-600 text-white focus:border-purple-400\"\n              placeholder=\"Brief description of the incident\"\n            />\n          </div>\n\n          {/* Category */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"category\" className=\"text-gray-300\">Incident Category</Label>\n            <Select value={category} onValueChange={setCategory}>\n              <SelectTrigger className=\"bg-slate-700/50 border-gray-600 text-white focus:border-purple-400\">\n                <SelectValue placeholder=\"Select incident type\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-slate-800 border-gray-600\">\n                {categories.map((cat) => (\n                  <SelectItem key={cat} value={cat} className=\"text-white hover:bg-slate-700\">\n                    {cat}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\" className=\"text-gray-300\">Detailed Description</Label>\n            <Textarea\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              rows={4}\n              className=\"bg-slate-700/50 border-gray-600 text-white focus:border-purple-400\"\n              placeholder=\"Provide detailed information about the incident...\"\n            />\n          </div>\n\n          {/* Evidence Upload */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"evidence\" className=\"text-gray-300 flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              Evidence File\n            </Label>\n            <div className=\"border-2 border-dashed border-gray-600 rounded-lg p-6 hover:border-purple-400 transition-colors\">\n              <input\n                type=\"file\"\n                id=\"evidence\"\n                onChange={(e) => setEvidenceFile(e.target.files?.[0] || null)}\n                className=\"hidden\"\n                accept=\".pdf,.png,.jpg,.jpeg,.txt,.log\"\n              />\n              <label htmlFor=\"evidence\" className=\"cursor-pointer\">\n                <div className=\"text-center\">\n                  <Upload className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-300 mb-2\">\n                    {evidenceFile ? evidenceFile.name : \"Click to upload evidence\"}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    PDF, images, text files, or log files\n                  </p>\n                </div>\n              </label>\n            </div>\n            {evidenceFile && (\n              <div className=\"flex items-center gap-2 text-sm text-green-400\">\n                <Hash className=\"h-4 w-4\" />\n                File will be cryptographically hashed for integrity verification\n              </div>\n            )}\n          </div>\n\n          {/* Security Notice */}\n          <div className=\"bg-yellow-900/20 border border-yellow-600/30 rounded-lg p-4\">\n            <div className=\"flex items-start gap-3\">\n              <AlertTriangle className=\"h-5 w-5 text-yellow-400 mt-0.5\" />\n              <div>\n                <h4 className=\"text-yellow-400 font-semibold mb-1\">Security Notice</h4>\n                <p className=\"text-sm text-gray-300\">\n                  Your evidence will be cryptographically hashed and stored on IOTA blockchain.\n                  The file content remains private, only the hash is publicly verifiable.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"w-full bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white font-semibold py-3 rounded-lg transition-all duration-300\"\n          >\n            {isSubmitting ? (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                Submitting to Blockchain...\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"h-4 w-4\" />\n                Submit Incident Report\n              </div>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11758},"client/src/components/TicketList.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Input } from \"./ui/input\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Label } from \"./ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  useCurrentAccount,\n  useIotaClient,\n  useSignTransaction,\n} from \"@iota/dapp-kit\";\nimport {\n  createContractService,\n  TICKET_STATUS,\n  TICKET_STATUS_LABELS,\n} from \"@/lib/contract\";\nimport { DbTicket, supabaseService } from \"@/lib/supabase\";\nimport {\n  Search,\n  Eye,\n  CheckCircle,\n  XCircle,\n  Clock,\n  User,\n  Hash,\n  Coins,\n  FileText,\n  AlertTriangle,\n  Award,\n  Shield,\n} from \"lucide-react\";\n// Mock data - inline to avoid import issues\nconst mockTickets = [\n  {\n    id: \"1\",\n    ticket_id: 1001,\n    client_address: \"0x742d35Cc6634C0532925a3b8D0B9e1d2\",\n    analyst_address: \"0x8ba1f109551bD432803012645Hac136c\",\n    title: \"Uniswap V3 Flash Loan Exploit\",\n    description: \"Critical vulnerability in price oracle manipulation\",\n    category: \"DeFi Protocol\",\n    blockchain: \"Ethereum\",\n    severity: \"Critical\",\n    evidence_hash: \"QmX4f3g7h8i9j0k1l2m3n4o5p6q7r8s9t0u\",\n    status: 3,\n    stake_amount: 50000,\n    loss_amount: \"$2.1M\",\n    created_at: \"2024-01-15T10:30:00Z\"\n  },\n  {\n    id: \"2\", \n    ticket_id: 1002,\n    client_address: \"0x742d35Cc6634C0532925a3b8D0B9e1d2\",\n    title: \"Cross-chain Bridge Vulnerability\",\n    description: \"Signature verification bypass in multi-sig bridge\",\n    category: \"Bridge Security\",\n    blockchain: \"Polygon\",\n    severity: \"High\",\n    status: 1,\n    stake_amount: 35000,\n    loss_amount: \"$890K\",\n    created_at: \"2024-01-16T14:20:00Z\"\n  }\n];\n\n// Dummy store ID - in production this would be from contract initialization\nconst TICKET_STORE_ID = \"0x1234567890abcdef1234567890abcdef12345678\";\n\ninterface TicketListProps {\n  userRole: string;\n}\n\nexport default function TicketList({ userRole }: TicketListProps) {\n  const [tickets, setTickets] = useState<DbTicket[]>([]);\n  const [filteredTickets, setFilteredTickets] = useState<DbTicket[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTicket, setSelectedTicket] = useState<DbTicket | null>(null);\n  const [reportText, setReportText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const account = useCurrentAccount();\n  const client = useIotaClient();\n  const { mutate: signTransaction } = useSignTransaction();\n  const { toast } = useToast();\n\n  const loadTickets = async () => {\n    if (!account) return;\n\n    try {\n      setIsLoading(true);\n\n      // Filter tickets based on user role and address\n      let userTickets: DbTicket[] = [];\n\n      if (userRole === \"client\") {\n        // Client sees only their submitted tickets\n        userTickets = mockTickets.filter(\n          (ticket) => ticket.client_address === account.address,\n        );\n      } else if (userRole === \"analyst\") {\n        // Analyst sees open tickets and their assigned tickets\n        userTickets = mockTickets.filter(\n          (ticket) =>\n            ticket.status === 0 || ticket.analyst_address === account.address,\n        );\n      } else if (userRole === \"certifier\") {\n        // Certifier sees tickets that need certification (status 2 and above)\n        userTickets = mockTickets.filter((ticket) => ticket.status >= 2);\n      }\n\n      setTickets(userTickets);\n      setFilteredTickets(userTickets);\n    } catch (error: any) {\n      toast({\n        title: \"Error Loading Tickets\",\n        description: error.message || \"Failed to load tickets\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmitReport = async (ticket: DbTicket) => {\n    if (!account || !reportText) return;\n\n    try {\n      setIsSubmitting(true);\n      const reportHash = await crypto.subtle\n        .digest(\"SHA-256\", new TextEncoder().encode(reportText))\n        .then((hash) =>\n          Array.from(new Uint8Array(hash))\n            .map((b) => b.toString(16).padStart(2, \"0\"))\n            .join(\"\"),\n        );\n\n      const contractService = createContractService(client);\n      const transaction = await contractService.submitReport(\n        TICKET_STORE_ID,\n        ticket.ticket_id,\n        reportHash,\n      );\n\n      signTransaction(\n        { transaction },\n        {\n          onSuccess: () => {\n            toast({\n              title: \"Success!\",\n              description: \"Report submitted successfully\",\n            });\n            setSelectedTicket(null);\n            setReportText(\"\");\n            loadTickets();\n          },\n          onError: (error) => {\n            console.error(\"Transaction failed:\", error);\n            toast({\n              title: \"Error\",\n              description: \"Failed to submit report\",\n              variant: \"destructive\",\n            });\n          },\n        },\n      );\n    } catch (error: any) {\n      toast({\n        title: \"Error Submitting Report\",\n        description: error.message || \"Failed to submit report\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleValidateReport = async (ticketId: number, approved: boolean) => {\n    if (!account) return;\n\n    try {\n      setIsSubmitting(true);\n      const contractService = createContractService(client);\n      const tx = await contractService.validateTicket(ticketId, approved);\n      await signTransaction(tx);\n\n      toast({\n        title: \"Report Validated\",\n        description: approved\n          ? \"The investigation report has been approved and rewards distributed.\"\n          : \"The investigation report has been rejected and stakes returned.\",\n      });\n\n      loadTickets();\n    } catch (error: any) {\n      toast({\n        title: \"Error Validating Report\",\n        description: error.message || \"Failed to validate report\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTickets();\n  }, [account, userRole]);\n\n  // Filter tickets based on search term\n  useEffect(() => {\n    if (!searchTerm) {\n      setFilteredTickets(tickets);\n    } else {\n      setFilteredTickets(\n        tickets.filter(\n          (ticket) =>\n            ticket.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            ticket.description\n              .toLowerCase()\n              .includes(searchTerm.toLowerCase()) ||\n            ticket.category.toLowerCase().includes(searchTerm.toLowerCase()),\n        ),\n      );\n    }\n  }, [searchTerm, tickets]);\n\n  const getStatusColor = (status: number) => {\n    switch (status) {\n      case TICKET_STATUS.OPEN:\n        return \"bg-blue-500/20 text-blue-400 border-blue-500/30\";\n      case TICKET_STATUS.CLAIMED:\n        return \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\";\n      case TICKET_STATUS.SUBMITTED:\n        return \"bg-purple-500/20 text-purple-400 border-purple-500/30\";\n      case TICKET_STATUS.APPROVED:\n        return \"bg-green-500/20 text-green-400 border-green-500/30\";\n      case TICKET_STATUS.REJECTED:\n        return \"bg-red-500/20 text-red-400 border-red-500/30\";\n      default:\n        return \"bg-gray-500/20 text-gray-400 border-gray-500/30\";\n    }\n  };\n\n  const getStatusIcon = (status: number) => {\n    switch (status) {\n      case TICKET_STATUS.OPEN:\n        return <Clock className=\"h-4 w-4\" />;\n      case TICKET_STATUS.CLAIMED:\n        return <User className=\"h-4 w-4\" />;\n      case TICKET_STATUS.SUBMITTED:\n        return <FileText className=\"h-4 w-4\" />;\n      case TICKET_STATUS.APPROVED:\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case TICKET_STATUS.REJECTED:\n        return <XCircle className=\"h-4 w-4\" />;\n      default:\n        return <AlertTriangle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const handleClaimTicket = async (ticket: DbTicket) => {\n    if (!account) return;\n\n    try {\n      setIsSubmitting(true);\n      const contractService = createContractService(client);\n\n      const transaction = await contractService.assignAnalyst(\n        TICKET_STORE_ID,\n        ticket.ticket_id,\n      );\n\n      signTransaction(\n        { transaction },\n        {\n          onSuccess: () => {\n            toast({\n              title: \"Success!\",\n              description: \"Ticket claimed successfully\",\n            });\n            loadTickets();\n          },\n          onError: (error) => {\n            console.error(\"Transaction failed:\", error);\n            toast({\n              title: \"Error\",\n              description: \"Failed to claim ticket\",\n              variant: \"destructive\",\n            });\n          },\n        },\n      );\n    } catch (error) {\n      console.error(\"Error claiming ticket:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to claim ticket\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleValidateTicket = async (ticket: DbTicket, approved: boolean) => {\n    if (!account) return;\n\n    try {\n      setIsSubmitting(true);\n      const contractService = createContractService(client);\n\n      const transaction = await contractService.validateTicket(\n        TICKET_STORE_ID,\n        ticket.ticket_id,\n        approved,\n      );\n\n      signTransaction(\n        { transaction },\n        {\n          onSuccess: () => {\n            toast({\n              title: \"Success!\",\n              description: `Ticket ${approved ? \"approved\" : \"rejected\"} successfully`,\n            });\n            loadTickets();\n          },\n          onError: (error) => {\n            console.error(\"Transaction failed:\", error);\n            toast({\n              title: \"Error\",\n              description: \"Failed to validate ticket\",\n              variant: \"destructive\",\n            });\n          },\n        },\n      );\n    } catch (error) {\n      console.error(\"Error validating ticket:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to validate ticket\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-8 h-8 border-2 border-purple-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-400\">Loading tickets...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search Bar */}\n      <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg\">\n                <FileText className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-purple-400\">\n                  Security Tickets\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  {userRole === \"client\" && \"Your submitted incident reports\"}\n                  {userRole === \"analyst\" && \"Available tickets for analysis\"}\n                  {userRole === \"certifier\" && \"Tickets awaiting certification\"}\n                </CardDescription>\n              </div>\n            </div>\n            <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">\n              {filteredTickets.length} tickets\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search tickets by title, category, or description...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 bg-slate-700/50 border-gray-600 text-white focus:border-purple-400\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tickets Grid */}\n      <div className=\"grid gap-6\">\n        {filteredTickets.map((ticket) => (\n          <Card\n            key={ticket.id}\n            className=\"bg-slate-800/50 border-gray-600/30 backdrop-blur-sm hover:border-purple-500/50 transition-all duration-300\"\n          >\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-3\">\n                    <h3 className=\"text-lg font-semibold text-white\">\n                      {ticket.title}\n                    </h3>\n                    <Badge className={getStatusColor(ticket.status)}>\n                      <div className=\"flex items-center gap-1\">\n                        {getStatusIcon(ticket.status)}\n                        {TICKET_STATUS_LABELS[ticket.status]}\n                      </div>\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                      {ticket.category} • {ticket.blockchain}\n                    </p>\n                    <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                      <span className=\"flex items-center gap-1\">\n                        <Coins className=\"h-4 w-4 text-yellow-400\" />\n                        {ticket.stake_amount.toLocaleString()} CLT\n                      </span>\n                      <span className=\"flex items-center gap-1 text-red-400\">\n                        <AlertTriangle className=\"h-4 w-4\" />\n                        {ticket.loss_amount}\n                      </span>\n                      <span className=\"flex items-center gap-1\">\n                        <Hash className=\"h-4 w-4\" />#{ticket.ticket_id}\n                      </span>\n                      <Badge className={`text-xs ${\n                        ticket.severity === 'Critical' ? 'bg-red-500/20 text-red-300 border-red-500/30' :\n                        ticket.severity === 'High' ? 'bg-orange-500/20 text-orange-300 border-orange-500/30' :\n                        ticket.severity === 'Medium' ? 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30' :\n                        'bg-blue-500/20 text-blue-300 border-blue-500/30'\n                      }`}>\n                        {ticket.severity}\n                      </Badge>\n                    </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() =>\n                      setSelectedTicket(\n                        selectedTicket?.id === ticket.id ? null : ticket,\n                      )\n                    }\n                    className=\"border-gray-600 text-gray-300 hover:bg-slate-700\"\n                  >\n                    <Eye className=\"h-4 w-4 mr-1\" />\n                    {selectedTicket?.id === ticket.id ? \"Hide\" : \"View\"}\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n\n            {selectedTicket?.id === ticket.id && (\n              <CardContent className=\"border-t border-gray-700/50 pt-6\">\n                <div className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-300 mb-2 flex items-center gap-2\">\n                      <FileText className=\"h-4 w-4\" />\n                      Incident Description\n                    </h4>\n                    <p className=\"text-gray-300 text-sm leading-relaxed bg-slate-700/30 p-3 rounded-lg\">\n                      {ticket.description}\n                    </p>\n                  </div>\n\n                  {/* Attack Details */}\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-gray-300 flex items-center gap-2\">\n                        <AlertTriangle className=\"h-4 w-4 text-orange-400\" />\n                        Attack Vector\n                      </h4>\n                      <Badge className=\"bg-orange-500/20 text-orange-300 border-orange-500/30\">\n                        {ticket.attack_vector || \"Multi-vector Attack\"}\n                      </Badge>\n                      \n                      <h4 className=\"font-medium text-gray-300 mt-4 flex items-center gap-2\">\n                        <Shield className=\"h-4 w-4 text-blue-400\" />\n                        Affected Protocols\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {(ticket.affected_protocols || [ticket.category]).map((protocol: string, idx: number) => (\n                          <Badge key={idx} className=\"bg-blue-500/20 text-blue-300 border-blue-500/30 text-xs\">\n                            {protocol}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-gray-300 flex items-center gap-2\">\n                        <Coins className=\"h-4 w-4 text-red-400\" />\n                        Financial Impact\n                      </h4>\n                      <div className=\"bg-red-500/10 border border-red-500/30 rounded-lg p-3\">\n                        <p className=\"text-red-400 font-bold text-lg\">{ticket.loss_amount}</p>\n                        <p className=\"text-red-300 text-sm\">Total losses reported</p>\n                      </div>\n                      \n                      <h4 className=\"font-medium text-gray-300 mt-4\">Timeline</h4>\n                      <p className=\"text-gray-400 text-sm\">\n                        Reported: {new Date(ticket.created_at).toLocaleString()}\n                      </p>\n                      {ticket.updated_at !== ticket.created_at && (\n                        <p className=\"text-gray-400 text-sm\">\n                          Updated: {new Date(ticket.updated_at).toLocaleString()}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Technical Details */}\n                  <div className=\"bg-slate-700/30 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-gray-300 mb-3 flex items-center gap-2\">\n                      <Hash className=\"h-4 w-4\" />\n                      Technical Evidence\n                    </h4>\n                    <div className=\"grid md:grid-cols-2 gap-4 text-xs\">\n                      <div>\n                        <p className=\"text-gray-400 mb-1\">Evidence Hash:</p>\n                        <code className=\"text-green-400 font-mono break-all bg-slate-800/50 p-2 rounded block\">\n                          {ticket.evidence_hash}\n                        </code>\n                      </div>\n                      {ticket.report_hash && (\n                        <div>\n                          <p className=\"text-gray-400 mb-1\">Analysis Report Hash:</p>\n                          <code className=\"text-purple-400 font-mono break-all bg-slate-800/50 p-2 rounded block\">\n                            {ticket.report_hash}\n                          </code>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Investigation Status */}\n                  <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-blue-300 mb-2 flex items-center gap-2\">\n                      <Eye className=\"h-4 w-4\" />\n                      Investigation Status\n                    </h4>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-blue-200\">\n                          Status: {TICKET_STATUS_LABELS[ticket.status]}\n                        </p>\n                        {ticket.analyst_address && (\n                          <p className=\"text-blue-300 text-sm\">\n                            Analyst: {ticket.analyst_address.slice(0, 8)}...{ticket.analyst_address.slice(-6)}\n                          </p>\n                        )}\n                      </div>\n                      <Badge className={getStatusColor(ticket.status)}>\n                        <div className=\"flex items-center gap-1\">\n                          {getStatusIcon(ticket.status)}\n                          Progress: {Math.min(((ticket.status + 1) / 4) * 100, 100)}%\n                        </div>\n                      </Badge>\n                    </div>\n                  </div>\n\n                  {/* Role-specific actions */}\n                  {userRole === \"analyst\" &&\n                    ticket.status === TICKET_STATUS.OPEN && (\n                      <div className=\"flex justify-end\">\n                        <Button\n                          onClick={() => handleClaimTicket(ticket)}\n                          disabled={isSubmitting}\n                          className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800\"\n                        >\n                          {isSubmitting ? (\n                            <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2\" />\n                          ) : (\n                            <Shield className=\"h-4 w-4 mr-2\" />\n                          )}\n                          Claim Ticket\n                        </Button>\n                      </div>\n                    )}\n\n                  {userRole === \"analyst\" &&\n                    ticket.status === TICKET_STATUS.CLAIMED &&\n                    ticket.analyst_address === account?.address && (\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"report\" className=\"text-gray-300\">\n                            Analysis Report\n                          </Label>\n                          <Textarea\n                            id=\"report\"\n                            value={reportText}\n                            onChange={(e) => setReportText(e.target.value)}\n                            rows={4}\n                            className=\"bg-slate-700/50 border-gray-600 text-white focus:border-purple-400\"\n                            placeholder=\"Enter your detailed analysis and recommendations...\"\n                          />\n                        </div>\n                        <div className=\"flex justify-end\">\n                          <Button\n                            onClick={() => handleSubmitReport(ticket)}\n                            disabled={!reportText.trim() || isSubmitting}\n                            className=\"bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800\"\n                          >\n                            {isSubmitting ? (\n                              <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2\" />\n                            ) : (\n                              <FileText className=\"h-4 w-4 mr-2\" />\n                            )}\n                            Submit Report\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n\n                  {userRole === \"client\" &&\n                    ticket.status === TICKET_STATUS.SUBMITTED &&\n                    ticket.client_address === account?.address && (\n                      <div className=\"flex justify-end gap-3\">\n                        <Button\n                          onClick={() => handleValidateTicket(ticket, false)}\n                          disabled={isSubmitting}\n                          variant=\"outline\"\n                          className=\"border-red-600 text-red-400 hover:bg-red-600/10\"\n                        >\n                          {isSubmitting ? (\n                            <div className=\"w-4 h-4 border-2 border-red-400/30 border-t-red-400 rounded-full animate-spin mr-2\" />\n                          ) : (\n                            <XCircle className=\"h-4 w-4 mr-2\" />\n                          )}\n                          Reject\n                        </Button>\n                        <Button\n                          onClick={() => handleValidateTicket(ticket, true)}\n                          disabled={isSubmitting}\n                          className=\"bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800\"\n                        >\n                          {isSubmitting ? (\n                            <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2\" />\n                          ) : (\n                            <Award className=\"h-4 w-4 mr-2\" />\n                          )}\n                          Approve & Reward\n                        </Button>\n                      </div>\n                    )}\n                </div>\n              </CardContent>\n            )}\n            {/* analyst actions */}\n            {userRole === \"analyst\" && ticket.status === 0 && (\n              <Button\n                size=\"sm\"\n                className=\"bg-cyan-600 hover:bg-cyan-700\"\n                onClick={() => handleClaimTicket(ticket.ticket_id)}\n              >\n                Assign Self\n              </Button>\n            )}\n\n            {userRole === \"analyst\" &&\n              ticket.status === 1 &&\n              ticket.analyst === account?.address && (\n                <Button\n                  size=\"sm\"\n                  className=\"bg-green-600 hover:bg-green-700\"\n                  onClick={() => handleSubmitReport(ticket.ticket_id)}\n                >\n                  Submit Report\n                </Button>\n              )}\n\n            {userRole === \"client\" &&\n              ticket.status === 2 &&\n              ticket.client === account?.address && (\n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    className=\"bg-green-600 hover:bg-green-700\"\n                    onClick={() => handleValidateTicket(ticket.ticket_id, true)}\n                  >\n                    Approve\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={() =>\n                      handleValidateTicket(ticket.ticket_id, false)\n                    }\n                  >\n                    Reject\n                  </Button>\n                </div>\n              )}\n          </Card>\n        ))}\n\n        {filteredTickets.length === 0 && (\n          <Card className=\"bg-slate-800/50 border-gray-600/30 backdrop-blur-sm\">\n            <CardContent className=\"p-8 text-center\">\n              <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-300 mb-2\">\n                No tickets found\n              </h3>\n              <p className=\"text-gray-400\">\n                {searchTerm\n                  ? \"Try adjusting your search terms\"\n                  : userRole === \"client\"\n                    ? \"Submit your first incident report to get started\"\n                    : \"No tickets available for analysis at the moment\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":27795},"client/src/components/TicketStoreManager.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrentAccount, useIotaClient, useSignTransaction } from \"@iota/dapp-kit\";\nimport { Transaction } from \"@iota/iota-sdk/transactions\";\nimport { CONTRACT_PACKAGE_ID, MODULE_NAME } from \"@/lib/contract\";\nimport { Database, Plus, CheckCircle, AlertTriangle } from \"lucide-react\";\n\ninterface TicketStoreManagerProps {\n  onStoreReady: (storeId: string) => void;\n}\n\nexport default function TicketStoreManager({ onStoreReady }: TicketStoreManagerProps) {\n  const [storeId, setStoreId] = useState<string>(\"\");\n  const [isCreating, setIsCreating] = useState(false);\n  const [hasStore, setHasStore] = useState(false);\n\n  const account = useCurrentAccount();\n  const client = useIotaClient();\n  const { mutate: signTransaction } = useSignTransaction();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Check if user already has a ticket store\n    checkExistingStore();\n  }, [account]);\n\n  const checkExistingStore = async () => {\n    if (!account) return;\n\n    try {\n      // Query blockchain for existing TicketStore objects\n      const objects = await client.getOwnedObjects({\n        owner: account.address,\n        filter: {\n          StructType: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::TicketStore`\n        }\n      });\n\n      if (objects.data && objects.data.length > 0) {\n        const existingStoreId = objects.data[0].data?.objectId;\n        if (existingStoreId) {\n          setStoreId(existingStoreId);\n          setHasStore(true);\n          onStoreReady(existingStoreId);\n        }\n      }\n    } catch (error) {\n      console.error('Error checking existing store:', error);\n    }\n  };\n\n  const createTicketStore = async () => {\n    if (!account) return;\n\n    setIsCreating(true);\n\n    try {\n      const tx = new Transaction();\n      \n      // Call the init function to create a new TicketStore\n      tx.moveCall({\n        target: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::init`,\n        arguments: [],\n      });\n\n      signTransaction(\n        { transaction: tx },\n        {\n          onSuccess: (result) => {\n            // In a real implementation, you would extract the store ID from the transaction result\n            // For demo purposes, we'll generate a mock store ID\n            const mockStoreId = `0x${Math.random().toString(16).slice(2, 42)}`;\n            \n            setStoreId(mockStoreId);\n            setHasStore(true);\n            \n            // Store in localStorage for demo\n            localStorage.setItem(`ticketStore_${account.address}`, mockStoreId);\n            \n            toast({\n              title: \"Success!\",\n              description: \"Ticket store created successfully\",\n            });\n\n            onStoreReady(mockStoreId);\n          },\n          onError: (error) => {\n            console.error('Transaction failed:', error);\n            toast({\n              title: \"Error\",\n              description: \"Failed to create ticket store\",\n              variant: \"destructive\",\n            });\n          },\n        }\n      );\n    } catch (error) {\n      console.error('Error creating ticket store:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create ticket store\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  if (hasStore) {\n    return (\n      <Card className=\"bg-slate-800/50 border-green-500/30 backdrop-blur-sm mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"h-5 w-5 text-green-400\" />\n            <div>\n              <p className=\"text-green-400 font-medium\">Ticket Store Active</p>\n              <p className=\"text-sm text-gray-400\">Store ID: {storeId.slice(0, 20)}...</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-slate-800/50 border-yellow-500/30 backdrop-blur-sm mb-6\">\n      <CardHeader>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-lg\">\n            <Database className=\"h-6 w-6 text-white\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-yellow-400\">Initialize Ticket Store</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Create your ticket management store on the blockchain\n            </CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"bg-yellow-900/20 border border-yellow-600/30 rounded-lg p-4\">\n            <div className=\"flex items-start gap-3\">\n              <AlertTriangle className=\"h-5 w-5 text-yellow-400 mt-0.5\" />\n              <div>\n                <h4 className=\"text-yellow-400 font-semibold mb-1\">Setup Required</h4>\n                <p className=\"text-sm text-gray-300\">\n                  You need to create a ticket store before you can submit or manage tickets. \n                  This is a one-time setup that deploys your personal ticket management contract.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <Button \n            onClick={createTicketStore}\n            disabled={isCreating}\n            className=\"w-full bg-gradient-to-r from-yellow-600 to-yellow-700 hover:from-yellow-700 hover:to-yellow-800 text-white font-semibold py-3 rounded-lg\"\n          >\n            {isCreating ? (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                Creating Store...\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Create Ticket Store\n              </div>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n","size_bytes":6136},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/ai-service.ts":{"content":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconsole.log(\"AI service initialized\");\n\n// Get API key from environment variable\nconst API_KEY = import.meta.env.VITE_GEMINI_API_KEY;\n\n/**\n * Get AI response for security-related queries\n */\nexport async function getAIResponse(prompt: string): Promise<string> {\n  try {\n    console.log(\"Getting AI response via backend API\");\n\n    const response = await fetch(\"/api/ai/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ question: prompt }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || \"Failed to get AI response\");\n    }\n\n    const data = await response.json();\n    console.log(\"AI response generated successfully\");\n    return data.response;\n  } catch (error) {\n    console.error(\"Error getting AI response:\", error);\n\n    // Return a helpful error message instead of throwing\n    return `I apologize, but I'm currently experiencing technical difficulties connecting to the AI service. \n\nPlease try again in a moment, or feel free to ask specific questions about:\n\n• Smart contract security best practices\n• Common vulnerability patterns\n• Security audit methodologies\n• Blockchain security frameworks\n• Penetration testing approaches\n• Incident response procedures\n\nError details: ${error instanceof Error ? error.message : \"Unknown error occurred\"}`;\n  }\n}\n\n/**\n * Generate demo response when API is not available\n */\nfunction generateDemoResponse(prompt: string): string {\n  const demoResponses = {\n    audit: `**Security Analysis Report**\n\n**Executive Summary:**\nBased on your query about \"${prompt}\", here are key security considerations:\n\n**Key Recommendations:**\n• Implement input validation and sanitization\n• Use secure coding practices\n• Regular security testing and code reviews\n• Follow principle of least privilege\n• Implement proper error handling\n\n**Best Practices:**\n• Keep dependencies updated\n• Use established security frameworks\n• Document security measures\n• Regular penetration testing\n• Security awareness training\n\n*Note: This is a demo response. Connect with a live AI service for detailed analysis.*`,\n\n    general: `**Cybersecurity Advisory**\n\nRegarding your question: \"${prompt}\"\n\n**Security Framework Approach:**\n• Identify assets and threats\n• Assess vulnerabilities and risks\n• Implement appropriate controls\n• Monitor and maintain security posture\n\n**Common Security Measures:**\n• Multi-factor authentication\n• Network segmentation\n• Regular backups and recovery testing\n• Incident response planning\n• Security monitoring and logging\n\n**Next Steps:**\n• Conduct risk assessment\n• Develop security policies\n• Implement technical controls\n• Train personnel\n• Regular security reviews\n\n*Note: This is a demo response. For comprehensive analysis, please ensure AI service is properly configured.*`,\n  };\n\n  if (\n    prompt.toLowerCase().includes(\"audit\") ||\n    prompt.toLowerCase().includes(\"contract\")\n  ) {\n    return demoResponses.audit;\n  }\n\n  return demoResponses.general;\n}\n\nclass AIAssistantService {\n  async getSecurityNews(): Promise<string> {\n    try {\n      const response = await fetch(\"/api/ai/security-news\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to get security news\");\n      }\n\n      const data = await response.json();\n      return data.response;\n    } catch (error) {\n      console.error(\"Error fetching security news:\", error);\n      return `# Security Intelligence Update (Offline Mode)\n\n## ⚠️ AI Service Temporarily Unavailable\n\nI'm currently unable to fetch real-time security intelligence due to a connectivity issue, but here's what I can share:\n\n## 🛡️ **General Security Priorities**\n• **Zero Trust Architecture**: Never trust, always verify\n• **Incident Response**: Have a plan and practice it regularly\n• **Threat Hunting**: Proactively search for indicators of compromise\n\n## 🚀 **dSOC Platform Advantages**\n• **Decentralized**: No single point of failure\n• **Transparent**: All analyses recorded on blockchain\n• **Incentivized**: Stake-based rewards for quality contributions\n• **Community-driven**: Leverages collective security expertise\n\n💡 **Pro Tip**: Regular security assessments and staying updated with threat intelligence are your best defenses against evolving cyber threats.\n\nI'll be back online soon with fresh intelligence!`;\n    }\n  }\n\n  async getChatResponse(question: string): Promise<string> {\n    return getAIResponse(question);\n  }\n\n  async askQuestion(question: string): Promise<string> {\n    return getAIResponse(question);\n  }\n\n  async analyzeVulnerability(description: string): Promise<string> {\n    try {\n      const response = await fetch(\"/api/ai/analyze-vulnerability\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ description }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to analyze vulnerability\");\n      }\n\n      const data = await response.json();\n      return data.response;\n    } catch (error) {\n      console.error(\"Error analyzing vulnerability:\", error);\n      return \"Unable to analyze vulnerability. Please ensure AI service is properly configured.\";\n    }\n  }\n\n  async runAudit(contractCode: string): Promise<string> {\n    try {\n      const response = await fetch(\"/api/ai/audit\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ contractCode }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to complete audit\");\n      }\n\n      const data = await response.json();\n      return data.response;\n    } catch (error) {\n      console.error(\"Error running audit:\", error);\n      return \"Unable to run audit. Please ensure AI service is properly configured.\";\n    }\n  }\n}\n\n/**\n * Run an AI-powered audit on the provided smart contract code\n *\n * @param contractCode The smart contract code to audit\n * @returns A detailed audit report as a string\n */\nexport async function runAudit(contractCode: string): Promise<string> {\n  if (!API_KEY) {\n    console.warn(\"Gemini API key is not configured, using demo mode\");\n    return generateDemoAuditReport(contractCode);\n  }\n\n  try {\n    console.log(\"Running AI audit with Google Gemini for Move smart contract\");\n\n    // Initialize the Google Generative AI with API key inside try block\n    const genAI = new GoogleGenerativeAI(API_KEY);\n\n    // Get the generative model (Gemini Pro)\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n    // Create a detailed prompt specifically for Move smart contract auditing\n    const prompt = `\n      You are an expert blockchain security auditor specializing in Move language (used in Sui blockchain).\n\n      Analyze the following Move smart contract code for vulnerabilities, security issues, and logical errors:\n\n      \\`\\`\\`move\n      ${contractCode}\n      \\`\\`\\`\n\n      Focus on Move-specific vulnerabilities including:\n      - Resource handling issues\n      - Ownership problems\n      - Capability misuse\n      - Type safety issues\n      - Module initialization flaws\n\n      Provide a detailed report with:\n        - Executive Summary (with vulnerability score from 0-10, where 0 is secure)\n        - Summary of Risks\n        - Detailed Findings\n        - Recommendations\n\n      Include the statement \"Certified by dSOC Platform\" as a certification stamp in your report.\n      Format using markdown with headers, bullet points, and code blocks for examples.\n    `;\n\n    // Generate content using the Gemini model\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const auditResult = response.text();\n\n    return auditResult;\n  } catch (error) {\n    console.error(\"AI audit error:\", error);\n    return generateDemoAuditReport(contractCode);\n  }\n}\n\nfunction generateDemoAuditReport(contractCode: string): string {\n  return `# Smart Contract Audit Report\n\n## Executive Summary\n**Vulnerability Score: 6/10** (Medium Risk)\n\nThis is a demo audit report. The actual AI-powered analysis requires a valid Gemini API key.\n\n## Demo Analysis\nThe provided contract code has been reviewed using static analysis patterns:\n\n\\`\\`\\`\n${contractCode.substring(0, 200)}...\n\\`\\`\\`\n\n## Recommendations\n1. Configure Gemini API key for full AI analysis\n2. Implement proper access controls\n3. Add comprehensive input validation\n4. Include proper error handling\n\n**Certified by dSOC Platform** ✅\n\n*This is a demo report. Configure the AI service for detailed analysis.*`;\n}\n\n// Export the assistant instance\nexport const aiAssistant = new AIAssistantService();\n\nexport async function analyzeSecurityIncident(\n  title: string,\n  description: string,\n  category: string,\n  evidenceHash?: string,\n): Promise<string> {\n  if (!API_KEY) {\n    return `\n## Manual Analysis Required\n\n**Incident:** ${title}\n**Category:** ${category}\n\n**Description:** ${description}\n\n**Note:** AI analysis is currently unavailable. Please configure the VITE_GEMINI_API_KEY environment variable to enable AI-powered analysis.\n\n**Manual Analysis Checklist:**\n1. **Severity Assessment** - Evaluate based on potential impact\n2. **Threat Classification** - Categorize the type of security threat\n3. **Potential Impact Analysis** - Assess business and technical impact\n4. **Recommended Immediate Actions** - Define containment steps\n5. **Long-term Mitigation Strategies** - Plan preventive measures\n6. **Additional Investigation Steps** - Outline further analysis needed\n    `;\n  }\n\n  try {\n    const genAI = new GoogleGenerativeAI(API_KEY);\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n\n    const prompt = `\nYou are a cybersecurity expert analyzing a security incident. Please provide a comprehensive analysis of the following incident:\n\nTitle: ${title}\nCategory: ${category}\nDescription: ${description}\n${evidenceHash ? `Evidence Hash: ${evidenceHash}` : \"\"}\n\nPlease provide:\n1. **Severity Assessment** (Critical/High/Medium/Low)\n2. **Threat Classification** \n3. **Potential Impact Analysis**\n4. **Recommended Immediate Actions**\n5. **Long-term Mitigation Strategies**\n6. **Additional Investigation Steps**\n\nFormat your response in clear sections with actionable recommendations.\n    `;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return response.text();\n  } catch (error) {\n    console.error(\"AI Analysis Error:\", error);\n    return \"Unable to generate AI analysis at this time. Please try again later.\";\n  }\n}\n","size_bytes":11061},"client/src/lib/audit-service.ts":{"content":"console.log('Audit service initialized');\n\n/**\n * Run an AI-powered audit on the provided smart contract code\n *\n * @param contractCode The smart contract code to audit\n * @returns A detailed audit report as a string\n */\nexport async function runAudit(contractCode: string): Promise<string> {\n  try {\n    console.log(\"Running AI audit via backend API\");\n\n    const response = await fetch(\"/api/ai/audit\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ contractCode }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || \"Failed to complete audit\");\n    }\n\n    const data = await response.json();\n    console.log(\"AI audit completed successfully\");\n    return data.response;\n\n  } catch (error) {\n    console.error(\"Error running AI audit:\", error);\n    return generateDemoAuditReport(contractCode);\n  }\n}\n\n/**\n * Generate a demo audit report when API is not available\n */\nfunction generateDemoAuditReport(contractCode: string): string {\n  return `# Smart Contract Audit Report\n\n## Executive Summary\n**Vulnerability Score:** 3/10 (Low Risk)\n\nThis is a **demo audit report** for the provided Move smart contract.\n\n## Code Analysis\n\n### 📝 **Contract Overview**\n- **Language:** Move\n- **Lines of Code:** ${contractCode.split('\\n').length}\n- **Complexity:** Medium\n\n### 🔍 **Security Findings**\n\n#### ✅ **Positive Aspects**\n• Move's resource safety prevents common vulnerabilities\n• Type system provides compile-time guarantees\n• No obvious critical security flaws detected\n\n#### ⚠️ **Areas for Improvement**\n• Add comprehensive input validation\n• Implement proper error handling\n• Consider gas optimization opportunities\n• Add detailed documentation\n\n### 🛡️ **Security Recommendations**\n\n#### **High Priority**\n• Implement access control mechanisms\n• Add event logging for critical operations\n• Validate all external inputs\n\n#### **Medium Priority**\n• Optimize gas usage patterns\n• Add comprehensive unit tests\n• Implement upgrade mechanisms safely\n\n#### **Low Priority**\n• Improve code documentation\n• Consider formal verification\n• Regular security reviews\n\n## Detailed Analysis\n\n### **Resource Management**\n✅ **Good:** Proper resource handling patterns observed\n⚠️ **Consider:** Adding resource cleanup mechanisms\n\n### **Access Control**\n✅ **Good:** Basic permission checks in place\n⚠️ **Consider:** More granular permission system\n\n### **Type Safety**\n✅ **Good:** Leveraging Move's type system effectively\n✅ **Good:** No type confusion vulnerabilities\n\n## Conclusion\n\nThe smart contract demonstrates good security practices overall. The main recommendations focus on adding comprehensive input validation and improving documentation.\n\n**Overall Risk Level:** LOW\n\n---\n*Certified by AuditWarp - Demo Report*\n\n**Note:** This is a demonstration report. For a comprehensive audit, please ensure the AI service is properly configured.`;\n}\n\n/**\n * Quick vulnerability scan for smart contract code\n */\nexport async function quickScan(contractCode: string): Promise<{\n  score: number;\n  issues: Array<{\n    severity: 'Critical' | 'High' | 'Medium' | 'Low';\n    title: string;\n    description: string;\n  }>;\n}> {\n  if (!API_KEY) {\n    return {\n      score: 7,\n      issues: [\n        {\n          severity: 'High',\n          title: 'AI Analysis Unavailable',\n          description: 'Configure Gemini API key for detailed analysis'\n        },\n        {\n          severity: 'Medium',\n          title: 'Manual Review Required',\n          description: 'Code requires manual security review'\n        }\n      ]\n    };\n  }\n\n  try {\n    const genAI = new GoogleGenerativeAI(API_KEY);\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n    \n    const prompt = `Perform a quick security scan of this smart contract code and return a JSON response:\n\n${contractCode}\n\nReturn only a JSON object with this exact structure:\n{\n  \"score\": <number from 0-10 where 0 is most secure>,\n  \"issues\": [\n    {\n      \"severity\": \"Critical|High|Medium|Low\",\n      \"title\": \"Brief issue title\",\n      \"description\": \"Short description of the issue\"\n    }\n  ]\n}`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n    \n    try {\n      return JSON.parse(text);\n    } catch {\n      // Fallback if JSON parsing fails\n      return {\n        score: 6,\n        issues: [\n          {\n            severity: 'Medium' as const,\n            title: 'Analysis Completed',\n            description: 'Smart contract analyzed successfully'\n          }\n        ]\n      };\n    }\n  } catch (error) {\n    console.error('Quick scan error:', error);\n    return {\n      score: 8,\n      issues: [\n        {\n          severity: 'High',\n          title: 'Scan Error',\n          description: 'Unable to complete automated scan'\n        }\n      ]\n    };\n  }\n}","size_bytes":5003},"client/src/lib/contract.ts":{"content":"import { IotaClient } from \"@iota/iota-sdk/client\";\nimport { Transaction } from \"@iota/iota-sdk/transactions\";\nimport { supabaseService } from \"./supabase\";\n// Buffer polyfill for browser compatibility\nconst Buffer = {\n  from: (str: string): Uint8Array => new TextEncoder().encode(str)\n};\n\n// Contract configuration\nexport const CONTRACT_PACKAGE_ID = \"0xbec69147e6d51ff32994389b52eb3ee10a7414d07801bb9d5aaa1ba1c6e6b345\";\nexport const MODULE_NAME = \"dsoc::SOCService\";\nexport const CLT_MODULE_NAME = \"dsoc::CLTReward\";\n\n// Contract functions\nexport const CONTRACT_FUNCTIONS = {\n  CREATE_STAKE: \"create_stake\",\n  CREATE_TICKET: \"create_ticket\", \n  ASSIGN_ANALYST: \"assign_analyst\",\n  SUBMIT_REPORT: \"submit_report\",\n  VALIDATE_TICKET: \"validate_ticket\",\n  MERGE_CLT: \"merge\",\n  SPLIT_CLT: \"split\",\n  GET_CLT_AMOUNT: \"get_amount\",\n  GET_CLT_OWNER: \"get_owner\"\n} as const\n\n// Status constants matching Move contract\nexport const TICKET_STATUS = {\n  OPEN: 0,\n  CLAIMED: 1,\n  SUBMITTED: 2,\n  APPROVED: 3,\n  REJECTED: 4\n} as const\n\nexport const TICKET_STATUS_LABELS = {\n  [TICKET_STATUS.OPEN]: \"Open\",\n  [TICKET_STATUS.CLAIMED]: \"Claimed\",\n  [TICKET_STATUS.SUBMITTED]: \"Submitted\", \n  [TICKET_STATUS.APPROVED]: \"Approved\",\n  [TICKET_STATUS.REJECTED]: \"Rejected\"\n}\n\nexport interface Ticket {\n  id: string\n  ticket_id: number\n  client: string\n  analyst?: string\n  evidence_hash: string\n  report_hash?: string\n  status: number\n  stake: number\n  title?: string\n  description?: string\n  category?: string\n  created_at?: string\n}\n\nexport interface StakeToken {\n  id: string\n  amount: number\n}\n\nexport interface CLTToken {\n  id: string\n  amount: number\n  owner: string\n}\n\n// Contract interaction functions\nexport class ContractService {\n  constructor(private client: IotaClient) {}\n\n  private async submitTransaction(tx: Transaction): Promise<string> {\n    return await this.client.submitTransaction(tx);\n  }\n\n  async createStake(amount: number, address: string): Promise<Transaction> {\n    const tx = new Transaction();\n    \n    // Create stake token\n    tx.moveCall({\n      target: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::${CONTRACT_FUNCTIONS.CREATE_STAKE}`,\n      arguments: [tx.pure.u64(amount)]\n    });\n\n    // Store in Supabase for tracking\n    try {\n      await supabaseService.createStakeToken({\n        owner_address: address,\n        amount: amount,\n        is_used: false\n      });\n    } catch (error) {\n      console.error('Error storing stake token in Supabase:', error);\n    }\n\n    return tx;\n  }\n\n  async createTicket(\n    storeId: string,\n    evidenceHash: string,\n    title: string,\n    description: string,\n    category: string,\n    stakeAmount: number,\n    clientAddress: string\n  ) {\n    const tx = new Transaction();\n\n    // First create the stake token\n    const [stakeToken] = tx.moveCall({\n      target: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::${CONTRACT_FUNCTIONS.CREATE_STAKE}`,\n      arguments: [tx.pure.u64(stakeAmount)]\n    });\n\n    // Create ticket with stake - matches the Move contract signature\n    tx.moveCall({\n      target: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::${CONTRACT_FUNCTIONS.CREATE_TICKET}`,\n      arguments: [\n        tx.object(storeId), // TicketStore object\n        stakeToken,         // StakeToken object\n        tx.pure.vector.u8(Buffer.from(evidenceHash)) // evidence_hash: vector<u8>\n      ]\n    });\n\n    // Store ticket info in Supabase for enhanced tracking\n    try {\n      await supabaseService.createTicket({\n        client_address: clientAddress,\n        title,\n        description,\n        category,\n        evidence_hash: evidenceHash,\n        stake_amount: stakeAmount,\n        status: TICKET_STATUS.OPEN\n      });\n    } catch (error) {\n      console.error('Error storing ticket in Supabase:', error);\n    }\n\n    return tx;\n  }\n\n  \n\n  async assignAnalyst(\n    storeId: string,\n    ticketId: number\n  ): Promise<Transaction> {\n    const tx = new Transaction();\n    \n    // Matches Move contract: assign_analyst(store: &mut TicketStore, ticket_id: u64, ctx: &mut TxContext)\n    tx.moveCall({\n      target: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::${CONTRACT_FUNCTIONS.ASSIGN_ANALYST}`,\n      arguments: [\n        tx.object(storeId),      // TicketStore object\n        tx.pure.u64(ticketId)    // ticket_id: u64\n      ]\n    });\n\n    // Update in Supabase\n    try {\n      const tickets = await supabaseService.getOpenTickets()\n      const ticket = tickets.find(t => t.ticket_id === ticketId)\n      if (ticket) {\n        await supabaseService.updateTicket(ticket.id, {\n          status: TICKET_STATUS.CLAIMED\n        })\n      }\n    } catch (error) {\n      console.error('Error updating ticket in Supabase:', error)\n    }\n\n    return tx\n  }\n\n  async submitReport(\n    storeId: string,\n    ticketId: number,\n    reportHash: string\n  ): Promise<Transaction> {\n    const tx = new Transaction();\n    \n    // Matches Move contract: submit_report(store: &mut TicketStore, ticket_id: u64, report_hash: vector<u8>, ctx: &mut TxContext)\n    tx.moveCall({\n      target: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::${CONTRACT_FUNCTIONS.SUBMIT_REPORT}`,\n      arguments: [\n        tx.object(storeId),          // TicketStore object\n        tx.pure.u64(ticketId),       // ticket_id: u64\n        tx.pure.vector.u8(Buffer.from(reportHash)) // report_hash: vector<u8>\n      ]\n    });\n\n    // Update in Supabase will be handled by frontend after successful transaction\n\n    return tx\n  }\n\n  async validateTicket(\n    storeId: string,\n    ticketId: number,\n    approved: boolean\n  ): Promise<Transaction> {\n    const tx = new Transaction();\n    \n    // Matches Move contract: validate_ticket(store: &mut TicketStore, ticket_id: u64, approved: bool, ctx: &mut TxContext)\n    tx.moveCall({\n      target: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::${CONTRACT_FUNCTIONS.VALIDATE_TICKET}`,\n      arguments: [\n        tx.object(storeId),        // TicketStore object\n        tx.pure.u64(ticketId),     // ticket_id: u64\n        tx.pure.bool(approved)     // approved: bool\n      ]\n    });\n\n    // Update in Supabase\n    try {\n      const tickets = await supabaseService.getTicketsByClient(address)\n      const ticket = tickets.find(t => t.ticket_id === ticketId)\n      if (ticket) {\n        await supabaseService.updateTicket(ticket.id, {\n          status: approved ? TICKET_STATUS.APPROVED : TICKET_STATUS.REJECTED\n        })\n\n        // If approved, create CLT token record\n        if (approved && ticket.analyst_address) {\n          await supabaseService.createCLTToken({\n            owner_address: ticket.analyst_address,\n            amount: ticket.stake_amount\n          })\n        }\n      }\n    } catch (error) {\n      console.error('Error updating ticket in Supabase:', error)\n    }\n\n    return tx\n  }\n\n  async getTicketStore(storeId: string) {\n    try {\n      const object = await this.client.getObject({\n        id: storeId,\n        options: {\n          showContent: true,\n          showType: true,\n        },\n      })\n      return object\n    } catch (error) {\n      console.error('Error fetching ticket store:', error)\n      return null\n    }\n  }\n\n  async getTickets(storeId: string): Promise<Ticket[]> {\n    try {\n      // Get from blockchain\n      const storeObj = await this.getTicketStore(storeId)\n      let blockchainTickets: Ticket[] = []\n\n      if (storeObj && storeObj.data?.content && storeObj.data.content.dataType === 'moveObject') {\n        const fields = (storeObj.data.content as any).fields\n        const tickets = fields.tickets?.fields || []\n\n        blockchainTickets = tickets.map((ticket: any) => ({\n          id: ticket.id,\n          ticket_id: ticket.ticket_id,\n          client: ticket.client,\n          analyst: ticket.analyst,\n          evidence_hash: ticket.evidence_hash,\n          report_hash: ticket.report_hash,\n          status: ticket.status,\n          stake: ticket.stake\n        }))\n      }\n\n      return blockchainTickets\n    } catch (error) {\n      console.error('Error fetching tickets:', error)\n      return []\n    }\n  }\n\n  // Enhanced methods that use Supabase data\n  async getTicketsForUser(userAddress: string, userRole: string): Promise<DbTicket[]> {\n    try {\n      switch (userRole) {\n        case 'client':\n          return await supabaseService.getTicketsByClient(userAddress)\n        case 'analyst':\n          return await supabaseService.getTicketsByAnalyst(userAddress)\n        case 'certifier':\n          return await supabaseService.getOpenTickets()\n        default:\n          return []\n      }\n    } catch (error) {\n      console.error('Error fetching user tickets:', error)\n      return []\n    }\n  }\n\n  async getUserStakeTokens(userAddress: string) {\n    try {\n      return await supabaseService.getUserStakeTokens(userAddress)\n    } catch (error) {\n      console.error('Error fetching stake tokens:', error)\n      return []\n    }\n  }\n\n  async getUserCLTTokens(userAddress: string) {\n    try {\n      return await supabaseService.getUserCLTTokens(userAddress)\n    } catch (error) {\n      console.error('Error fetching CLT tokens:', error)\n      return []\n    }\n  }\n\n  // Event parsing helpers\n  parseTicketCreatedEvent(event: any) {\n    return {\n      ticket_id: event.parsedJson.ticket_id,\n      client: event.parsedJson.client,\n      stake: event.parsedJson.stake\n    }\n  }\n\n  parseTicketAssignedEvent(event: any) {\n    return {\n      ticket_id: event.parsedJson.ticket_id,\n      analyst: event.parsedJson.analyst\n    }\n  }\n\n  parseReportSubmittedEvent(event: any) {\n    return {\n      ticket_id: event.parsedJson.ticket_id,\n      analyst: event.parsedJson.analyst,\n      report_hash: event.parsedJson.report_hash\n    }\n  }\n\n  parseTicketValidatedEvent(event: any) {\n    return {\n      ticket_id: event.parsedJson.ticket_id,\n      approved: event.parsedJson.approved\n    }\n  }\n\n  // Create a new ticket store\n  async createTicketStore(): Promise<Transaction> {\n    const tx = new Transaction();\n    \n    // Call the init function from Move contract to create TicketStore\n    // The Move contract will automatically transfer the store to the caller\n    tx.moveCall({\n      target: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::init`,\n      arguments: []\n    });\n\n    return tx;\n  }\n\n  // Get ticket store owned by user\n  async getTicketStoreId(ownerAddress: string): Promise<string | null> {\n    try {\n      // Query for TicketStore objects owned by the user\n      const objects = await this.client.getOwnedObjects({\n        owner: ownerAddress,\n        filter: {\n          StructType: `${CONTRACT_PACKAGE_ID}::${MODULE_NAME}::TicketStore`\n        }\n      });\n\n      if (objects.data && objects.data.length > 0) {\n        return objects.data[0].data?.objectId || null;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error fetching TicketStore:', error);\n      return null;\n    }\n  }\n\n  // Check if user has a ticket store\n  async hasTicketStore(ownerAddress: string): Promise<boolean> {\n    const storeId = await this.getTicketStoreId(ownerAddress);\n    return storeId !== null;\n  }\n}\n\nexport const createContractService = (client: IotaClient) => {\n  return new ContractService(client)\n}","size_bytes":11092},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const url = queryKey[0] as string;\n        const res = await fetch(url);\n        \n        if (!res.ok) {\n          throw new Error(`HTTP error! status: ${res.status}`);\n        }\n        \n        const data = await res.json();\n        return data;\n      },\n    },\n  },\n});\n\nexport async function apiRequest(url: string, options: RequestInit = {}) {\n  const res = await fetch(url, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!res.ok) {\n    throw new Error(`HTTP error! status: ${res.status}`);\n  }\n\n  return res.json();\n}","size_bytes":780},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://sncziafbwxgjkvymkolp.supabase.co';\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNuY3ppYWZid3hnamt2eW1rb2xwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEyNTMyNTksImV4cCI6MjA2NjgyOTI1OX0.r8xYuUWST0Hx6ifGLuFLgxj0GlvMSY3MGgrf90u5x5o';\n\nconsole.log('Supabase config:', {\n  url: supabaseUrl ? 'loaded' : 'missing',\n  key: supabaseAnonKey ? 'loaded' : 'missing'\n});\n\nexport const supabase = supabaseUrl && supabaseAnonKey ? createClient(supabaseUrl, supabaseAnonKey) : null;\n\n// Database types\nexport interface DbTicket {\n  id: string;\n  ticket_id: number;\n  client_address: string;\n  analyst_address?: string;\n  title: string;\n  description: string;\n  category: string;\n  evidence_hash: string;\n  report_hash?: string;\n  status: number;\n  stake_amount: number;\n  created_at: string;\n  updated_at: string;\n  transaction_hash?: string;\n}\n\nexport interface DbUser {\n  id: string;\n  wallet_address: string;\n  role: string;\n  clt_balance: number;\n  stake_balance: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface DbTransaction {\n  id: string;\n  ticket_id: number;\n  from_address: string;\n  to_address?: string;\n  transaction_hash: string;\n  transaction_type: string;\n  amount?: number;\n  status: string;\n  created_at: string;\n}\n\n// Supabase service functions\nexport interface DbStakeToken {\n  id: string;\n  owner_address: string;\n  amount: number;\n  is_used: boolean;\n  created_at: string;\n}\n\nexport interface DbCLTToken {\n  id: string;\n  owner_address: string;\n  amount: number;\n  created_at: string;\n}\n\nexport class SupabaseService {\n  // Ticket operations\n  async createTicket(ticket: Omit<DbTicket, 'id' | 'created_at' | 'updated_at'>) {\n    const { data, error } = await supabase\n      .from('tickets')\n      .insert([{\n        ...ticket,\n        ticket_id: ticket.ticket_id || Date.now() // Generate if not provided\n      }])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  }\n\n  async getTicketsByClient(userAddress: string) {\n    const { data, error } = await supabase\n      .from('tickets')\n      .select('*')\n      .eq('client_address', userAddress)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return data || [];\n  }\n\n  async getTicketsByAnalyst(userAddress: string) {\n    const { data, error } = await supabase\n      .from('tickets')\n      .select('*')\n      .or(`analyst_address.eq.${userAddress},status.eq.0`)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return data || [];\n  }\n\n  async getOpenTickets() {\n    const { data, error } = await supabase\n      .from('tickets')\n      .select('*')\n      .eq('status', 0)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return data || [];\n  }\n\n  async updateTicket(ticketId: number, updates: Partial<DbTicket>) {\n    const { data, error } = await supabase\n      .from('tickets')\n      .update(updates)\n      .eq('ticket_id', ticketId)\n      .single();\n\n    if (error) throw error;\n    return data;\n  }\n\n  // Stake Token operations\n  async createStakeToken(stakeToken: Omit<DbStakeToken, 'id' | 'created_at'>) {\n    const { data, error } = await supabase\n      .from('stake_tokens')\n      .insert([stakeToken])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  }\n\n  async getUserStakeTokens(userAddress: string) {\n    const { data, error } = await supabase\n      .from('stake_tokens')\n      .select('*')\n      .eq('owner_address', userAddress)\n      .eq('is_used', false);\n\n    if (error) throw error;\n    return data || [];\n  }\n\n  // CLT Token operations\n  async createCLTToken(cltToken: Omit<DbCLTToken, 'id' | 'created_at'>) {\n    const { data, error } = await supabase\n      .from('clt_tokens')\n      .insert([cltToken])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  }\n\n  async getUserCLTTokens(userAddress: string) {\n    const { data, error } = await supabase\n      .from('clt_tokens')\n      .select('*')\n      .eq('owner_address', userAddress);\n\n    if (error) throw error;\n    return data || [];\n  }\n}\n\n// Export the singleton instance\nexport const supabaseService = new SupabaseService();","size_bytes":4375},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Index.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCurrentAccount, ConnectButton } from \"@iota/dapp-kit\";\nimport Header from \"@/components/Header\";\nimport Dashboard from \"@/components/Dashboard\";\nimport RoleSelectionModal from \"@/components/RoleSelectionModal\";\nimport BlockchainSelector from \"@/components/BlockchainSelector\";\nimport UserGuide from \"@/components/UserGuide\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport { \n  Shield, \n  Network, \n  Lock, \n  Zap, \n  Globe, \n  Users, \n  Award, \n  AlertTriangle,\n  Database,\n  Cpu,\n  Eye,\n  CheckCircle,\n  ArrowRight,\n  TrendingUp,\n  Target,\n  Layers,\n  BarChart3,\n  Coins,\n  Clock\n} from \"lucide-react\";\nimport { createContractService } from \"@/lib/contract\";\n\nexport default function Index() {\n  return <IndexContent />;\n}\n\nfunction IndexContent() {\n  const [selectedRole, setSelectedRole] = useState<string | null>(null);\n  const [showRoleModal, setShowRoleModal] = useState(false);\n  const [showBlockchainSelector, setShowBlockchainSelector] = useState(false);\n  const { toast } = useToast();\n  const { walletType, isEVMConnected, isIOTAConnected } = useWallet();\n  const iotaAccount = useCurrentAccount();\n  const [stats, setStats] = useState({\n    totalTickets: 0,\n    activeAnalysts: 0,\n    resolvedIncidents: 0,\n    stakingRewards: 0\n  });\n\n  // Determine if user is connected based on selected wallet type\n  const isConnected = walletType === 'iota' ? isIOTAConnected : isEVMConnected;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900\">\n      <Header currentRole={selectedRole || ''} onRoleChange={setSelectedRole} />\n      <IndexPageContent \n        selectedRole={selectedRole} \n        setSelectedRole={setSelectedRole}\n        showRoleModal={showRoleModal}\n        setShowRoleModal={setShowRoleModal}\n        iotaAccount={iotaAccount}\n        isConnected={isConnected}\n      />\n    </div>\n  );\n}\n\ninterface IndexPageContentProps {\n  selectedRole: string | null;\n  setSelectedRole: (role: string | null) => void;\n  showRoleModal: boolean;\n  setShowRoleModal: (show: boolean) => void;\n  iotaAccount: any;\n  isConnected: boolean;\n}\n\nfunction IndexPageContent({ selectedRole, setSelectedRole, showRoleModal, setShowRoleModal, iotaAccount, isConnected }: IndexPageContentProps) {\n  const [userRole, setUserRole] = useState<string>(\"\");\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeSection, setActiveSection] = useState(\"problem\");\n  const [showBlockchainSelector, setShowBlockchainSelector] = useState(false);\n\n  useEffect(() => {\n    if (isConnected && !userRole) {\n      // Auto-assign client role for immediate access\n      setUserRole('client');\n      toast({\n        title: \"Welcome to dSOC!\",\n        description: \"You can change your role anytime from the header menu\",\n      });\n    }\n  }, [isConnected, userRole, toast]);\n\n  const handleRoleSelection = (role: string) => {\n    setUserRole(role);\n    setShowRoleModal(false);\n    toast({\n      title: \"Role Selected\",\n      description: `You are now operating as a ${role}`,\n    });\n  };\n\n  // Redirect to appropriate blockchain-specific page when connected\n  if (isConnected && userRole) {\n    const { walletType, isEVMConnected, isIOTAConnected } = useWallet();\n    if (walletType === 'iota' && isIOTAConnected) {\n      window.location.href = '/iota';\n      return null;\n    } else if (walletType === 'evm' && isEVMConnected) {\n      window.location.href = '/evm';\n      return null;\n    }\n  }\n\n  const navigationSections = [\n    { id: \"problem\", label: \"Problem Statement\", icon: AlertTriangle },\n    { id: \"solution\", label: \"Solution Overview\", icon: Shield },\n    { id: \"impact\", label: \"Real-World Impact\", icon: Target },\n    { id: \"architecture\", label: \"System Architecture\", icon: Layers },\n    { id: \"features\", label: \"Key Features & Demo\", icon: Cpu },\n    { id: \"future\", label: \"Next Steps\", icon: TrendingUp }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\">\n\n\n      {/* Navigation Pills */}\n      <div className=\"sticky top-16 z-40 bg-slate-900/90 backdrop-blur-sm border-b border-purple-500/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex overflow-x-auto py-4 space-x-4\">\n            {navigationSections.map(({ id, label, icon: Icon }) => (\n              <Button\n                key={id}\n                variant={activeSection === id ? \"default\" : \"ghost\"}\n                className={`whitespace-nowrap flex items-center gap-2 ${\n                  activeSection === id \n                    ? \"bg-gradient-to-r from-purple-600 to-cyan-600 text-white\" \n                    : \"text-gray-300 hover:text-white\"\n                }`}\n                onClick={() => setActiveSection(id)}\n              >\n                <Icon className=\"h-4 w-4\" />\n                {label}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-purple-800/20 to-cyan-800/20\" />\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-12 pb-8\">\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-purple-400 to-cyan-400 rounded-full blur-xl opacity-30 animate-pulse\" />\n                <Shield className=\"relative h-16 w-16 text-purple-400\" />\n              </div>\n            </div>\n\n            <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-4\">\n              <span className=\"bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent\">\n                dSOC Platform\n              </span>\n            </h1>\n\n            <h2 className=\"text-xl md:text-2xl font-semibold text-gray-300 mb-6\">\n              Decentralized SOC-as-a-Service on IOTA\n            </h2>\n\n            <div className=\"mb-8 space-y-4\">\n              <p className=\"text-gray-300 text-lg mb-6\">Choose your blockchain to get started:</p>\n              \n              <div className=\"grid md:grid-cols-2 gap-4 max-w-2xl mx-auto\">\n                <Card className=\"bg-blue-500/10 border-blue-500/30 hover:border-blue-400/50 transition-colors cursor-pointer\">\n                  <CardContent className=\"p-6 text-center\">\n                    <Network className=\"h-12 w-12 text-blue-400 mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-bold text-blue-400 mb-2\">IOTA Platform</h3>\n                    <p className=\"text-gray-300 text-sm mb-4\">\n                      Feeless transactions, sustainable blockchain\n                    </p>\n                    <Button \n                      onClick={() => window.location.href = '/iota'}\n                      className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    >\n                      Enter IOTA Platform\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-orange-500/10 border-orange-500/30 hover:border-orange-400/50 transition-colors cursor-pointer\">\n                  <CardContent className=\"p-6 text-center\">\n                    <Zap className=\"h-12 w-12 text-orange-400 mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-bold text-orange-400 mb-2\">Scroll Platform</h3>\n                    <p className=\"text-gray-300 text-sm mb-4\">\n                      EVM compatible, pay with ETH, earn CLT\n                    </p>\n                    <Button \n                      onClick={() => window.location.href = '/evm'}\n                      className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                    >\n                      Enter EVM Platform\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content Sections */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-20\">\n\n        {/* Problem Statement */}\n        {activeSection === \"problem\" && (\n          <div className=\"space-y-8 animate-in slide-in-from-bottom duration-500\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold text-white mb-4 flex items-center justify-center gap-3\">\n                <AlertTriangle className=\"h-8 w-8 text-red-400\" />\n                Problem Statement\n              </h2>\n              <p className=\"text-xl text-gray-300 max-w-4xl mx-auto\">\n                <strong>Tracking & Monitoring Challenge:</strong> Decentralized Cybersecurity Incident Management\n              </p>\n            </div>\n\n            <Card className=\"bg-slate-800/50 border-red-500/30 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-red-400 text-xl\">The Challenge We're Solving</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-3\">Current Problems in Cybersecurity</h3>\n                    <ul className=\"space-y-2 text-gray-300\">\n                      <li className=\"flex items-start gap-2\">\n                        <AlertTriangle className=\"h-5 w-5 text-red-400 mt-0.5 flex-shrink-0\" />\n                        Centralized SOCs create single points of failure\n                      </li>\n                      <li className=\"flex items-start gap-2\">\n                        <AlertTriangle className=\"h-5 w-5 text-red-400 mt-0.5 flex-shrink-0\" />\n                        High costs limit access to quality security analysis\n                      </li>\n                      <li className=\"flex items-start gap-2\">\n                        <AlertTriangle className=\"h-5 w-5 text-red-400 mt-0.5 flex-shrink-0\" />\n                        Lack of transparency in incident handling\n                      </li>\n                      <li className=\"flex items-start gap-2\">\n                        <AlertTriangle className=\"h-5 w-5 text-red-400 mt-0.5 flex-shrink-0\" />\n                        Insufficient incentives for quality analysis\n                      </li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-white mb-3\">Why This Matters</h3>\n                    <p className=\"text-gray-300 leading-relaxed\">\n                      With cyber attacks increasing by 38% annually and damages expected to reach $10.5 trillion by 2025, \n                      we need a more resilient, accessible, and transparent approach to cybersecurity incident management.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Solution Overview */}\n        {activeSection === \"solution\" && (\n          <div className=\"space-y-8 animate-in slide-in-from-bottom duration-500\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold text-white mb-4 flex items-center justify-center gap-3\">\n                <Shield className=\"h-8 w-8 text-blue-400\" />\n                Solution Overview\n              </h2>\n              <p className=\"text-xl text-gray-300 max-w-4xl mx-auto\">\n                A decentralized platform for cybersecurity incident reporting, analysis, and resolution powered by IOTA blockchain\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card className=\"bg-slate-800/50 border-blue-500/30 backdrop-blur-sm\">\n                <CardHeader>\n                  <Users className=\"h-8 w-8 text-blue-400 mb-2\" />\n                  <CardTitle className=\"text-blue-400\">Multi-Role Ecosystem</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-gray-300 text-sm\">\n                    <li><strong>Clients:</strong> Submit security incidents</li>\n                    <li><strong>Analysts:</strong> Provide expert analysis</li>\n                    <li><strong>Certifiers:</strong> Validate reports</li>\n                    <li><strong>Observers:</strong> Monitor system health</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm\">\n                <CardHeader>\n                  <Coins className=\"h-8 w-8 text-purple-400 mb-2\" />\n                  <CardTitle className=\"text-purple-400\">Token Incentives</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-gray-300 text-sm\">\n                    <li><strong>CLT Rewards:</strong> Quality analysis incentives</li>\n                    <li><strong>Staking:</strong> Ensure commitment</li>\n                    <li><strong>Reputation:</strong> Build trust scores</li>\n                    <li><strong>Governance:</strong> Community-driven decisions</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800/50 border-green-500/30 backdrop-blur-sm\">\n                <CardHeader>\n                  <Database className=\"h-8 w-8 text-green-400 mb-2\" />\n                  <CardTitle className=\"text-green-400\">Secure Storage</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-gray-300 text-sm\">\n                    <li><strong>Immutable Records:</strong> Blockchain-based</li>\n                    <li><strong>Identity Verification:</strong> IOTA Identity</li>\n                    <li><strong>Evidence Notarization:</strong> Tamper-proof</li>\n                    <li><strong>Privacy Protection:</strong> Zero-knowledge proofs</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card className=\"bg-gradient-to-r from-slate-800/50 to-purple-800/30 border-purple-500/30 backdrop-blur-sm\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-2xl font-bold text-white mb-4\">How It Works</h3>\n                  <div className=\"grid md:grid-cols-4 gap-4\">\n                    <div className=\"flex flex-col items-center space-y-2\">\n                      <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-bold\">1</span>\n                      </div>\n                      <p className=\"text-sm text-gray-300 text-center\">Submit Incident</p>\n                    </div>\n                    <div className=\"flex flex-col items-center space-y-2\">\n                      <div className=\"w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-bold\">2</span>\n                      </div>\n                      <p className=\"text-sm text-gray-300 text-center\">Analyst Review</p>\n                    </div>\n                    <div className=\"flex flex-col items-center space-y-2\">\n                      <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-bold\">3</span>\n                      </div>\n                      <p className=\"text-sm text-gray-300 text-center\">Certifier Validation</p>\n                    </div>\n                    <div className=\"flex flex-col items-center space-y-2\">\n                      <div className=\"w-12 h-12 bg-yellow-500 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-bold\">4</span>\n                      </div>\n                      <p className=\"text-sm text-gray-300 text-center\">Token Rewards</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Real-World Impact */}\n        {activeSection === \"impact\" && (\n          <div className=\"space-y-8 animate-in slide-in-from-bottom duration-500\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold text-white mb-4 flex items-center justify-center gap-3\">\n                <Target className=\"h-8 w-8 text-green-400\" />\n                Business & Real-World Impact\n              </h2>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <Card className=\"bg-slate-800/50 border-green-500/30 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-green-400 text-xl\">Who Benefits</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start gap-3\">\n                      <Globe className=\"h-5 w-5 text-blue-400 mt-1\" />\n                      <div>\n                        <h4 className=\"font-semibold text-white\">Small-Medium Businesses</h4>\n                        <p className=\"text-sm text-gray-300\">Access enterprise-grade security at affordable costs</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start gap-3\">\n                      <Users className=\"h-5 w-5 text-purple-400 mt-1\" />\n                      <div>\n                        <h4 className=\"font-semibold text-white\">Security Professionals</h4>\n                        <p className=\"text-sm text-gray-300\">Monetize expertise in a global marketplace</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start gap-3\">\n                      <Network className=\"h-5 w-5 text-cyan-400 mt-1\" />\n                      <div>\n                        <h4 className=\"font-semibold text-white\">Enterprise Organizations</h4>\n                        <p className=\"text-sm text-gray-300\">Augment internal teams with external expertise</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800/50 border-yellow-500/30 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-yellow-400 text-xl\">Market Impact</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-400\">60%</div>\n                      <div className=\"text-sm text-gray-300\">Cost Reduction</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-400\">24/7</div>\n                      <div className=\"text-sm text-gray-300\">Global Coverage</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-purple-400\">100%</div>\n                      <div className=\"text-sm text-gray-300\">Transparency</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-cyan-400\">0</div>\n                      <div className=\"text-sm text-gray-300\">Single Points of Failure</div>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-gray-300 text-center mt-4\">\n                    Addressing the $6 trillion annual cybercrime damage through decentralized security services\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card className=\"bg-gradient-to-r from-green-800/30 to-blue-800/30 border-green-500/30 backdrop-blur-sm\">\n              <CardContent className=\"pt-6\">\n                <h3 className=\"text-xl font-bold text-white mb-4 text-center\">Economic Model</h3>\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <Coins className=\"h-8 w-8 text-yellow-400 mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-white mb-1\">Incentive Alignment</h4>\n                    <p className=\"text-sm text-gray-300\">Quality work rewarded with CLT tokens</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <BarChart3 className=\"h-8 w-8 text-blue-400 mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-white mb-1\">Scalable Pricing</h4>\n                    <p className=\"text-sm text-gray-300\">Market-driven competitive rates</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <TrendingUp className=\"h-8 w-8 text-green-400 mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-white mb-1\">Network Effects</h4>\n                    <p className=\"text-sm text-gray-300\">Value increases with participation</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* System Architecture */}\n        {activeSection === \"architecture\" && (\n          <div className=\"space-y-8 animate-in slide-in-from-bottom duration-500\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold text-white mb-4 flex items-center justify-center gap-3\">\n                <Layers className=\"h-8 w-8 text-purple-400\" />\n                System Architecture\n              </h2>\n              <p className=\"text-xl text-gray-300\">Built on IOTA Layer 1 with Move smart contracts</p>\n            </div>\n\n            <div className=\"bg-slate-800/30 border border-purple-500/30 rounded-xl p-8 backdrop-blur-sm\">\n              <div className=\"space-y-8\">\n                {/* Frontend Layer */}\n                <div className=\"text-center\">\n                  <h3 className=\"text-lg font-semibold text-purple-400 mb-4\">Frontend Layer</h3>\n                  <div className=\"flex justify-center items-center space-x-4\">\n                    <Card className=\"bg-slate-700/50 p-4 border-purple-400/30\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Globe className=\"h-5 w-5 text-purple-400\" />\n                        <span className=\"text-white text-sm\">React Web App</span>\n                      </div>\n                    </Card>\n                    <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n                    <Card className=\"bg-slate-700/50 p-4 border-cyan-400/30\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"h-5 w-5 text-cyan-400\" />\n                        <span className=\"text-white text-sm\">IOTA Wallet Kit</span>\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n\n                {/* IOTA Trust Framework */}\n                <div className=\"text-center\">\n                  <h3 className=\"text-lg font-semibold text-blue-400 mb-4\">IOTA Trust Framework</h3>\n                  <div className=\"grid md:grid-cols-4 gap-4\">\n                    <Card className=\"bg-slate-700/50 p-4 border-blue-400/30\">\n                      <Eye className=\"h-6 w-6 text-blue-400 mx-auto mb-2\" />\n                      <div className=\"text-white text-sm font-medium\">IOTA Identity</div>\n                      <div className=\"text-gray-400 text-xs\">User verification</div>\n                    </Card>\n                    <Card className=\"bg-slate-700/50 p-4 border-green-400/30\">\n                      <Lock className=\"h-6 w-6 text-green-400 mx-auto mb-2\" />\n                      <div className=\"text-white text-sm font-medium\">Notarization</div>\n                      <div className=\"text-gray-400 text-xs\">Evidence integrity</div>\n                    </Card>\n                    <Card className=\"bg-slate-700/50 p-4 border-yellow-400/30\">\n                      <Zap className=\"h-6 w-6 text-yellow-400 mx-auto mb-2\" />\n                      <div className=\"text-white text-sm font-medium\">Gas Station</div>\n                      <div className=\"text-gray-400 text-xs\">Seamless UX</div>\n                    </Card>\n                    <Card className=\"bg-slate-700/50 p-4 border-orange-400/30\">\n                      <Coins className=\"h-6 w-6 text-orange-400 mx-auto mb-2\" />\n                      <div className=\"text-white text-sm font-medium\">CLT Tokens</div>\n                      <div className=\"text-gray-400 text-xs\">Reward system</div>\n                    </Card>\n                  </div>\n                </div>\n\n                {/* Smart Contracts */}\n                <div className=\"text-center\">\n                  <h3 className=\"text-lg font-semibold text-green-400 mb-4\">Move Smart Contracts</h3>\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <Card className=\"bg-slate-700/50 p-4 border-green-400/30\">\n                      <Shield className=\"h-6 w-6 text-green-400 mx-auto mb-2\" />\n                      <div className=\"text-white text-sm font-medium\">SOC Service</div>\n                      <div className=\"text-gray-400 text-xs\">Core incident management</div>\n                    </Card>\n                    <Card className=\"bg-slate-700/50 p-4 border-purple-400/30\">\n                      <Award className=\"h-6 w-6 text-purple-400 mx-auto mb-2\" />\n                      <div className=\"text-white text-sm font-medium\">Reputation System</div>\n                      <div className=\"text-gray-400 text-xs\">Trust scoring</div>\n                    </Card>\n                    <Card className=\"bg-slate-700/50 p-4 border-cyan-400/30\">\n                      <Database className=\"h-6 w-6 text-cyan-400 mx-auto mb-2\" />\n                      <div className=\"text-white text-sm font-medium\">Token Management</div>\n                      <div className=\"text-gray-400 text-xs\">CLT distribution</div>\n                    </Card>\n                  </div>\n                </div>\n\n                {/* Data Layer */}\n                <div className=\"text-center\">\n                  <h3 className=\"text-lg font-semibold text-red-400 mb-4\">Data Layer</h3>\n                  <div className=\"flex justify-center items-center space-x-4\">\n                    <Card className=\"bg-slate-700/50 p-4 border-red-400/30\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Database className=\"h-5 w-5 text-red-400\" />\n                        <span className=\"text-white text-sm\">IOTA Tangle</span>\n                      </div>\n                    </Card>\n                    <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n                    <Card className=\"bg-slate-700/50 p-4 border-orange-400/30\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Network className=\"h-5 w-5 text-orange-400\" />\n                        <span className=\"text-white text-sm\">Supabase</span>\n                      </div>\n                    </Card>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Key Features */}\n        {activeSection === \"features\" && (\n          <div className=\"space-y-8 animate-in slide-in-from-bottom duration-500\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold text-white mb-4 flex items-center justify-center gap-3\">\n                <Cpu className=\"h-8 w-8 text-cyan-400\" />\n                Key Features & Demo\n              </h2>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card className=\"bg-slate-800/50 border-blue-500/30 backdrop-blur-sm hover:border-blue-400/50 transition-colors\">\n                <CardHeader>\n                  <Shield className=\"h-8 w-8 text-blue-400 mb-2\" />\n                  <CardTitle className=\"text-blue-400\">Incident Submission</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-gray-300 text-sm\">\n                    <li>• Secure incident reporting with evidence</li>\n                    <li>• Automatic categorization and tagging</li>\n                    <li>• Stake-based priority system</li>\n                    <li>• Real-time status tracking</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm hover:border-purple-400/50 transition-colors\">\n                <CardHeader>\n                  <Users className=\"h-8 w-8 text-purple-400 mb-2\" />\n                  <CardTitle className=\"text-purple-400\">Expert Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-gray-300 text-sm\">\n                    <li>• AI-assisted threat assessment</li>\n                    <li>• Collaborative analysis workspace</li>\n                    <li>• Structured reporting templates</li>\n                    <li>• Quality scoring mechanism</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800/50 border-green-500/30 backdrop-blur-sm hover:border-green-400/50 transition-colors\">\n                <CardHeader>\n                  <CheckCircle className=\"h-8 w-8 text-green-400 mb-2\" />\n                  <CardTitle className=\"text-green-400\">Validation System</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-gray-300 text-sm\">\n                    <li>• Multi-tier review process</li>\n                    <li>• Consensus-based approval</li>\n                    <li>• Quality assurance metrics</li>\n                    <li>• Dispute resolution mechanism</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800/50 border-yellow-500/30 backdrop-blur-sm hover:border-yellow-400/50 transition-colors\">\n                <CardHeader>\n                  <Coins className=\"h-8 w-8 text-yellow-400 mb-2\" />\n                  <CardTitle className=\"text-yellow-400\">Token Economy</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-gray-300 text-sm\">\n                    <li>• CLT token rewards for quality work</li>\n                    <li>• Staking mechanisms for commitment</li>\n                    <li>• Reputation-based bonuses</li>\n                    <li>• Community governance rights</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800/50 border-cyan-500/30 backdrop-blur-sm hover:border-cyan-400/50 transition-colors\">\n                <CardHeader>\n                  <Eye className=\"h-8 w-8 text-cyan-400 mb-2\" />\n                  <CardTitle className=\"text-cyan-400\">Real-time Dashboard</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-gray-300 text-sm\">\n                    <li>• Live threat intelligence feeds</li>\n                    <li>• Platform analytics and metrics</li>\n                    <li>• Performance tracking</li>\n                    <li>• Security trend analysis</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800/50 border-red-500/30 backdrop-blur-sm hover:border-red-400/50 transition-colors\">\n                <CardHeader>\n                  <Lock className=\"h-8 w-8 text-red-400 mb-2\" />\n                  <CardTitle className=\"text-red-400\">Security & Privacy</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2 text-gray-300 text-sm\">\n                    <li>• End-to-end encryption</li>\n                    <li>• Zero-knowledge proofs</li>\n                    <li>• Immutable audit trails</li>\n                    <li>• GDPR compliance</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card className=\"bg-gradient-to-r from-purple-800/30 to-cyan-800/30 border-purple-500/30 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-center text-white text-xl\">Live Demo Features</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-8\">\n                  <div>\n                    <h4 className=\"font-semibold text-purple-400 mb-3\">What You Can Try Now:</h4>\n                    <ul className=\"space-y-2 text-gray-300 text-sm\">\n                      <li>✅ Multi-role wallet connection</li>\n                      <li>✅ Incident submission with real attack scenarios</li>\n                      <li>✅ AI-powered threat analysis</li>\n                      ```python\n                      <li>✅ Real-time dashboard with 20+ mock incidents</li>\n                      <li>✅ Token staking and rewards simulation</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-cyan-400 mb-3\">Mock Data Includes:</h4>\n                    <ul className=\"space-y-2 text-gray-300 text-sm\">\n                      <li>🎯 Recent DeFi exploits and smart contract hacks</li>\n                      <li>🎯 Supply chain attacks and zero-days</li>\n                      <li>🎯 Ransomware campaigns and APT activities</li>\n                      <li>🎯 Real-world incident case studies</li>\n                      <li>🎯 Arkham Intelligence-style threat tracking</li>\n                                        </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Future Steps */}\n        {activeSection === \"future\" && (\n          <div className=\"space-y-8 animate-in slide-in-from-bottom duration-500\">\n            <div className=\"text-center\">\n              <h2 className=\"text-3xl font-bold text-white mb-4 flex items-center justify-center gap-3\">\n                <TrendingUp className=\"h-8 w-8 text-green-400\" />\n                Next Steps & Future Improvements\n              </h2>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <Card className=\"bg-slate-800/50 border-green-500/30 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-green-400 text-xl flex items-center gap-2\">\n                    <Clock className=\"h-6 w-6\" />\n                    Immediate Roadmap (Q1 2024)\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full mt-2\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-white\">Smart Contract Deployment</h4>\n                      <p className=\"text-sm text-gray-300\">Deploy Move contracts to IOTA mainnet</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full mt-2\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-white\">Beta User Program</h4>\n                      <p className=\"text-sm text-gray-300\">Onboard 100 security professionals</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-2 h-2 bg-purple-400 rounded-full mt-2\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-white\">Mobile Application</h4>\n                      <p className=\"text-sm text-gray-300\">Native iOS/Android apps</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-purple-400 text-xl flex items-center gap-2\">\n                    <Layers className=\"h-6 w-6\" />\n                    Advanced Features (Q2-Q3 2024)\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-2 h-2 bg-cyan-400 rounded-full mt-2\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-white\">AI Enhancement</h4>\n                      <p className=\"text-sm text-gray-300\">Advanced ML models for threat detection</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-2 h-2 bg-yellow-400 rounded-full mt-2\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-white\">API Integrations</h4>\n                      <p className=\"text-sm text-gray-300\">Connect with SIEM tools and threat feeds</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-2 h-2 bg-red-400 rounded-full mt-2\"></div>\n                    <div>\n                      <h4 className=\"font-semibold text-white\">Automated Response</h4>\n                      <p className=\"text-sm text-gray-300\">Smart contract-triggered incident response</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card className=\"bg-gradient-to-r from-blue-800/30 to-green-800/30 border-blue-500/30 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-center text-white text-xl\">Long-term Vision</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <Globe className=\"h-10 w-10 text-blue-400 mx-auto mb-3\" />\n                    <h4 className=\"font-semibold text-white mb-2\">Global Network</h4>\n                    <p className=\"text-sm text-gray-300\">10,000+ security experts across 50+ countries</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <Network className=\"h-10 w-10 text-purple-400 mx-auto mb-3\" />\n                    <h4 className=\"font-semibold text-white mb-2\">Ecosystem Integration</h4>\n                    <p className=\"text-sm text-gray-300\">Native integration with major security vendors</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <Award className=\"h-10 w-10 text-green-400 mx-auto mb-3\" />\n                    <h4 className=\"font-semibold text-white mb-2\">Industry Standard</h4>\n                    <p className=\"text-sm text-gray-300\">De facto platform for decentralized cybersecurity</p>\n                  </div>\n                </div>\n\n                <div className=\"mt-8 text-center\">\n                  <h4 className=\"text-lg font-semibold text-white mb-4\">Technical Improvements Needed</h4>\n                  <div className=\"grid md:grid-cols-2 gap-4 text-left\">\n                    <ul className=\"space-y-2 text-gray-300 text-sm\">\n                      <li>🔧 Enhanced scalability for enterprise workloads</li>\n                      <li>🔧 Cross-chain interoperability</li>\n                      <li>🔧 Advanced cryptographic privacy features</li>\n                    </ul>\n                    <ul className=\"space-y-2 text-gray-300 text-sm\">\n                      <li>🔧 Regulatory compliance frameworks</li>\n                      <li>🔧 Enterprise security certifications</li>\n                      <li>🔧 Quantum-resistant cryptography</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n      </div>\n\n      {showRoleModal && (\n        <RoleSelectionModal\n          isOpen={showRoleModal}\n          onClose={() => setShowRoleModal(false)}\n          onRoleSelect={handleRoleSelection}\n        />\n      )}\n\n      {/* Blockchain Selector Modal */}\n      <BlockchainSelector\n        isOpen={showBlockchainSelector}\n        onClose={() => setShowBlockchainSelector(false)}\n        onConnected={() => {\n          setShowBlockchainSelector(false);\n          // After connecting blockchain, show role selection\n          if (!userRole) {\n            setShowRoleModal(true);\n          }\n        }}\n      />\n    </div>\n  );\n}","size_bytes":41645},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Link } from \"wouter\";\n\nconst NotFound = () => {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location\n    );\n  }, [location]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4 text-foreground\">404</h1>\n        <p className=\"text-xl text-muted-foreground mb-4\">Oops! Page not found</p>\n        <Link href=\"/\" className=\"text-primary hover:text-primary/80 underline\">\n          Return to Home\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":777},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        security: \"security-button\",\n        success: \"bg-success text-success-foreground hover:bg-success/90\",\n        warning: \"bg-warning text-warning-foreground hover:bg-warning/90\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2088},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }","size_bytes":1641},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"@/components/ThemeProvider\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":909},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"client/src/components/AISubmitCaseModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { \n  Bot, \n  Upload, \n  Shield, \n  AlertTriangle, \n  FileText, \n  Zap, \n  CheckCircle,\n  Clock,\n  Database,\n  Users\n} from \"lucide-react\";\n\ninterface AIAnalysisResult {\n  title: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  description: string;\n  technicalDetails: string;\n  recommendations: string[];\n  estimatedReward: number;\n  requiredAnalysts: number;\n}\n\nexport default function AISubmitCaseModal({ children }: { children: React.ReactNode }) {\n  const { walletType, evmAddress, iotaAddress, isEVMConnected, isIOTAConnected } = useWallet();\n  const { toast } = useToast();\n  \n  const [isOpen, setIsOpen] = useState(false);\n  const [step, setStep] = useState<'input' | 'analyzing' | 'review' | 'uploading' | 'success'>('input');\n  const [userInput, setUserInput] = useState('');\n  const [caseType, setCaseType] = useState('');\n  const [analysisResult, setAnalysisResult] = useState<AIAnalysisResult | null>(null);\n  const [blockchainTxHash, setBlockchainTxHash] = useState('');\n\n  const isConnected = walletType === 'iota' ? isIOTAConnected : isEVMConnected;\n  const currentAddress = walletType === 'iota' ? iotaAddress : evmAddress;\n\n  const caseTypes = [\n    { value: 'vulnerability', label: 'Security Vulnerability' },\n    { value: 'breach', label: 'Data Breach' },\n    { value: 'malware', label: 'Malware Detection' },\n    { value: 'phishing', label: 'Phishing Attack' },\n    { value: 'ddos', label: 'DDoS Attack' },\n    { value: 'insider_threat', label: 'Insider Threat' },\n    { value: 'compliance', label: 'Compliance Violation' },\n    { value: 'other', label: 'Other Security Incident' }\n  ];\n\n  const severityColors = {\n    low: 'bg-green-500/20 text-green-400 border-green-500/30',\n    medium: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30', \n    high: 'bg-orange-500/20 text-orange-400 border-orange-500/30',\n    critical: 'bg-red-500/20 text-red-400 border-red-500/30'\n  };\n\n  const analyzeWithAI = async () => {\n    if (!userInput || !caseType) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide case details and select a case type\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setStep('analyzing');\n    \n    try {\n      const response = await fetch('/api/ai/analyze-case', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userInput,\n          caseType,\n          requestType: 'security_case_analysis'\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('AI analysis failed');\n      }\n\n      const result = await response.json();\n      \n      // Parse AI response into structured case data\n      const analysis: AIAnalysisResult = {\n        title: result.title || `${caseType.charAt(0).toUpperCase() + caseType.slice(1)} Security Case`,\n        severity: result.severity || 'medium',\n        category: result.category || caseType,\n        description: result.description || userInput,\n        technicalDetails: result.technicalDetails || result.analysis || 'AI analysis pending...',\n        recommendations: result.recommendations || ['Further investigation required'],\n        estimatedReward: result.estimatedReward || 100,\n        requiredAnalysts: result.requiredAnalysts || 2\n      };\n\n      setAnalysisResult(analysis);\n      setStep('review');\n\n    } catch (error: any) {\n      toast({\n        title: \"AI Analysis Failed\",\n        description: error.message || \"Failed to analyze the security case\",\n        variant: \"destructive\"\n      });\n      setStep('input');\n    }\n  };\n\n  const uploadToBlockchain = async () => {\n    if (!analysisResult || !isConnected) {\n      toast({\n        title: \"Cannot Upload\",\n        description: \"Missing analysis result or wallet not connected\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setStep('uploading');\n\n    try {\n      // Create blockchain ticket data\n      const caseData = {\n        title: analysisResult.title,\n        description: analysisResult.description,\n        severity: analysisResult.severity,\n        technicalDetails: analysisResult.technicalDetails,\n        category: analysisResult.category,\n        recommendations: analysisResult.recommendations,\n        submittedBy: currentAddress,\n        submissionType: 'ai_generated_case',\n        timestamp: new Date().toISOString()\n      };\n\n      let txHash = '';\n\n      if (walletType === 'evm') {\n        // Submit to EVM blockchain via smart contract\n        const tx = await evmContractService.createTicket();\n        const receipt = await tx.wait();\n        txHash = receipt.transactionHash;\n        \n        // Also store detailed case data via backend API\n        const caseResponse = await fetch('/api/ai-cases', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            ...caseData,\n            blockchainTxHash: txHash,\n            network: 'scroll_evm',\n            estimatedReward: analysisResult.estimatedReward,\n            requiredAnalysts: analysisResult.requiredAnalysts\n          }),\n        });\n\n        if (!caseResponse.ok) {\n          console.warn('Failed to store case details in backend');\n        }\n\n      } else {\n        // Submit to IOTA blockchain (simulated for now)\n        txHash = '0x' + Math.random().toString(16).substr(2, 8);\n        \n        // Store case data via backend API\n        const caseResponse = await fetch('/api/ai-cases', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            ...caseData,\n            blockchainTxHash: txHash,\n            network: 'iota',\n            estimatedReward: analysisResult.estimatedReward,\n            requiredAnalysts: analysisResult.requiredAnalysts\n          }),\n        });\n\n        if (!caseResponse.ok) {\n          console.warn('Failed to store case details in backend');\n        }\n      }\n\n      setBlockchainTxHash(txHash);\n      setStep('success');\n\n      toast({\n        title: \"Case Uploaded Successfully\",\n        description: `AI case uploaded to ${walletType === 'iota' ? 'IOTA' : 'Scroll EVM'} blockchain`,\n      });\n\n      // Trigger notification to analysts\n      window.dispatchEvent(new CustomEvent('newAICaseUploaded', { \n        detail: { \n          ...analysisResult, \n          txHash,\n          network: walletType \n        } \n      }));\n\n    } catch (error: any) {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Failed to upload case to blockchain\",\n        variant: \"destructive\"\n      });\n      setStep('review');\n    }\n  };\n\n  const resetModal = () => {\n    setStep('input');\n    setUserInput('');\n    setCaseType('');\n    setAnalysisResult(null);\n    setBlockchainTxHash('');\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setTimeout(resetModal, 300); // Reset after animation\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      \n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto bg-slate-800 border-purple-500/30\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-white\">\n            <Bot className=\"h-6 w-6 text-purple-400\" />\n            AI-Powered Case Submission\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Describe your security incident and let AI analyze it, then upload to blockchain for analyst investigation\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Progress Indicator */}\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className={`flex items-center gap-2 ${step === 'input' ? 'text-purple-400' : step === 'analyzing' || step === 'review' || step === 'uploading' || step === 'success' ? 'text-green-400' : 'text-gray-500'}`}>\n              <div className={`w-3 h-3 rounded-full ${step === 'input' ? 'bg-purple-400' : step === 'analyzing' || step === 'review' || step === 'uploading' || step === 'success' ? 'bg-green-400' : 'bg-gray-500'}`} />\n              Input Details\n            </div>\n            <div className={`flex items-center gap-2 ${step === 'analyzing' ? 'text-purple-400' : step === 'review' || step === 'uploading' || step === 'success' ? 'text-green-400' : 'text-gray-500'}`}>\n              <div className={`w-3 h-3 rounded-full ${step === 'analyzing' ? 'bg-purple-400' : step === 'review' || step === 'uploading' || step === 'success' ? 'bg-green-400' : 'bg-gray-500'}`} />\n              AI Analysis\n            </div>\n            <div className={`flex items-center gap-2 ${step === 'review' ? 'text-purple-400' : step === 'uploading' || step === 'success' ? 'text-green-400' : 'text-gray-500'}`}>\n              <div className={`w-3 h-3 rounded-full ${step === 'review' ? 'bg-purple-400' : step === 'uploading' || step === 'success' ? 'bg-green-400' : 'bg-gray-500'}`} />\n              Review & Edit\n            </div>\n            <div className={`flex items-center gap-2 ${step === 'uploading' ? 'text-purple-400' : step === 'success' ? 'text-green-400' : 'text-gray-500'}`}>\n              <div className={`w-3 h-3 rounded-full ${step === 'uploading' ? 'bg-purple-400' : step === 'success' ? 'bg-green-400' : 'bg-gray-500'}`} />\n              Blockchain Upload\n            </div>\n            <div className={`flex items-center gap-2 ${step === 'success' ? 'text-green-400' : 'text-gray-500'}`}>\n              <div className={`w-3 h-3 rounded-full ${step === 'success' ? 'bg-green-400' : 'bg-gray-500'}`} />\n              Complete\n            </div>\n          </div>\n\n          {/* Step 1: Input Details */}\n          {step === 'input' && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"caseType\" className=\"text-gray-300\">\n                  Case Type *\n                </Label>\n                <Select value={caseType} onValueChange={setCaseType}>\n                  <SelectTrigger className=\"bg-slate-700 border-purple-500/30 text-white\">\n                    <SelectValue placeholder=\"Select the type of security incident\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-slate-800 border-purple-500/30\">\n                    {caseTypes.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"userInput\" className=\"text-gray-300\">\n                  Describe the Security Incident *\n                </Label>\n                <Textarea\n                  id=\"userInput\"\n                  placeholder=\"Describe what happened, when it occurred, what systems were affected, and any evidence you have...\"\n                  value={userInput}\n                  onChange={(e) => setUserInput(e.target.value)}\n                  className=\"bg-slate-700 border-purple-500/30 text-white min-h-[120px]\"\n                />\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  Be as detailed as possible. AI will analyze this to create a comprehensive case report.\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-3\">\n                <Button variant=\"outline\" onClick={handleClose}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={analyzeWithAI}\n                  disabled={!userInput || !caseType}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                >\n                  <Bot className=\"h-4 w-4 mr-2\" />\n                  Analyze with AI\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: AI Analysis in Progress */}\n          {step === 'analyzing' && (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-purple-400 mx-auto mb-4\"></div>\n              <h3 className=\"text-lg font-semibold text-white mb-2\">AI Analyzing Case...</h3>\n              <p className=\"text-gray-400\">\n                Analyzing security incident details and generating comprehensive case report\n              </p>\n            </div>\n          )}\n\n          {/* Step 3: Review AI Analysis */}\n          {step === 'review' && analysisResult && (\n            <div className=\"space-y-6\">\n              <Card className=\"bg-slate-700 border-purple-500/30\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <FileText className=\"h-5 w-5\" />\n                    AI-Generated Case Report\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-gray-300\">Title</Label>\n                      <Input\n                        value={analysisResult.title}\n                        onChange={(e) => setAnalysisResult({...analysisResult, title: e.target.value})}\n                        className=\"bg-slate-600 border-purple-500/30 text-white mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-gray-300\">Severity</Label>\n                      <div className=\"mt-1\">\n                        <Badge className={severityColors[analysisResult.severity]}>\n                          {analysisResult.severity.toUpperCase()}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-gray-300\">Description</Label>\n                    <Textarea\n                      value={analysisResult.description}\n                      onChange={(e) => setAnalysisResult({...analysisResult, description: e.target.value})}\n                      className=\"bg-slate-600 border-purple-500/30 text-white mt-1\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-gray-300\">Technical Analysis</Label>\n                    <Textarea\n                      value={analysisResult.technicalDetails}\n                      onChange={(e) => setAnalysisResult({...analysisResult, technicalDetails: e.target.value})}\n                      className=\"bg-slate-600 border-purple-500/30 text-white mt-1 min-h-[100px]\"\n                    />\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-gray-300\">Estimated Reward (CLT)</Label>\n                      <Input\n                        type=\"number\"\n                        value={analysisResult.estimatedReward}\n                        onChange={(e) => setAnalysisResult({...analysisResult, estimatedReward: parseInt(e.target.value)})}\n                        className=\"bg-slate-600 border-purple-500/30 text-white mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-gray-300\">Required Analysts</Label>\n                      <Input\n                        type=\"number\"\n                        value={analysisResult.requiredAnalysts}\n                        onChange={(e) => setAnalysisResult({...analysisResult, requiredAnalysts: parseInt(e.target.value)})}\n                        className=\"bg-slate-600 border-purple-500/30 text-white mt-1\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"flex justify-end gap-3\">\n                <Button variant=\"outline\" onClick={() => setStep('input')}>\n                  Back to Edit\n                </Button>\n                <Button \n                  onClick={uploadToBlockchain}\n                  disabled={!isConnected}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  Upload to Blockchain\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Step 4: Uploading to Blockchain */}\n          {step === 'uploading' && (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-green-400 mx-auto mb-4\"></div>\n              <h3 className=\"text-lg font-semibold text-white mb-2\">Uploading to Blockchain...</h3>\n              <p className=\"text-gray-400\">\n                Creating case ticket on {walletType === 'iota' ? 'IOTA' : 'Scroll EVM'} network and notifying analysts\n              </p>\n            </div>\n          )}\n\n          {/* Step 5: Success */}\n          {step === 'success' && (\n            <div className=\"text-center py-8\">\n              <CheckCircle className=\"h-16 w-16 text-green-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-white mb-2\">Case Successfully Uploaded!</h3>\n              <p className=\"text-gray-400 mb-6\">\n                Your AI-analyzed security case has been uploaded to the blockchain and security analysts will begin investigation.\n              </p>\n              \n              <div className=\"space-y-4\">\n                <Card className=\"bg-slate-700 border-green-500/30\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"text-center\">\n                        <Database className=\"h-6 w-6 text-green-400 mx-auto mb-2\" />\n                        <div className=\"text-gray-300\">Blockchain</div>\n                        <div className=\"text-white font-medium\">\n                          {walletType === 'iota' ? 'IOTA Network' : 'Scroll EVM'}\n                        </div>\n                      </div>\n                      <div className=\"text-center\">\n                        <Users className=\"h-6 w-6 text-purple-400 mx-auto mb-2\" />\n                        <div className=\"text-gray-300\">Analysts Needed</div>\n                        <div className=\"text-white font-medium\">{analysisResult?.requiredAnalysts}</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {blockchainTxHash && (\n                  <div className=\"text-xs text-gray-500 break-all\">\n                    Transaction: {blockchainTxHash}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex justify-center gap-3 mt-6\">\n                <Button variant=\"outline\" onClick={handleClose}>\n                  Close\n                </Button>\n                <Button \n                  onClick={() => window.location.href = '/pools'}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                >\n                  View All Cases\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":20255},"client/src/components/BlockchainSelector.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport { ConnectButton } from \"@iota/dapp-kit\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Network, Wallet, ShieldCheck, Zap } from \"lucide-react\";\n\ninterface BlockchainSelectorProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConnected: () => void;\n}\n\nexport default function BlockchainSelector({ isOpen, onClose, onConnected }: BlockchainSelectorProps) {\n  const { walletType, setWalletType, connectEVMWallet, isEVMConnected, isIOTAConnected } = useWallet();\n  const [connecting, setConnecting] = useState(false);\n  const { toast } = useToast();\n\n  const blockchains = [\n    {\n      id: 'iota' as const,\n      name: 'IOTA',\n      description: 'Feeless and sustainable blockchain',\n      icon: Network,\n      color: 'text-blue-400',\n      bgColor: 'bg-blue-500/10',\n      features: [\n        'Zero transaction fees',\n        'Environmentally friendly',\n        'Quantum resistant',\n        'Fast finality'\n      ],\n      isConnected: isIOTAConnected\n    },\n    {\n      id: 'evm' as const,\n      name: 'Scroll (EVM)',\n      description: 'Ethereum Layer 2 scaling solution',\n      icon: ShieldCheck,\n      color: 'text-orange-400',\n      bgColor: 'bg-orange-500/10',\n      features: [\n        'EVM compatible',\n        'Low gas fees',\n        'High throughput',\n        'Ethereum security'\n      ],\n      isConnected: isEVMConnected\n    }\n  ];\n\n  const handleIOTAConnect = () => {\n    setWalletType('iota');\n    // IOTA connection is handled by the ConnectButton component\n  };\n\n  const handleEVMConnect = async () => {\n    setConnecting(true);\n    try {\n      setWalletType('evm');\n      await connectEVMWallet();\n      toast({\n        title: \"EVM Wallet Connected\",\n        description: \"Successfully connected to Scroll Sepolia\",\n      });\n      onConnected();\n      onClose();\n    } catch (error: any) {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message || \"Failed to connect EVM wallet\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setConnecting(false);\n    }\n  };\n\n  const handleBlockchainSelect = (blockchainId: 'iota' | 'evm') => {\n    if (blockchainId === 'iota') {\n      handleIOTAConnect();\n    } else {\n      handleEVMConnect();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px] bg-slate-900 border-purple-500/20\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white flex items-center gap-2\">\n            <Wallet className=\"h-5 w-5\" />\n            Choose Your Blockchain\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n          {blockchains.map((blockchain) => {\n            const Icon = blockchain.icon;\n            return (\n              <Card\n                key={blockchain.id}\n                className={`cursor-pointer transition-all hover:scale-105 bg-slate-800 border-purple-500/20 hover:border-purple-500/40 ${\n                  walletType === blockchain.id ? 'ring-2 ring-purple-500' : ''\n                }`}\n                onClick={() => setWalletType(blockchain.id)}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`p-2 rounded-lg ${blockchain.bgColor}`}>\n                        <Icon className={`h-6 w-6 ${blockchain.color}`} />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-white text-lg\">{blockchain.name}</CardTitle>\n                        <p className=\"text-gray-400 text-sm\">{blockchain.description}</p>\n                      </div>\n                    </div>\n                    {blockchain.isConnected && (\n                      <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                        Connected\n                      </Badge>\n                    )}\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-2 mb-4\">\n                    {blockchain.features.map((feature) => (\n                      <div key={feature} className=\"flex items-center gap-2 text-sm text-gray-300\">\n                        <Zap className=\"h-3 w-3 text-purple-400\" />\n                        {feature}\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {blockchain.id === 'iota' && walletType === 'iota' && (\n                    <div className=\"w-full\">\n                      <ConnectButton\n                        className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                        connectText=\"Connect IOTA Wallet\"\n                      />\n                    </div>\n                  )}\n                  \n                  {blockchain.id === 'evm' && walletType === 'evm' && (\n                    <Button\n                      onClick={handleEVMConnect}\n                      disabled={connecting || blockchain.isConnected}\n                      className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                    >\n                      {connecting ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                          Connecting...\n                        </>\n                      ) : blockchain.isConnected ? (\n                        'EVM Connected'\n                      ) : (\n                        'Connect EVM Wallet'\n                      )}\n                    </Button>\n                  )}\n                  \n                  {walletType !== blockchain.id && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setWalletType(blockchain.id)}\n                      className=\"w-full border-purple-500/30 text-gray-300 hover:bg-purple-500/10\"\n                    >\n                      Select {blockchain.name}\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n        \n        <div className=\"p-4 border-t border-purple-500/20\">\n          <p className=\"text-sm text-gray-400 text-center mb-4\">\n            Choose your blockchain network. IOTA and EVM are completely separate - transactions will only go to your selected network.\n          </p>\n          \n          {(isIOTAConnected || isEVMConnected) && (\n            <div className=\"flex justify-center\">\n              <Button\n                onClick={() => {\n                  onConnected();\n                  onClose();\n                }}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n              >\n                Enter Platform\n              </Button>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7363},"client/src/components/EVMStakingRewards.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { Badge } from \"./ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { useWallet } from \"./WalletProvider\";\nimport { \n  Coins, \n  TrendingUp, \n  Award, \n  ArrowUpCircle, \n  ArrowDownCircle,\n  Target,\n  Lock,\n  DollarSign,\n  Activity,\n  ExternalLink\n} from \"lucide-react\";\n\ninterface EVMStakingData {\n  stakedAmount: number;\n  rewardDebt: number;\n  cltBalance: number;\n  rewardRate: number;\n}\n\nexport default function EVMStakingRewards() {\n  const [stakingData, setStakingData] = useState<EVMStakingData>({\n    stakedAmount: 0,\n    rewardDebt: 0,\n    cltBalance: 0,\n    rewardRate: 0\n  });\n\n  const [stakeAmount, setStakeAmount] = useState(\"100\");\n  const [withdrawAmount, setWithdrawAmount] = useState(\"50\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [isStaking, setIsStaking] = useState(false);\n  const [isWithdrawing, setIsWithdrawing] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n\n  const { evmAddress, isEVMConnected } = useWallet();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (isEVMConnected && evmAddress) {\n      loadStakingData();\n    }\n  }, [isEVMConnected, evmAddress]);\n\n  const loadStakingData = async () => {\n    if (!evmAddress) return;\n\n    try {\n      setIsLoading(true);\n\n      // Get CLT balance\n      const cltBalanceBN = await evmContractService.getCLTBalance(evmAddress);\n      const cltBalance = parseFloat(evmContractService.formatCLT(cltBalanceBN));\n\n      // Get staking info\n      const stakeInfo = await evmContractService.getStakeInfo(evmAddress);\n      \n      const stakedAmount = parseFloat(evmContractService.formatCLT(stakeInfo.amount));\n      const rewardDebt = parseFloat(evmContractService.formatCLT(stakeInfo.rewardDebt));\n\n      setStakingData({\n        stakedAmount,\n        rewardDebt,\n        cltBalance,\n        rewardRate: 5.5 // This could be fetched from contract\n      });\n    } catch (error) {\n      console.error('Error loading staking data:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load staking data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleStake = async () => {\n    if (!stakeAmount || isNaN(Number(stakeAmount))) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid stake amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsStaking(true);\n      const amount = evmContractService.parseCLT(stakeAmount);\n      const tx = await evmContractService.stake(stakeAmount);\n      const receipt = await tx.wait();\n      const txHash = receipt.transactionHash;\n\n      if (txHash) {\n        toast({\n          title: \"Success!\",\n          description: (\n            <div className=\"flex items-center gap-2\">\n              <span>Stake transaction submitted</span>\n              <ExternalLink \n                className=\"h-4 w-4 cursor-pointer\" \n                onClick={() => window.open(`https://sepolia.scrollscan.com/tx/${txHash}`, '_blank')}\n              />\n            </div>\n          ),\n        });\n\n        // Reload data after successful stake\n        setTimeout(() => {\n          loadStakingData();\n        }, 2000);\n\n        setStakeAmount(\"100\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to stake tokens\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsStaking(false);\n    }\n  };\n\n  const handleWithdraw = async () => {\n    if (!withdrawAmount || isNaN(Number(withdrawAmount))) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid withdraw amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsWithdrawing(true);\n      const amount = evmContractService.parseCLT(withdrawAmount);\n      const tx = await evmContractService.withdraw(withdrawAmount);\n      const receipt = await tx.wait();\n      const txHash = receipt.transactionHash;\n\n      if (txHash) {\n        toast({\n          title: \"Success!\",\n          description: (\n            <div className=\"flex items-center gap-2\">\n              <span>Withdrawal transaction submitted</span>\n              <ExternalLink \n                className=\"h-4 w-4 cursor-pointer\" \n                onClick={() => window.open(`https://sepolia.scrollscan.com/tx/${txHash}`, '_blank')}\n              />\n            </div>\n          ),\n        });\n\n        // Reload data after successful withdrawal\n        setTimeout(() => {\n          loadStakingData();\n        }, 2000);\n\n        setWithdrawAmount(\"50\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to withdraw stake\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsWithdrawing(false);\n    }\n  };\n\n  const handleClaimRewards = async () => {\n    try {\n      setIsClaiming(true);\n      const txHash = await evmContractService.claimRewards();\n\n      if (txHash) {\n        toast({\n          title: \"Success!\",\n          description: (\n            <div className=\"flex items-center gap-2\">\n              <span>Rewards claimed successfully</span>\n              <ExternalLink \n                className=\"h-4 w-4 cursor-pointer\" \n                onClick={() => window.open(`https://sepolia.scrollscan.com/tx/${txHash}`, '_blank')}\n              />\n            </div>\n          ),\n        });\n\n        // Reload data after successful claim\n        setTimeout(() => {\n          loadStakingData();\n        }, 2000);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to claim rewards\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsClaiming(false);\n    }\n  };\n\n  if (!isEVMConnected) {\n    return (\n      <Card className=\"bg-slate-800/50 border-red-500/30 backdrop-blur-sm\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Lock className=\"h-8 w-8 text-red-400\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-red-400 mb-2\">EVM Wallet Not Connected</h3>\n          <p className=\"text-gray-400\">Please connect your MetaMask wallet to access EVM staking features</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"w-8 h-8 border-2 border-purple-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-400\">Loading EVM staking data...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Network Info */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-blue-900/20 border-green-500/30 backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Activity className=\"h-6 w-6 text-green-400\" />\n              <div>\n                <CardTitle className=\"text-green-400\">Scroll Sepolia Testnet</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  EVM-compatible staking on Scroll L2\n                </CardDescription>\n              </div>\n            </div>\n            <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n              Live\n            </Badge>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Staking Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"bg-slate-800/50 border-blue-500/30 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-blue-400\">CLT Balance</CardTitle>\n            <Coins className=\"h-4 w-4 text-blue-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stakingData.cltBalance.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-400\">Available CLT tokens</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-green-500/30 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-green-400\">Staked Amount</CardTitle>\n            <Lock className=\"h-4 w-4 text-green-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stakingData.stakedAmount.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-400\">CLT tokens staked</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-yellow-500/30 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-yellow-400\">Reward Debt</CardTitle>\n            <Award className=\"h-4 w-4 text-yellow-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stakingData.rewardDebt.toLocaleString()}</div>\n            <p className=\"text-xs text-gray-400\">Accumulated rewards</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-purple-500/30 backdrop-blur-sm\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-purple-400\">APR</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-purple-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stakingData.rewardRate}%</div>\n            <p className=\"text-xs text-gray-400\">Annual percentage rate</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Staking Actions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Stake CLT */}\n        <Card className=\"bg-slate-800/50 border-green-500/30 backdrop-blur-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-green-400 flex items-center gap-3\">\n              <ArrowUpCircle className=\"h-5 w-5\" />\n              Stake CLT Tokens\n            </CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Stake your CLT tokens to earn rewards\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"stakeAmount\" className=\"text-gray-300\">Amount to Stake</Label>\n              <Input\n                id=\"stakeAmount\"\n                type=\"number\"\n                value={stakeAmount}\n                onChange={(e) => setStakeAmount(e.target.value)}\n                className=\"bg-slate-700/50 border-gray-600 text-white\"\n                placeholder=\"Enter CLT amount\"\n              />\n            </div>\n            <Button\n              onClick={handleStake}\n              disabled={isStaking || !stakeAmount}\n              className=\"w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800\"\n            >\n              {isStaking ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                  Staking...\n                </div>\n              ) : (\n                <div className=\"flex items-center gap-2\">\n                  <ArrowUpCircle className=\"h-4 w-4\" />\n                  Stake {stakeAmount} CLT\n                </div>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Withdraw & Claim */}\n        <Card className=\"bg-slate-800/50 border-orange-500/30 backdrop-blur-sm\">\n          <CardHeader>\n            <CardTitle className=\"text-orange-400 flex items-center gap-3\">\n              <ArrowDownCircle className=\"h-5 w-5\" />\n              Withdraw & Claim\n            </CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Withdraw your staked tokens or claim rewards\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"withdrawAmount\" className=\"text-gray-300\">Amount to Withdraw</Label>\n              <Input\n                id=\"withdrawAmount\"\n                type=\"number\"\n                value={withdrawAmount}\n                onChange={(e) => setWithdrawAmount(e.target.value)}\n                className=\"bg-slate-700/50 border-gray-600 text-white\"\n                placeholder=\"Enter CLT amount\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                onClick={handleWithdraw}\n                disabled={isWithdrawing || !withdrawAmount || stakingData.stakedAmount === 0}\n                variant=\"outline\"\n                className=\"border-orange-500/30 text-orange-400 hover:bg-orange-500/10\"\n              >\n                {isWithdrawing ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-orange-400/30 border-t-orange-400 rounded-full animate-spin\" />\n                    Withdrawing...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <ArrowDownCircle className=\"h-4 w-4\" />\n                    Withdraw\n                  </div>\n                )}\n              </Button>\n\n              <Button\n                onClick={handleClaimRewards}\n                disabled={isClaiming || stakingData.rewardDebt === 0}\n                className=\"bg-gradient-to-r from-yellow-600 to-yellow-700 hover:from-yellow-700 hover:to-yellow-800\"\n              >\n                {isClaiming ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                    Claiming...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <Award className=\"h-4 w-4\" />\n                    Claim\n                  </div>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Contract Information */}\n      <Card className=\"bg-slate-800/50 border-gray-600/30 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-300\">Contract Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div>\n              <p className=\"text-gray-400\">CLT Token:</p>\n              <p className=\"text-white font-mono break-all\">0xBb647745eFfFD6a950d08cE6Dddc6D6c308D1403</p>\n            </div>\n            <div>\n              <p className=\"text-gray-400\">Staking Pool:</p>\n              <p className=\"text-white font-mono break-all\">0xB480FA23e8d586Af034aae3CA9a0D111E071a01e</p>\n            </div>\n            <div>\n              <p className=\"text-gray-400\">SOC Service:</p>\n              <p className=\"text-white font-mono break-all\">0x284B4cE9027b8f81211efd19A3a5D40D8b232D60</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16010},"client/src/components/IncidentReport.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Badge } from \"./ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { aiAssistant } from \"@/lib/ai-service\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport { useCurrentAccount, useSignTransaction, useIotaClient } from \"@iota/dapp-kit\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { createContractService } from \"@/lib/contract\";\nimport {\n  AlertTriangle,\n  Shield,\n  Brain,\n  FileText,\n  Send,\n  Clock,\n  User,\n  MapPin,\n  DollarSign,\n  Hash\n} from \"lucide-react\";\n// import { useContract } from \"@/lib/contract\";\n\ninterface IncidentData {\n  title: string;\n  description: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  affectedSystems: string;\n  estimatedLoss: string;\n  attackVector: string;\n  evidenceUrls: string;\n  contactInfo: string;\n}\n\nexport default function IncidentReport({ onClose }: { onClose: () => void }) {\n  const [reportMode, setReportMode] = useState<\"manual\" | \"ai-assisted\">(\"manual\");\n  const [userDescription, setUserDescription] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [incidentData, setIncidentData] = useState<IncidentData>({\n    title: \"\",\n    description: \"\",\n    severity: \"medium\",\n    affectedSystems: \"\",\n    estimatedLoss: \"\",\n    attackVector: \"\",\n    evidenceUrls: \"\",\n    contactInfo: \"\"\n  });\n\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [aiAnalysis, setAiAnalysis] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { walletType, isEVMConnected, isIOTAConnected } = useWallet();\n  const iotaAccount = useCurrentAccount();\n  const iotaClient = useIotaClient();\n  const { mutate: signTransaction } = useSignTransaction();\n\n  // Mutation for creating incident reports in the database\n  const createIncidentMutation = useMutation({\n    mutationFn: async (reportData: any) => {\n      return await apiRequest(\"/api/incident-reports\", {\n        method: \"POST\",\n        body: JSON.stringify(reportData),\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/incident-reports\"] });\n    }\n  });\n\n  const handleAIGeneration = async () => {\n    if (!userDescription.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please describe your security situation first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    try {\n      const generationPrompt = `\nBased on the following user description of a security incident, please generate a structured incident report with the following fields:\n\nUser Description: \"${userDescription}\"\n\nPlease analyze this and provide a JSON response with these fields:\n- title: A clear, concise title for the incident\n- description: A detailed technical description of what happened\n- severity: Choose from \"low\", \"medium\", \"high\", or \"critical\" based on the impact\n- affectedSystems: What systems, contracts, or platforms were affected\n- attackVector: The method or vulnerability used in the attack\n- estimatedLoss: If any financial loss is mentioned, estimate it\n- evidenceUrls: Any URLs, transaction hashes, or addresses mentioned\n\nRespond ONLY with valid JSON, no other text.\n      `;\n\n      const response = await aiAssistant.getChatResponse(generationPrompt);\n\n      try {\n        // Try to parse the JSON response\n        const parsedData = JSON.parse(response);\n\n        setIncidentData({\n          title: parsedData.title || \"\",\n          description: parsedData.description || \"\",\n          severity: parsedData.severity || \"medium\",\n          affectedSystems: parsedData.affectedSystems || \"\",\n          estimatedLoss: parsedData.estimatedLoss || \"\",\n          attackVector: parsedData.attackVector || \"\",\n          evidenceUrls: parsedData.evidenceUrls || \"\",\n          contactInfo: incidentData.contactInfo // Keep existing contact info\n        });\n\n        toast({\n          title: \"Report Generated\",\n          description: \"AI has generated your incident report. Please review and submit.\",\n        });\n      } catch (parseError) {\n        // If JSON parsing fails, use the response as description\n        setIncidentData(prev => ({\n          ...prev,\n          title: \"AI-Generated Incident Report\",\n          description: response\n        }));\n\n        toast({\n          title: \"Report Generated\",\n          description: \"AI has analyzed your situation. Please review the details.\",\n        });\n      }\n    } catch (error: any) {\n      console.error(\"AI generation error:\", error);\n      toast({\n        title: \"Generation Failed\",\n        description: `Failed to generate report: ${error.message || \"Unknown error\"}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleAIAnalysis = async () => {\n    if (!incidentData.description.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide incident description for AI analysis\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAnalyzing(true);\n    try {\n      const analysisPrompt = `\nSecurity Incident Analysis Request:\n\nTitle: ${incidentData.title}\nDescription: ${incidentData.description}\nSeverity: ${incidentData.severity}\nAffected Systems: ${incidentData.affectedSystems}\nAttack Vector: ${incidentData.attackVector}\nEstimated Loss: ${incidentData.estimatedLoss}\n\nPlease provide a comprehensive security incident analysis including:\n1. Incident classification and severity assessment\n2. Potential attack vectors and methods used\n3. Immediate containment recommendations\n4. Evidence collection guidance\n5. Recovery and mitigation steps\n6. Lessons learned and prevention measures\n\nProvide detailed technical analysis suitable for security analysts and certifiers.\n      `;\n\n      const analysis = await aiAssistant.analyzeVulnerability(analysisPrompt);\n      setAiAnalysis(analysis);\n\n      toast({\n        title: \"AI Analysis Complete\",\n        description: \"Security incident has been analyzed by AI\",\n      });\n    } catch (error: any) {\n      console.error(\"AI analysis error:\", error);\n      toast({\n        title: \"Analysis Failed\",\n        description: `Failed to analyze incident: ${error.message || \"Unknown error\"}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const handleSubmitTicket = async () => {\n    // Validate required fields\n    const missingFields = [];\n    if (!incidentData.title.trim()) missingFields.push(\"Title\");\n    if (!incidentData.description.trim()) missingFields.push(\"Description\");\n    if (!incidentData.contactInfo.trim()) missingFields.push(\"Contact Information\");\n\n    if (missingFields.length > 0) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: `Please fill in: ${missingFields.join(\", \")}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check wallet connection\n    if (walletType === 'iota' && !isIOTAConnected) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your IOTA wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (walletType === 'evm' && !isEVMConnected) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your EVM wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      let txHash = '';\n      const timestamp = new Date().toISOString();\n\n      // Create evidence data object\n      const evidenceData = {\n        title: incidentData.title,\n        description: incidentData.description,\n        severity: incidentData.severity,\n        contactInfo: incidentData.contactInfo,\n        affectedSystems: incidentData.affectedSystems,\n        estimatedLoss: incidentData.estimatedLoss,\n        attackVector: incidentData.attackVector,\n        evidenceUrls: incidentData.evidenceUrls,\n        aiAnalysis: aiAnalysis,\n        timestamp,\n        submissionType: 'incident_report'\n      };\n\n      // Completely separate blockchain handling - no mixing\n      if (walletType === 'evm' && isEVMConnected) {\n        console.log('=== EVM BLOCKCHAIN SUBMISSION ONLY ===');\n\n        toast({\n          title: \"Submitting to EVM (Scroll)\",\n          description: \"Creating transaction on Scroll network only...\",\n        });\n\n        try {\n          // EVM-only transaction - completely separate from IOTA\n          const result = await evmContractService.createTicket();\n          console.log('EVM-only ticket created:', result);\n\n          toast({\n            title: \"EVM Transaction Confirmed\",\n            description: `Ticket created on Scroll with ID: ${result.ticketId}`,\n          });\n\n          handleSuccessfulSubmission(result.txHash, evidenceData);\n\n        } catch (contractError: any) {\n          console.error('EVM Contract error:', contractError);\n\n          if (contractError.code === 4001) {\n            throw new Error('EVM transaction was rejected by user');\n          } else if (contractError.code === -32603 || contractError.code === 'INSUFFICIENT_FUNDS') {\n            throw new Error('Insufficient ETH for gas fees on Scroll');\n          } else if (contractError.code === 'UNPREDICTABLE_GAS_LIMIT') {\n            throw new Error('EVM contract may revert - check transaction');\n          } else if (contractError.reason) {\n            throw new Error(`EVM contract error: ${contractError.reason}`);\n          } else {\n            throw new Error(`EVM blockchain error: ${contractError.message || 'Unknown error'}`);\n          }\n        }\n\n      } else if (walletType === 'iota' && isIOTAConnected && iotaAccount && iotaClient) {\n        console.log('=== IOTA BLOCKCHAIN SUBMISSION ONLY ===');\n\n        toast({\n          title: \"Submitting to IOTA\",\n          description: \"Creating transaction on IOTA network only...\",\n        });\n\n        try {\n          const contractService = createContractService(iotaClient);\n\n          // IOTA-only transaction - completely separate from EVM\n          const transaction = await contractService.createTicket(\n            \"DUMMY_STORE_ID\", // This would need to be properly handled\n            evidenceData,\n            incidentData.title,\n            incidentData.description,\n            incidentData.category,\n            1000, // Default stake amount\n            iotaAccount.address\n          );\n\n          // Sign the transaction\n          signTransaction(\n            { transaction },\n            {\n              onSuccess: (result: any) => {\n                const txHash = result.digest || `iota_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n                console.log('IOTA transaction successful:', txHash);\n\n                toast({\n                  title: \"IOTA Transaction Confirmed\",\n                  description: `Incident stored on IOTA blockchain`,\n                });\n\n                handleSuccessfulSubmission(txHash, evidenceData);\n              },\n              onError: (error: any) => {\n                console.error('IOTA transaction failed:', error);\n                throw new Error(`IOTA transaction failed: ${error.message}`);\n              },\n            }\n          );\n\n          return; // Exit early for IOTA to avoid duplicate calls\n\n        } catch (iotaError: any) {\n          console.error('IOTA submission error:', iotaError);\n          throw new Error(`IOTA error: ${iotaError.message || 'Failed to submit to IOTA'}`);\n        }\n\n      } else {\n        throw new Error('No supported wallet connected');\n      }\n\n    } catch (error: any) {\n      console.error('Submission error:', error);\n\n      let errorMessage = \"Failed to submit to blockchain\";\n\n      if (error.message) {\n        errorMessage = error.message;\n      } else if (error.code === 4001) {\n        errorMessage = \"Transaction was rejected by user\";\n      } else if (error.code === -32603) {\n        errorMessage = \"Transaction failed - check your wallet balance\";\n      }\n\n      toast({\n        title: \"Submission Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSuccessfulSubmission = async (txHash: string, evidenceData: any) => {\n    try {\n      console.log('Storing incident report in backend...', { txHash, network: walletType });\n\n      // Store in backend for enhanced tracking and analyst notification\n      const reporterAddress = walletType === 'iota' \n        ? iotaAccount?.address \n        : await evmContractService.getSigner()?.getAddress();\n\n      const response = await fetch('/api/incident-reports', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...evidenceData,\n          status: 'submitted',\n          blockchainTxHash: txHash,\n          network: walletType,\n          reporter_address: reporterAddress,\n          estimatedReward: incidentData.estimatedLoss ? parseFloat(incidentData.estimatedLoss.replace(/[^0-9.]/g, '')) || 100 : 100,\n          requiredAnalysts: incidentData.severity === 'critical' ? 3 : incidentData.severity === 'high' ? 2 : 1,\n          submissionType: reportMode === 'ai-assisted' ? 'ai_generated_case' : 'manual_incident_report'\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.warn('Failed to store in backend database:', errorText);\n      } else {\n        console.log('Successfully stored incident report in backend');\n      }\n\n      toast({\n        title: \"Report Successfully Submitted!\",\n        description: `Incident report stored on ${walletType === 'iota' ? 'IOTA' : 'Scroll EVM'} blockchain. Security analysts will begin investigation.`,\n      });\n\n      // Trigger notification to analysts about new incident\n      window.dispatchEvent(new CustomEvent('newIncidentReported', { \n        detail: { \n          ...evidenceData, \n          txHash,\n          network: walletType,\n          type: 'incident_report'\n        } \n      }));\n\n      // Reset form\n      setIncidentData({\n        title: \"\",\n        description: \"\",\n        severity: \"medium\",\n        affectedSystems: \"\",\n        estimatedLoss: \"\",\n        attackVector: \"\",\n        evidenceUrls: \"\",\n        contactInfo: \"\"\n      });\n      setAiAnalysis(\"\");\n      setUserDescription(\"\");\n\n      // Close modal after a short delay\n      setTimeout(() => {\n        onClose();\n      }, 2000);\n\n    } catch (error) {\n      console.error('Backend storage error:', error);\n      toast({\n        title: \"Blockchain Success\",\n        description: \"Incident stored on blockchain successfully! Analysts will be notified.\",\n      });\n\n      // Still trigger analyst notification even if backend fails\n      window.dispatchEvent(new CustomEvent('newIncidentReported', { \n        detail: { \n          ...evidenceData, \n          txHash,\n          network: walletType,\n          type: 'incident_report'\n        } \n      }));\n\n      // Still close the modal even if backend fails\n      setTimeout(() => {\n        onClose();\n      }, 2000);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\": return \"bg-red-500/20 text-red-300 border-red-500/30\";\n      case \"high\": return \"bg-orange-500/20 text-orange-300 border-orange-500/30\";\n      case \"medium\": return \"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\";\n      case \"low\": return \"bg-green-500/20 text-green-300 border-green-500/30\";\n      default: return \"bg-gray-500/20 text-gray-300 border-gray-500/30\";\n    }\n  };\n\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      <div className=\"space-y-6 p-6\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <div className=\"flex items-center justify-center gap-3 mb-4\">\n          <div className=\"p-3 bg-gradient-to-r from-red-500 to-orange-500 rounded-full\">\n            <AlertTriangle className=\"h-8 w-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-red-400 to-orange-400 bg-clip-text text-transparent\">\n            Security Incident Report\n          </h1>\n        </div>\n        <p className=\"text-gray-400 text-lg\">\n          AI-powered incident reporting for the dSOC network\n        </p>\n      </div>\n\n      {/* Report Mode Selection */}\n      <Card className=\"bg-slate-800/50 border-blue-500/30\">\n        <CardHeader>\n          <CardTitle className=\"text-blue-400 flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Report Mode\n          </CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            Choose how you want to create your incident report\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <Button\n              variant={reportMode === \"manual\" ? \"default\" : \"outline\"}\n              onClick={() => setReportMode(\"manual\")}\n              className={`h-auto p-4 flex flex-col items-start space-y-2 ${\n                reportMode === \"manual\"\n                  ? \"bg-blue-600 hover:bg-blue-700 border-blue-500\"\n                  : \"border-gray-600 hover:border-blue-500\"\n              }`}\n            >\n              <div className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                <span className=\"font-medium\">Manual Input</span>\n              </div>\n              <p className=\"text-sm text-left opacity-80\">\n                Fill out the incident details manually using structured forms\n              </p>\n            </Button>\n\n            <Button\n              variant={reportMode === \"ai-assisted\" ? \"default\" : \"outline\"}\n              onClick={() => setReportMode(\"ai-assisted\")}\n              className={`h-auto p-4 flex flex-col items-start space-y-2 ${\n                reportMode === \"ai-assisted\"\n                  ? \"bg-purple-600 hover:bg-purple-700 border-purple-500\"\n                  : \"border-gray-600 hover:border-purple-500\"\n              }`}\n            >\n              <div className=\"flex items-center gap-2\">\n                <Brain className=\"h-5 w-5\" />\n                <span className=\"font-medium\">AI-Assisted</span>\n              </div>\n              <p className=\"text-sm text-left opacity-80\">\n                Describe your situation and let AI generate the structured report\n              </p>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI-Assisted Mode */}\n      {reportMode === \"ai-assisted\" && (\n        <Card className=\"bg-slate-800/50 border-purple-500/30\">\n          <CardHeader>\n            <CardTitle className=\"text-purple-400 flex items-center gap-2\">\n              <Brain className=\"h-5 w-5\" />\n              Describe Your Situation\n            </CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Tell us what happened in your own words - AI will structure the report for you\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Textarea\n              value={userDescription}\n              onChange={(e) => setUserDescription(e.target.value)}\n              placeholder=\"Describe what happened... For example: 'My wallet was drained after clicking a suspicious link. I lost about $5000 worth of tokens. The transaction happened on Ethereum mainnet around 2 hours ago. I have the transaction hash and can provide screenshots...'\"\n              className=\"bg-slate-700/50 border-gray-600 text-white min-h-[150px]\"\n            />\n\n            <Button\n              onClick={handleAIGeneration}\n              disabled={isGenerating || !userDescription.trim()}\n              className=\"bg-purple-600 hover:bg-purple-700 w-full\"\n            >\n              {isGenerating ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2\" />\n                  Generating Report...\n                </>\n              ) : (\n                <>\n                  <Brain className=\"h-4 w-4 mr-2\" />\n                  Generate Incident Report\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Incident Form - Show when manual mode OR when AI has generated data */}\n      {(reportMode === \"manual\" || (reportMode === \"ai-assisted\" && incidentData.title)) && (\n      <Card className=\"bg-slate-800/50 border-red-500/30\">\n        <CardHeader>\n          <CardTitle className=\"text-red-400 flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Incident Details\n          </CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            Provide detailed information about the security incident\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Title & Severity */}\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">Incident Title *</label>\n              <Input\n                value={incidentData.title}\n                onChange={(e) => setIncidentData(prev => ({ ...prev, title: e.target.value }))}\n                placeholder=\"Brief description of the incident\"\n                className=\"bg-slate-700/50 border-gray-600 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">Severity Level *</label>\n              <select\n                value={incidentData.severity}\n                onChange={(e) => setIncidentData(prev => ({ ...prev, severity: e.target.value as any }))}\n                className=\"w-full p-2 bg-slate-700/50 border border-gray-600 rounded-md text-white\"\n              >\n                <option value=\"low\">Low</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"high\">High</option>\n                <option value=\"critical\">Critical</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-300\">Incident Description *</label>\n            <Textarea\n              value={incidentData.description}\n              onChange={(e) => setIncidentData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Detailed description of what happened, when it occurred, and how it was discovered...\"\n              className=\"bg-slate-700/50 border-gray-600 text-white min-h-[120px]\"\n            />\n          </div>\n\n          {/* Affected Systems & Attack Vector */}\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">Affected Systems</label>\n              <Input\n                value={incidentData.affectedSystems}\n                onChange={(e) => setIncidentData(prev => ({ ...prev, affectedSystems: e.target.value }))}\n                placeholder=\"Smart contracts, wallets, exchanges...\"\n                className=\"bg-slate-700/50 border-gray-600 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">Attack Vector</label>\n              <Input\n                value={incidentData.attackVector}\n                onChange={(e) => setIncidentData(prev => ({ ...prev, attackVector: e.target.value }))}\n                placeholder=\"Flash loan, bridge exploit, phishing...\"\n                className=\"bg-slate-700/50 border-gray-600 text-white\"\n              />\n            </div>\n          </div>\n\n          {/* Loss & Contact */}\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">Estimated Loss</label>\n              <Input\n                value={incidentData.estimatedLoss}\n                onChange={(e) => setIncidentData(prev => ({ ...prev, estimatedLoss: e.target.value }))}\n                placeholder=\"$50,000 USD or 100 ETH\"\n                className=\"bg-slate-700/50 border-gray-600 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">Contact Information *</label>\n              <Input\n                value={incidentData.contactInfo}\n                onChange={(e) => setIncidentData(prev => ({ ...prev, contactInfo: e.target.value }))}\n                placeholder=\"Email or Telegram handle\"\n                className=\"bg-slate-700/50 border-gray-600 text-white\"\n              />\n            </div>\n          </div>\n\n          {/* Evidence URLs */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-300\">Evidence URLs</label>\n            <Textarea\n              value={incidentData.evidenceUrls}\n              onChange={(e) => setIncidentData(prev => ({ ...prev, evidenceUrls: e.target.value }))}\n              placeholder=\"Transaction hashes, block explorer links, screenshots (one per line)...\"\n              className=\"bg-slate-700/50 border-gray-600 text-white\"\n            />\n          </div>\n\n          {/* Current Severity Badge */}\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm text-gray-400\">Current Severity:</span>\n            <Badge className={getSeverityColor(incidentData.severity)}>\n              {incidentData.severity.toUpperCase()}\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n      )}\n\n      {/* AI Analysis Section */}\n      {(reportMode === \"manual\" || (reportMode === \"ai-assisted\" && incidentData.title)) && (\n        <>\n        <Card className=\"bg-slate-800/50 border-purple-500/30\">\n        <CardHeader>\n          <CardTitle className=\"text-purple-400 flex items-center gap-2\">\n            <Brain className=\"h-5 w-5\" />\n            AI Security Analysis\n          </CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            Get AI-powered analysis before submitting to analysts\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button\n            onClick={handleAIAnalysis}\n            disabled={isAnalyzing || !incidentData.description.trim()}\n            className=\"bg-purple-600 hover:bg-purple-700 w-full\"\n          >\n            {isAnalyzing ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2\" />\n                Analyzing Incident...\n              </>\n            ) : (\n              <>\n                <Brain className=\"h-4 w-4 mr-2\" />\n                Run AI Analysis\n              </>\n            )}\n          </Button>\n\n          {aiAnalysis && (\n            <div className=\"bg-slate-900/70 border border-gray-600/30 rounded-lg p-4 max-h-60 overflow-y-auto\">\n              <h4 className=\"text-purple-300 font-medium mb-2\">AI Analysis Results:</h4>\n              <div className=\"whitespace-pre-wrap text-gray-300 text-sm leading-relaxed\">\n                {aiAnalysis}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Submit Section */}\n      <Card className=\"bg-slate-800/50 border-green-500/30\">\n        <CardHeader>\n          <CardTitle className=\"text-green-400 flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Submit to dSOC Network\n          </CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            Submit incident to security analysts for investigation\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-lg p-4\">\n            <h4 className=\"text-blue-300 font-medium mb-2\">What happens next:</h4>\n            <div className=\"space-y-1 text-sm text-blue-200\">\n              <p>• <strong>Analyst Review:</strong> Security experts will analyze your incident</p>\n              <p>• <strong>Investigation:</strong> Detailed forensic analysis and evidence collection</p>\n              <p>• <strong>Certification:</strong> Final report certified by independent validators</p>\n              <p>• <strong>Resolution:</strong> Recommendations and recovery assistance</p>\n            </div>\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button\n              onClick={handleSubmitTicket}\n              disabled={isSubmitting || !incidentData.title.trim() || !incidentData.description.trim() || !incidentData.contactInfo.trim()}\n              className=\"bg-green-600 hover:bg-green-700 flex-1 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isSubmitting ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2\" />\n                  Submitting to {walletType === 'iota' ? 'IOTA' : 'Scroll EVM'}...\n                </>\n              ) : (\n                <>\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Submit Incident Report\n                </>\n              )}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"border-gray-600 text-gray-300 hover:border-red-500 hover:text-white\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n        </>\n      )}\n    </div>\n    </div>\n  );\n}","size_bytes":30318},"client/src/components/PoolTicketForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { \n  Plus, \n  Coins, \n  Users, \n  Clock, \n  AlertTriangle, \n  Shield, \n  Target,\n  DollarSign,\n  FileText,\n  Camera,\n  Upload\n} from \"lucide-react\";\n\ninterface PoolTicket {\n  id: string;\n  title: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  rewardAmount: string;\n  requiredAnalysts: number;\n  timeline: string;\n  status: 'open' | 'in_progress' | 'completed' | 'verified';\n  submittedBy: string;\n  createdAt: string;\n}\n\nexport default function PoolTicketForm({ onClose }: { onClose: () => void }) {\n  const { walletType, evmAddress, iotaAddress, isEVMConnected, isIOTAConnected } = useWallet();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    severity: '',\n    rewardAmount: '',\n    requiredAnalysts: 1,\n    timeline: '',\n    attachments: [] as File[]\n  });\n  \n  const [loading, setLoading] = useState(false);\n\n  const isConnected = walletType === 'iota' ? isIOTAConnected : isEVMConnected;\n  const currentAddress = walletType === 'iota' ? iotaAddress : evmAddress;\n\n  const severityColors = {\n    low: 'bg-green-500/20 text-green-400 border-green-500/30',\n    medium: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30', \n    high: 'bg-orange-500/20 text-orange-400 border-orange-500/30',\n    critical: 'bg-red-500/20 text-red-400 border-red-500/30'\n  };\n\n  const getSeverityMultiplier = (severity: string) => {\n    switch (severity) {\n      case 'low': return 1;\n      case 'medium': return 1.5;\n      case 'high': return 2;\n      case 'critical': return 3;\n      default: return 1;\n    }\n  };\n\n  const calculateRewardPool = () => {\n    const baseAmount = parseFloat(formData.rewardAmount) || 0;\n    const severityMultiplier = getSeverityMultiplier(formData.severity);\n    const analystMultiplier = formData.requiredAnalysts;\n    return (baseAmount * severityMultiplier * analystMultiplier).toFixed(2);\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    setFormData(prev => ({\n      ...prev,\n      attachments: [...prev.attachments, ...files]\n    }));\n  };\n\n  const removeAttachment = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      attachments: prev.attachments.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleSubmit = async () => {\n    if (!isConnected) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your wallet to submit a pool ticket\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!formData.title || !formData.description || !formData.severity || !formData.rewardAmount) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const totalReward = calculateRewardPool();\n      \n      if (walletType === 'evm') {\n        // Submit to EVM smart contract\n        const tx = await evmContractService.openPool({\n          title: formData.title,\n          description: formData.description,\n          severity: formData.severity,\n          rewardAmount: totalReward,\n          requiredAnalysts: formData.requiredAnalysts,\n          timeline: formData.timeline\n        });\n        \n        await tx.wait();\n        \n        toast({\n          title: \"Pool Ticket Submitted\",\n          description: `Successfully opened pool with ${totalReward} CLT reward on Scroll EVM`,\n        });\n      } else {\n        // Submit to IOTA smart contract (mock for now)\n        toast({\n          title: \"Pool Ticket Submitted\", \n          description: `Successfully opened pool with ${totalReward} CLT reward on IOTA`,\n        });\n      }\n\n      // Store ticket details locally/backend for tracking\n      const ticket: PoolTicket = {\n        id: Date.now().toString(),\n        title: formData.title,\n        description: formData.description,\n        severity: formData.severity as any,\n        rewardAmount: totalReward,\n        requiredAnalysts: formData.requiredAnalysts,\n        timeline: formData.timeline,\n        status: 'open',\n        submittedBy: currentAddress || '',\n        createdAt: new Date().toISOString()\n      };\n\n      // Here you would typically send to backend\n      console.log('New pool ticket:', ticket);\n      \n      onClose();\n      \n      // Trigger refresh of ticket list\n      window.dispatchEvent(new CustomEvent('poolTicketSubmitted', { detail: ticket }));\n      \n    } catch (error: any) {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Failed to submit pool ticket\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isConnected) {\n    return (\n      <div className=\"p-6 text-center\">\n        <Shield className=\"h-16 w-16 text-purple-400 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-bold text-white mb-2\">Connect Wallet Required</h3>\n        <p className=\"text-gray-400 mb-4\">\n          You need to connect your wallet to submit a pool ticket\n        </p>\n        <Button onClick={onClose} variant=\"outline\">\n          Go Back\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <div className=\"text-center mb-6\">\n        <h2 className=\"text-2xl font-bold text-white mb-2\">Submit Pool Ticket</h2>\n        <p className=\"text-gray-400\">\n          Create a security analysis pool and set rewards for analysts\n        </p>\n        <Badge className=\"bg-purple-500/20 text-purple-300 border-purple-500/30 mt-2\">\n          {walletType === 'iota' ? 'IOTA Network' : 'Scroll EVM'}\n        </Badge>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Main Form */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card className=\"bg-slate-800 border-purple-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Ticket Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\" className=\"text-gray-300\">\n                  Title *\n                </Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"Brief description of the security issue\"\n                  value={formData.title}\n                  onChange={(e) => handleInputChange('title', e.target.value)}\n                  className=\"bg-slate-700 border-purple-500/30 text-white\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\" className=\"text-gray-300\">\n                  Description *\n                </Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Detailed description of the security issue, affected systems, and analysis requirements\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  className=\"bg-slate-700 border-purple-500/30 text-white min-h-[120px]\"\n                />\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"severity\" className=\"text-gray-300\">\n                    Severity Level *\n                  </Label>\n                  <Select \n                    value={formData.severity} \n                    onValueChange={(value) => handleInputChange('severity', value)}\n                  >\n                    <SelectTrigger className=\"bg-slate-700 border-purple-500/30 text-white\">\n                      <SelectValue placeholder=\"Select severity\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-purple-500/30\">\n                      <SelectItem value=\"low\">\n                        <Badge className={severityColors.low}>Low</Badge>\n                      </SelectItem>\n                      <SelectItem value=\"medium\">\n                        <Badge className={severityColors.medium}>Medium</Badge>\n                      </SelectItem>\n                      <SelectItem value=\"high\">\n                        <Badge className={severityColors.high}>High</Badge>\n                      </SelectItem>\n                      <SelectItem value=\"critical\">\n                        <Badge className={severityColors.critical}>Critical</Badge>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"timeline\" className=\"text-gray-300\">\n                    Expected Timeline\n                  </Label>\n                  <Select \n                    value={formData.timeline} \n                    onValueChange={(value) => handleInputChange('timeline', value)}\n                  >\n                    <SelectTrigger className=\"bg-slate-700 border-purple-500/30 text-white\">\n                      <SelectValue placeholder=\"Select timeline\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-purple-500/30\">\n                      <SelectItem value=\"urgent\">Urgent (24 hours)</SelectItem>\n                      <SelectItem value=\"high\">High (3 days)</SelectItem>\n                      <SelectItem value=\"normal\">Normal (1 week)</SelectItem>\n                      <SelectItem value=\"low\">Low (2 weeks)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"reward\" className=\"text-gray-300\">\n                    Base Reward Amount (CLT) *\n                  </Label>\n                  <Input\n                    id=\"reward\"\n                    type=\"number\"\n                    placeholder=\"100\"\n                    value={formData.rewardAmount}\n                    onChange={(e) => handleInputChange('rewardAmount', e.target.value)}\n                    className=\"bg-slate-700 border-purple-500/30 text-white\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"analysts\" className=\"text-gray-300\">\n                    Required Analysts\n                  </Label>\n                  <Select \n                    value={formData.requiredAnalysts.toString()} \n                    onValueChange={(value) => handleInputChange('requiredAnalysts', parseInt(value))}\n                  >\n                    <SelectTrigger className=\"bg-slate-700 border-purple-500/30 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-slate-800 border-purple-500/30\">\n                      <SelectItem value=\"1\">1 Analyst</SelectItem>\n                      <SelectItem value=\"2\">2 Analysts</SelectItem>\n                      <SelectItem value=\"3\">3 Analysts</SelectItem>\n                      <SelectItem value=\"5\">5 Analysts</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* File Upload */}\n              <div>\n                <Label className=\"text-gray-300 mb-2 block\">\n                  Attachments (Optional)\n                </Label>\n                <div className=\"border-2 border-dashed border-purple-500/30 rounded-lg p-4 text-center\">\n                  <input\n                    type=\"file\"\n                    multiple\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                    id=\"file-upload\"\n                    accept=\".pdf,.doc,.docx,.txt,.jpg,.png,.zip\"\n                  />\n                  <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                    <Upload className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-gray-400\">Click to upload files or drag and drop</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      PDF, DOC, images, archives (max 10MB each)\n                    </p>\n                  </label>\n                </div>\n\n                {formData.attachments.length > 0 && (\n                  <div className=\"mt-3 space-y-2\">\n                    {formData.attachments.map((file, index) => (\n                      <div key={index} className=\"flex items-center justify-between bg-slate-700 rounded p-2\">\n                        <span className=\"text-sm text-gray-300\">{file.name}</span>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => removeAttachment(index)}\n                          className=\"text-red-400 hover:text-red-300\"\n                        >\n                          Remove\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Reward Summary */}\n        <div className=\"space-y-6\">\n          <Card className=\"bg-slate-800 border-green-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-green-400 flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5\" />\n                Reward Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Base Amount:</span>\n                  <span className=\"text-white\">{formData.rewardAmount || '0'} CLT</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Severity Multiplier:</span>\n                  <span className=\"text-white\">{getSeverityMultiplier(formData.severity)}x</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Analysts Required:</span>\n                  <span className=\"text-white\">{formData.requiredAnalysts}</span>\n                </div>\n                <div className=\"border-t border-gray-600 pt-2\">\n                  <div className=\"flex justify-between font-bold\">\n                    <span className=\"text-gray-300\">Total Pool:</span>\n                    <span className=\"text-green-400\">{calculateRewardPool()} CLT</span>\n                  </div>\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  * Rewards distributed equally among qualified analysts upon completion\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-blue-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-blue-400 flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Process Flow\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                  <span className=\"text-gray-300\">Pool opens for analyst participation</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-yellow-400 rounded-full\"></div>\n                  <span className=\"text-gray-300\">Analysts submit security analysis</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-purple-400 rounded-full\"></div>\n                  <span className=\"text-gray-300\">Certifiers validate submissions</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                  <span className=\"text-gray-300\">Rewards distributed automatically</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-3\">\n            <Button\n              onClick={handleSubmit}\n              disabled={loading || !formData.title || !formData.description || !formData.severity || !formData.rewardAmount}\n              className=\"w-full bg-purple-600 hover:bg-purple-700\"\n            >\n              {loading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                  Submitting...\n                </>\n              ) : (\n                <>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Submit Pool Ticket\n                </>\n              )}\n            </Button>\n            \n            <Button\n              onClick={onClose}\n              variant=\"outline\"\n              className=\"w-full border-gray-600 text-gray-300\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18245},"client/src/components/PoolTicketList.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { \n  Clock, \n  Users, \n  Coins, \n  FileText, \n  CheckCircle, \n  AlertTriangle, \n  Play,\n  Award,\n  Eye,\n  UserCheck\n} from \"lucide-react\";\n\ninterface PoolTicket {\n  id: string;\n  title: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  rewardAmount: string;\n  requiredAnalysts: number;\n  timeline: string;\n  status: 'open' | 'in_progress' | 'completed' | 'verified';\n  submittedBy: string;\n  createdAt: string;\n  participatingAnalysts?: string[];\n  submissions?: any[];\n}\n\nexport default function PoolTicketList() {\n  const { walletType, evmAddress, iotaAddress, isEVMConnected, isIOTAConnected } = useWallet();\n  const { toast } = useToast();\n  \n  const [tickets, setTickets] = useState<PoolTicket[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTicket, setSelectedTicket] = useState<PoolTicket | null>(null);\n\n  const isConnected = walletType === 'iota' ? isIOTAConnected : isEVMConnected;\n  const currentAddress = walletType === 'iota' ? iotaAddress : evmAddress;\n\n  const severityColors = {\n    low: 'bg-green-500/20 text-green-400 border-green-500/30',\n    medium: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30', \n    high: 'bg-orange-500/20 text-orange-400 border-orange-500/30',\n    critical: 'bg-red-500/20 text-red-400 border-red-500/30'\n  };\n\n  const statusColors = {\n    open: 'bg-blue-500/20 text-blue-400 border-blue-500/30',\n    in_progress: 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30',\n    completed: 'bg-purple-500/20 text-purple-400 border-purple-500/30',\n    verified: 'bg-green-500/20 text-green-400 border-green-500/30'\n  };\n\n  // Mock data for demonstration\n  const mockTickets: PoolTicket[] = [\n    {\n      id: '1',\n      title: 'Smart Contract Vulnerability Assessment',\n      description: 'Analyze potential reentrancy vulnerabilities in DeFi lending protocol',\n      severity: 'high',\n      rewardAmount: '500',\n      requiredAnalysts: 2,\n      timeline: 'high',\n      status: 'open',\n      submittedBy: '0x1234...5678',\n      createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n      participatingAnalysts: []\n    },\n    {\n      id: '2', \n      title: 'API Security Review',\n      description: 'Comprehensive security audit of REST API endpoints and authentication mechanisms',\n      severity: 'medium',\n      rewardAmount: '250',\n      requiredAnalysts: 1,\n      timeline: 'normal',\n      status: 'in_progress',\n      submittedBy: '0x9876...4321',\n      createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n      participatingAnalysts: ['0xaaaa...bbbb']\n    },\n    {\n      id: '3',\n      title: 'Critical Infrastructure Breach Analysis',\n      description: 'Immediate investigation of suspected APT activity in network infrastructure',\n      severity: 'critical',\n      rewardAmount: '1000',\n      requiredAnalysts: 3,\n      timeline: 'urgent',\n      status: 'completed',\n      submittedBy: '0x5555...6666',\n      createdAt: new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString(),\n      participatingAnalysts: ['0xaaaa...bbbb', '0xcccc...dddd', '0xeeee...ffff']\n    }\n  ];\n\n  useEffect(() => {\n    loadTickets();\n    \n    // Listen for new tickets\n    const handleNewTicket = (event: CustomEvent) => {\n      setTickets(prev => [event.detail, ...prev]);\n    };\n    \n    window.addEventListener('poolTicketSubmitted', handleNewTicket as EventListener);\n    \n    return () => {\n      window.removeEventListener('poolTicketSubmitted', handleNewTicket as EventListener);\n    };\n  }, [isConnected, walletType]);\n\n  const loadTickets = async () => {\n    setLoading(true);\n    try {\n      // In a real implementation, load from smart contracts and backend\n      if (walletType === 'evm' && isEVMConnected) {\n        // Load from EVM smart contract\n        // const contractTickets = await evmContractService.getOpenPools();\n        setTickets(mockTickets);\n      } else if (walletType === 'iota' && isIOTAConnected) {\n        // Load from IOTA smart contract\n        setTickets(mockTickets);\n      } else {\n        setTickets([]);\n      }\n    } catch (error) {\n      console.error('Failed to load tickets:', error);\n      setTickets(mockTickets); // Fallback to mock data\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const joinPool = async (ticketId: string) => {\n    if (!isConnected) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your wallet to join a pool\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      if (walletType === 'evm') {\n        // Join pool via EVM smart contract\n        const tx = await evmContractService.joinPool(ticketId);\n        await tx.wait();\n        \n        toast({\n          title: \"Joined Pool\",\n          description: \"Successfully joined the analysis pool on Scroll EVM\",\n        });\n      } else {\n        // Join pool via IOTA smart contract (mock)\n        toast({\n          title: \"Joined Pool\",\n          description: \"Successfully joined the analysis pool on IOTA\",\n        });\n      }\n\n      // Update local state\n      setTickets(prev => prev.map(ticket => \n        ticket.id === ticketId \n          ? { \n              ...ticket, \n              status: 'in_progress' as const,\n              participatingAnalysts: [...(ticket.participatingAnalysts || []), currentAddress || '']\n            }\n          : ticket\n      ));\n\n    } catch (error: any) {\n      toast({\n        title: \"Failed to Join Pool\",\n        description: error.message || \"Failed to join the analysis pool\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitAnalysis = async (ticketId: string) => {\n    if (!isConnected) {\n      toast({\n        title: \"Wallet Not Connected\", \n        description: \"Please connect your wallet to submit analysis\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // This would open a detailed analysis submission form\n    toast({\n      title: \"Analysis Submission\",\n      description: \"Opening analysis submission form...\",\n    });\n    \n    // Here you would open a modal or navigate to analysis submission page\n    window.dispatchEvent(new CustomEvent('openAnalysisSubmission', { \n      detail: { ticketId } \n    }));\n  };\n\n  const claimReward = async (ticketId: string) => {\n    if (!isConnected) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your wallet to claim rewards\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      if (walletType === 'evm') {\n        // Claim reward via EVM smart contract\n        const tx = await evmContractService.claimPoolReward(ticketId);\n        await tx.wait();\n        \n        toast({\n          title: \"Reward Claimed\",\n          description: \"Successfully claimed your analysis reward\",\n        });\n      } else {\n        // Claim reward via IOTA smart contract (mock)\n        toast({\n          title: \"Reward Claimed\",\n          description: \"Successfully claimed your analysis reward on IOTA\",\n        });\n      }\n\n    } catch (error: any) {\n      toast({\n        title: \"Failed to Claim Reward\",\n        description: error.message || \"Failed to claim reward\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffInHours = Math.floor((now.getTime() - time.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays}d ago`;\n  };\n\n  const getActionButton = (ticket: PoolTicket) => {\n    const isParticipating = ticket.participatingAnalysts?.includes(currentAddress || '');\n    const isOwner = ticket.submittedBy === currentAddress;\n\n    if (isOwner) {\n      return (\n        <Button size=\"sm\" variant=\"outline\" disabled>\n          <Eye className=\"h-4 w-4 mr-2\" />\n          Owner\n        </Button>\n      );\n    }\n\n    switch (ticket.status) {\n      case 'open':\n        return (\n          <Button \n            size=\"sm\" \n            onClick={() => joinPool(ticket.id)}\n            disabled={loading}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            <Play className=\"h-4 w-4 mr-2\" />\n            Join Pool\n          </Button>\n        );\n      \n      case 'in_progress':\n        if (isParticipating) {\n          return (\n            <Button \n              size=\"sm\" \n              onClick={() => submitAnalysis(ticket.id)}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n            >\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Submit Analysis\n            </Button>\n          );\n        }\n        return (\n          <Button size=\"sm\" variant=\"outline\" disabled>\n            <Users className=\"h-4 w-4 mr-2\" />\n            In Progress\n          </Button>\n        );\n\n      case 'completed':\n        if (isParticipating) {\n          return (\n            <Button \n              size=\"sm\" \n              onClick={() => claimReward(ticket.id)}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Award className=\"h-4 w-4 mr-2\" />\n              Claim Reward\n            </Button>\n          );\n        }\n        return (\n          <Button size=\"sm\" variant=\"outline\" disabled>\n            <CheckCircle className=\"h-4 w-4 mr-2\" />\n            Completed\n          </Button>\n        );\n\n      case 'verified':\n        return (\n          <Button size=\"sm\" variant=\"outline\" disabled>\n            <UserCheck className=\"h-4 w-4 mr-2\" />\n            Verified\n          </Button>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  if (!isConnected) {\n    return (\n      <div className=\"text-center p-8\">\n        <Users className=\"h-16 w-16 text-purple-400 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-bold text-white mb-2\">Connect Wallet</h3>\n        <p className=\"text-gray-400\">\n          Connect your wallet to view and participate in security analysis pools\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\">Security Analysis Pools</h2>\n          <p className=\"text-gray-400\">\n            Join pools, contribute analysis, and earn CLT rewards\n          </p>\n        </div>\n        \n        <Badge className=\"bg-purple-500/20 text-purple-300 border-purple-500/30\">\n          {walletType === 'iota' ? 'IOTA Network' : 'Scroll EVM'} • {tickets.length} Pools\n        </Badge>\n      </div>\n\n      {loading ? (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400 mx-auto\"></div>\n          <p className=\"text-gray-400 mt-2\">Loading pools...</p>\n        </div>\n      ) : tickets.length === 0 ? (\n        <Card className=\"bg-slate-800 border-purple-500/20\">\n          <CardContent className=\"text-center py-12\">\n            <FileText className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-bold text-white mb-2\">No Pools Available</h3>\n            <p className=\"text-gray-400\">\n              Be the first to submit a security analysis pool ticket\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6\">\n          {tickets.map((ticket) => (\n            <Card key={ticket.id} className=\"bg-slate-800 border-purple-500/20 hover:border-purple-500/40 transition-colors\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <CardTitle className=\"text-white\">{ticket.title}</CardTitle>\n                      <Badge className={severityColors[ticket.severity]}>\n                        {ticket.severity.toUpperCase()}\n                      </Badge>\n                      <Badge className={statusColors[ticket.status]}>\n                        {ticket.status.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                    </div>\n                    <CardDescription className=\"text-gray-300\">\n                      {ticket.description}\n                    </CardDescription>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    {getActionButton(ticket)}\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center gap-6\">\n                    <div className=\"flex items-center gap-2 text-green-400\">\n                      <Coins className=\"h-4 w-4\" />\n                      <span>{ticket.rewardAmount} CLT</span>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2 text-blue-400\">\n                      <Users className=\"h-4 w-4\" />\n                      <span>{ticket.participatingAnalysts?.length || 0}/{ticket.requiredAnalysts} analysts</span>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2 text-gray-400\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>{formatTimeAgo(ticket.createdAt)}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-gray-500 text-xs\">\n                    By {ticket.submittedBy.slice(0, 6)}...{ticket.submittedBy.slice(-4)}\n                  </div>\n                </div>\n\n                {ticket.participatingAnalysts && ticket.participatingAnalysts.length > 0 && (\n                  <div className=\"mt-3 pt-3 border-t border-gray-700\">\n                    <div className=\"text-xs text-gray-400 mb-1\">Participating Analysts:</div>\n                    <div className=\"flex gap-2\">\n                      {ticket.participatingAnalysts.map((analyst, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {analyst.slice(0, 6)}...{analyst.slice(-4)}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15064},"client/src/components/StakingPoolPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport JobStakingDashboard from \"./JobStakingDashboard\";\nimport EVMStakingRewards from \"./EVMStakingRewards\";\nimport Header from \"./Header\";\nimport { \n  Coins, \n  TrendingUp, \n  Shield, \n  BarChart3,\n  Target,\n  Briefcase,\n  DollarSign\n} from \"lucide-react\";\n\nexport default function StakingPoolPage() {\n  const [currentRole, setCurrentRole] = useState('client');\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-900 to-slate-800\">\n      <Header onRoleChange={setCurrentRole} currentRole={currentRole} />\n    \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-white mb-2\">Staking Dashboard</h1>\n          <p className=\"text-gray-400\">Monitor your staking positions, job stakes, and earnings across the dSOC platform</p>\n        </div>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-slate-800 border-purple-500/30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Total Value Locked</CardTitle>\n              <Shield className=\"h-4 w-4 text-purple-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">$2.4M</div>\n              <p className=\"text-xs text-green-400 mt-1\">\n                +12.5% from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-purple-500/30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Active Stakers</CardTitle>\n              <Target className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">1,247</div>\n              <p className=\"text-xs text-blue-400 mt-1\">\n                +89 new this week\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-purple-500/30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Average APY</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">14.8%</div>\n              <p className=\"text-xs text-green-400 mt-1\">\n                Above market average\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-purple-500/30\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-400\">Security Jobs</CardTitle>\n              <BarChart3 className=\"h-4 w-4 text-orange-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">342</div>\n              <p className=\"text-xs text-orange-400 mt-1\">\n                156 active positions\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"job-stakes\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-slate-800 border-slate-700\">\n            <TabsTrigger \n              value=\"job-stakes\" \n              className=\"data-[state=active]:bg-purple-600 data-[state=active]:text-white\"\n            >\n              <Briefcase className=\"h-4 w-4 mr-2\" />\n              Job Stakes & Earnings\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"general-staking\"\n              className=\"data-[state=active]:bg-purple-600 data-[state=active]:text-white\"\n            >\n              <Coins className=\"h-4 w-4 mr-2\" />\n              General Staking Pool\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"job-stakes\" className=\"space-y-6\">\n            <Card className=\"bg-slate-800 border-purple-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5 text-green-400\" />\n                  Job-Based Staking Dashboard\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Track your staking positions on specific security analysis jobs and monitor real-time earnings\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <JobStakingDashboard />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"general-staking\" className=\"space-y-6\">\n            <Card className=\"bg-slate-800 border-purple-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Coins className=\"h-5 w-5 text-purple-400\" />\n                  General CLT Staking Pool\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Stake CLT tokens in the general pool to earn rewards and participate in platform governance\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <EVMStakingRewards />\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Additional Information */}\n        <div className=\"mt-12 grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card className=\"bg-slate-800 border-purple-500/30\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">How Job Staking Works</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 text-gray-300\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5\">1</div>\n                <div>\n                  <h4 className=\"font-semibold mb-1\">Choose Security Jobs</h4>\n                  <p className=\"text-sm text-gray-400\">Browse available security analysis jobs and stake CLT tokens to participate as an analyst or certifier.</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <div className=\"bg-purple-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5\">2</div>\n                <div>\n                  <h4 className=\"font-semibold mb-1\">Earn Performance Rewards</h4>\n                  <p className=\"text-sm text-gray-400\">Complete security analysis tasks and get rewarded based on quality and timeliness of your work.</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <div className=\"bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5\">3</div>\n                <div>\n                  <h4 className=\"font-semibold mb-1\">Claim Your Earnings</h4>\n                  <p className=\"text-sm text-gray-400\">Withdraw your earned CLT tokens and staking rewards directly to your wallet.</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-800 border-purple-500/30\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Staking Benefits</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between py-2 border-b border-gray-700\">\n                <span className=\"text-gray-300\">Job-specific APY</span>\n                <span className=\"text-green-400 font-semibold\">8-25%</span>\n              </div>\n              <div className=\"flex items-center justify-between py-2 border-b border-gray-700\">\n                <span className=\"text-gray-300\">General pool APY</span>\n                <span className=\"text-purple-400 font-semibold\">12-18%</span>\n              </div>\n              <div className=\"flex items-center justify-between py-2 border-b border-gray-700\">\n                <span className=\"text-gray-300\">Performance bonuses</span>\n                <span className=\"text-orange-400 font-semibold\">Up to 5x</span>\n              </div>\n              <div className=\"flex items-center justify-between py-2\">\n                <span className=\"text-gray-300\">Governance voting power</span>\n                <span className=\"text-blue-400 font-semibold\">1 CLT = 1 Vote</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9162},"client/src/components/WalletProvider.tsx":{"content":"\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useCurrentAccount } from '@iota/dapp-kit';\nimport { evmContractService } from '@/lib/evm-contract';\n\n// Completely separate blockchain types - no mixing\nexport type WalletType = 'iota' | 'evm';\n\ninterface WalletContextType {\n  walletType: WalletType; // Selected blockchain - either IOTA OR EVM, never both\n  setWalletType: (type: WalletType) => void;\n  evmAddress: string | null; // EVM-only wallet address\n  iotaAddress: string | null; // IOTA-only wallet address\n  connectEVMWallet: () => Promise<string | null>;\n  disconnectEVMWallet: () => void;\n  isEVMConnected: boolean;\n  isIOTAConnected: boolean;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\nexport function WalletProvider({ children }: WalletProviderProps) {\n  const [walletType, setWalletType] = useState<WalletType>('iota');\n  const [evmAddress, setEvmAddress] = useState<string | null>(null);\n  \n  // IOTA wallet from dapp-kit\n  const iotaAccount = useCurrentAccount();\n  const iotaAddress = iotaAccount?.address || null;\n  \n  const isEVMConnected = !!evmAddress;\n  const isIOTAConnected = !!iotaAddress;\n\n  const connectEVMWallet = async (): Promise<string | null> => {\n    try {\n      const address = await evmContractService.connectWallet();\n      setEvmAddress(address);\n      return address;\n    } catch (error: any) {\n      console.error('Failed to connect EVM wallet:', error);\n      // Re-throw the error so the UI can handle it properly\n      throw error;\n    }\n  };\n\n  const disconnectEVMWallet = () => {\n    setEvmAddress(null);\n  };\n\n  // Check if EVM wallet is already connected on mount\n  useEffect(() => {\n    const checkEVMConnection = async () => {\n      if (typeof window !== 'undefined' && window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n          if (accounts.length > 0) {\n            setEvmAddress(accounts[0]);\n          }\n        } catch (error) {\n          console.error('Failed to check EVM connection:', error);\n        }\n      }\n    };\n\n    checkEVMConnection();\n\n    // Listen for account changes\n    if (typeof window !== 'undefined' && window.ethereum) {\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          setEvmAddress(accounts[0]);\n        } else {\n          setEvmAddress(null);\n        }\n      };\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      };\n    }\n  }, []);\n\n  const value: WalletContextType = {\n    walletType,\n    setWalletType,\n    evmAddress,\n    iotaAddress,\n    connectEVMWallet,\n    disconnectEVMWallet,\n    isEVMConnected,\n    isIOTAConnected,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n}\n\n// Global window ethereum type\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n","size_bytes":3315},"client/src/lib/evm-contract.ts":{"content":"import { ethers, BrowserProvider, Contract, formatUnits, parseUnits } from 'ethers';\n\n// Scroll Sepolia Testnet configuration\nexport const SCROLL_TESTNET_CONFIG = {\n  chainId: '0x8274F', // 534351 in hex\n  chainName: 'Scroll Sepolia Testnet',\n  nativeCurrency: {\n    name: 'ETH',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  rpcUrls: ['https://sepolia-rpc.scroll.io/'],\n  blockExplorerUrls: ['https://sepolia.scrollscan.dev/'],\n};\n\n// Contract addresses from your deployment\nexport const CONTRACT_ADDRESSES = {\n    CLT_REWARD: '0xD0fD6bD7a7b1f5d7B3fCCD99e72f1013a3ebD097', // Updated CLT Token contract\n  SOC_SERVICE: '0xE87bFbFC9fC93b94756384e07cCa4B1e857bfC94', // New SOCService with CLT payment system\n};\n\n// CLT Reward Token ABI (Simple ERC20 with mint)\nexport const CLT_REWARD_ABI = [\n  {\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"mint\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\n// SOCService ABI - Updated to match your new contract\nexport const SOC_SERVICE_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_title\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"cltAmount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"createTicket\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_rewardToken\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"SafeERC20FailedOperation\",\n    \"type\": \"error\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"analyst\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"AnalystAssigned\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"emergencyWithdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"EmergencyWithdraw\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"ticketId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"analyst\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"setAnalyst\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"client\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"rewardAmount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"stakingPool\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"TicketCreated\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"analyst\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"TicketValidated\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"ticketId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"validateTicket\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"rewardToken\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"ticketCounter\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tickets\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"title\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"client\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"analyst\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"rewardAmount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"stakingPool\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"isValidated\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];\n\n// CLT Staking Pool ABI for individual pools created by SOCService\nexport const CLT_STAKING_POOL_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_clt\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"claim\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"clt\",\n    \"outputs\": [\n      {\n        \"internalType\": \"contract IERC20\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"lastUpdateBlock\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"rewardRate\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_rate\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"setRewardRate\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"stake\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"stakes\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"rewardDebt\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\nclass EVMContractService {\n  private provider: BrowserProvider | null = null;\n  private signer: any = null;\n  private cltRewardContract: Contract | null = null;\n  private socServiceContract: Contract | null = null;\n\n  async getProvider(): Promise<BrowserProvider> {\n    if (!window.ethereum) {\n      throw new Error('MetaMask not found');\n    }\n    \n    if (!this.provider) {\n      this.provider = new BrowserProvider(window.ethereum);\n    }\n    return this.provider;\n  }\n\n  async getSigner() {\n    if (!this.signer) {\n      const provider = await this.getProvider();\n      this.signer = await provider.getSigner();\n    }\n    return this.signer;\n  }\n\n  async getCLTRewardContract(): Promise<Contract> {\n    if (!this.cltRewardContract) {\n      const signer = await this.getSigner();\n      this.cltRewardContract = new Contract(\n        CONTRACT_ADDRESSES.CLT_REWARD,\n        CLT_REWARD_ABI,\n        signer\n      );\n    }\n    return this.cltRewardContract;\n  }\n\n  async getSOCServiceContract(): Promise<Contract> {\n    if (!this.socServiceContract) {\n      const signer = await this.getSigner();\n      this.socServiceContract = new Contract(\n        CONTRACT_ADDRESSES.SOC_SERVICE,\n        SOC_SERVICE_ABI,\n        signer\n      );\n    }\n    return this.socServiceContract;\n  }\n\n  async getStakingPoolContract(poolAddress: string): Promise<Contract> {\n    const signer = await this.getSigner();\n    return new Contract(poolAddress, CLT_STAKING_POOL_ABI, signer);\n  }\n\n  // CLT Token functions\n  async getCLTBalance(address: string): Promise<string> {\n    try {\n      const provider = await this.getProvider();\n      const contract = new Contract(CONTRACT_ADDRESSES.CLT_REWARD, CLT_REWARD_ABI, provider);\n      const balance = await contract.balanceOf(address);\n      return formatUnits(balance, 18);\n    } catch (error) {\n      console.error('Error getting CLT balance:', error);\n      return \"0\";\n    }\n  }\n\n  async getETHBalance(address: string): Promise<string> {\n    try {\n      const provider = await this.getProvider();\n      const balance = await provider.getBalance(address);\n      return formatUnits(balance, 18);\n    } catch (error) {\n      console.error('Error getting ETH balance:', error);\n      return \"0\";\n    }\n  }\n\n  async mintCLTReward(to: string, amount: string): Promise<string> {\n    try {\n      const contract = await this.getCLTRewardContract();\n      const amountWei = parseUnits(amount, 18);\n      const tx = await contract.mint(to, amountWei);\n      await tx.wait();\n      return tx.hash;\n    } catch (error) {\n      console.error('Error minting CLT reward:', error);\n      throw error;\n    }\n  }\n\n  // SOCService functions\n  async createTicket(title: string, cltAmount: string) {\n    try {\n      console.log(`Creating ticket with params:`, {\n        title,\n        cltAmount\n      });\n\n      // First, get the current user's address\n      const signer = await this.getSigner();\n      const userAddress = await signer.getAddress();\n\n      // Approve the SOC contract to spend CLT tokens\n      const cltContract = await this.getCLTRewardContract();\n      const cltValue = parseUnits(cltAmount, 18);\n      \n      console.log('Approving CLT spend...');\n      const approveTx = await cltContract.approve(CONTRACT_ADDRESSES.SOC_SERVICE, cltValue);\n      await approveTx.wait();\n      console.log('CLT spend approved');\n\n      // Create the ticket\n      const contract = await this.getSOCServiceContract();\n      const tx = await contract.createTicket(title, cltValue);\n      console.log('Transaction sent:', tx.hash);\n\n      const receipt = await tx.wait();\n      console.log('Transaction confirmed:', receipt);\n\n      // Listen for TicketCreated event to get the staking pool address and ticket ID\n      let stakingPoolAddress = null;\n      let ticketId = null;\n      \n      if (receipt.logs) {\n        const contractInterface = new ethers.Interface(SOC_SERVICE_ABI);\n        for (const log of receipt.logs) {\n          try {\n            const parsedLog = contractInterface.parseLog(log);\n            if (parsedLog?.name === 'TicketCreated') {\n              stakingPoolAddress = parsedLog.args.stakingPool;\n              ticketId = parsedLog.args.id.toString();\n              console.log('Ticket created:', { ticketId, stakingPoolAddress });\n              break;\n            }\n          } catch (e) {\n            // Ignore logs that don't match our interface\n          }\n        }\n      }\n\n      return {\n        txHash: receipt.transactionHash,\n        stakingPoolAddress: stakingPoolAddress,\n        ticketId: ticketId,\n        blockNumber: receipt.blockNumber,\n        gasUsed: receipt.gasUsed?.toString()\n      };\n    } catch (error: any) {\n      console.error('Error creating ticket:', error);\n      throw error;\n    }\n  }\n\n  async setAnalyst(ticketId: string, analystAddress: string) {\n    try {\n      console.log(`Setting analyst for ticket ${ticketId}:`, analystAddress);\n\n      const contract = await this.getSOCServiceContract();\n      \n      // Call the contract's setAnalyst function\n      const tx = await contract.setAnalyst(ticketId, analystAddress);\n      console.log('Transaction sent:', tx.hash);\n\n      const receipt = await tx.wait();\n      console.log('Analyst assigned:', receipt);\n\n      return {\n        txHash: receipt.transactionHash,\n        blockNumber: receipt.blockNumber,\n        gasUsed: receipt.gasUsed?.toString()\n      };\n    } catch (error: any) {\n      console.error('Error setting analyst:', error);\n      throw error;\n    }\n  }\n\n  async validateTicket(ticketId: string) {\n    try {\n      console.log(`Validating ticket ${ticketId}`);\n\n      const contract = await this.getSOCServiceContract();\n      \n      // Call the contract's validateTicket function\n      const tx = await contract.validateTicket(ticketId);\n      console.log('Transaction sent:', tx.hash);\n\n      const receipt = await tx.wait();\n      console.log('Ticket validated:', receipt);\n\n      return {\n        txHash: receipt.transactionHash,\n        blockNumber: receipt.blockNumber,\n        gasUsed: receipt.gasUsed?.toString()\n      };\n    } catch (error: any) {\n      console.error('Error validating ticket:', error);\n      throw error;\n    }\n  }\n\n  async getTicket(ticketId: number) {\n    try {\n      const contract = await this.getSOCServiceContract();\n      const ticket = await contract.tickets(ticketId);\n      return {\n        id: Number(ticket.id),\n        title: ticket.title,\n        client: ticket.client,\n        analyst: ticket.analyst,\n        rewardAmount: formatUnits(ticket.rewardAmount, 18),\n        stakingPool: ticket.stakingPool,\n        isValidated: ticket.isValidated\n      };\n    } catch (error) {\n      console.error('Error getting ticket:', error);\n      throw error;\n    }\n  }\n\n  async getTicketCounter(): Promise<number> {\n    try {\n      const contract = await this.getSOCServiceContract();\n      const counter = await contract.ticketCounter();\n      return Number(counter);\n    } catch (error) {\n      console.error('Error getting ticket counter:', error);\n      return 0;\n    }\n  }\n\n  // Staking Pool functions\n  async getStakeInfo(userAddress: string) {\n    try {\n      // For the main staking in this context, return mock data\n      // In a real implementation, this would query a specific staking pool\n      return {\n        amount: \"0\",\n        rewardDebt: \"0\"\n      };\n    } catch (error) {\n      console.error('Error getting stake info:', error);\n      return { amount: \"0\", rewardDebt: \"0\" };\n    }\n  }\n\n  async getStakeInfoForPool(stakingPoolAddress: string, userAddress: string) {\n    try {\n      const contract = await this.getStakingPoolContract(stakingPoolAddress);\n      const stakeInfo = await contract.stakes(userAddress);\n      return {\n        amount: formatUnits(stakeInfo.amount, 18),\n        rewardDebt: formatUnits(stakeInfo.rewardDebt, 18)\n      };\n    } catch (error) {\n      console.error('Error getting stake info:', error);\n      return { amount: \"0\", rewardDebt: \"0\" };\n    }\n  }\n\n  async stakeInPool(stakingPoolAddress: string, amount: string): Promise<string> {\n    try {\n      const cltContract = await this.getCLTRewardContract();\n      const stakingContract = await this.getStakingPoolContract(stakingPoolAddress);\n      \n      const amountWei = parseUnits(amount, 18);\n      \n      // First approve the staking pool to spend CLT tokens\n      const approveTx = await cltContract.approve(stakingPoolAddress, amountWei);\n      await approveTx.wait();\n      \n      // Then stake the tokens\n      const stakeTx = await stakingContract.stake(amountWei);\n      await stakeTx.wait();\n      \n      return stakeTx.hash;\n    } catch (error) {\n      console.error('Error staking in pool:', error);\n      throw error;\n    }\n  }\n\n  async withdrawFromPool(stakingPoolAddress: string, amount: string): Promise<string> {\n    try {\n      const contract = await this.getStakingPoolContract(stakingPoolAddress);\n      const amountWei = parseUnits(amount, 18);\n      \n      const tx = await contract.withdraw(amountWei);\n      await tx.wait();\n      \n      return tx.hash;\n    } catch (error) {\n      console.error('Error withdrawing from pool:', error);\n      throw error;\n    }\n  }\n\n  async claimFromPool(stakingPoolAddress: string): Promise<string> {\n    try {\n      const contract = await this.getStakingPoolContract(stakingPoolAddress);\n      const tx = await contract.claim();\n      await tx.wait();\n      return tx.hash;\n    } catch (error) {\n      console.error('Error claiming from pool:', error);\n      throw error;\n    }\n  }\n\n  // Utility functions\n  formatCLT(amount: string): string {\n    return formatUnits(amount, 18);\n  }\n\n  parseCLT(amount: string): string {\n    return parseUnits(amount, 18).toString();\n  }\n\n  async connectWallet(): Promise<string | null> {\n    if (typeof window.ethereum === 'undefined') {\n      throw new Error('MetaMask is not installed. Please install MetaMask to connect your wallet.');\n    }\n\n    try {\n      // Request account access\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      \n      // Switch to Scroll Sepolia network\n      const switched = await this.switchToScrollSepolia();\n      if (!switched) {\n        throw new Error('Failed to switch to Scroll Sepolia network');\n      }\n      \n      // Initialize provider and signer\n      this.provider = new BrowserProvider(window.ethereum);\n      this.signer = await this.provider.getSigner();\n      \n      // Get the connected address\n      const address = await this.signer.getAddress();\n      console.log('EVM Wallet connected:', address);\n      return address;\n    } catch (error: any) {\n      console.error('Failed to connect EVM wallet:', error);\n      throw error;\n    }\n  }\n\n  async switchToScrollSepolia(): Promise<boolean> {\n    try {\n      if (!window.ethereum) return false;\n\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: SCROLL_TESTNET_CONFIG.chainId }],\n      });\n      return true;\n    } catch (switchError: any) {\n      if (switchError.code === 4902) {\n        try {\n          if (!window.ethereum) return false;\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [SCROLL_TESTNET_CONFIG],\n          });\n          return true;\n        } catch (addError) {\n          console.error('Failed to add Scroll Sepolia network:', addError);\n          return false;\n        }\n      }\n      console.error('Failed to switch to Scroll Sepolia network:', switchError);\n      return false;\n    }\n  }\n}\n\nexport const evmContractService = new EVMContractService();\nexport default evmContractService;","size_bytes":23756},"client/src/pages/PoolsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport PoolTicketForm from \"@/components/PoolTicketForm\";\nimport PoolTicketList from \"@/components/PoolTicketList\";\nimport { \n  Plus, \n  FileText, \n  Users, \n  TrendingUp, \n  Shield,\n  ArrowLeft\n} from \"lucide-react\";\n\nexport default function PoolsPage() {\n  const { walletType, isEVMConnected, isIOTAConnected } = useWallet();\n  const [showTicketForm, setShowTicketForm] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"browse\");\n\n  const isConnected = walletType === 'iota' ? isIOTAConnected : isEVMConnected;\n\n  if (showTicketForm) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"mb-6\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setShowTicketForm(false)}\n              className=\"text-gray-300 hover:text-white\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Pools\n            </Button>\n          </div>\n          \n          <PoolTicketForm onClose={() => setShowTicketForm(false)} />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"p-3 bg-purple-500/20 rounded-lg\">\n                <FileText className=\"h-8 w-8 text-purple-400\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-white\">Security Analysis Pools</h1>\n                <p className=\"text-gray-400\">\n                  Submit tickets, participate in analysis, and earn rewards\n                </p>\n              </div>\n            </div>\n            \n            {isConnected && (\n              <Button\n                onClick={() => setShowTicketForm(true)}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Submit Pool Ticket\n              </Button>\n            )}\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <Badge className=\"bg-purple-500/20 text-purple-300 border-purple-500/30\">\n              {walletType === 'iota' ? 'IOTA Network' : 'Scroll EVM'}\n            </Badge>\n            <Badge variant=\"outline\" className=\"border-green-500/30 text-green-400\">\n              Pool-Based Rewards\n            </Badge>\n          </div>\n        </div>\n\n        {!isConnected ? (\n          <Card className=\"bg-slate-800 border-purple-500/20\">\n            <CardContent className=\"text-center py-12\">\n              <Shield className=\"h-16 w-16 text-purple-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-white mb-2\">Connect Your Wallet</h3>\n              <p className=\"text-gray-400 mb-6\">\n                Connect your wallet to participate in security analysis pools and earn CLT rewards\n              </p>\n              <div className=\"space-y-4\">\n                <div className=\"text-sm text-gray-500\">\n                  Supported Networks: IOTA & Scroll EVM\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3 bg-slate-800\">\n              <TabsTrigger value=\"browse\" className=\"data-[state=active]:bg-purple-600\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Browse Pools\n              </TabsTrigger>\n              <TabsTrigger value=\"my-pools\" className=\"data-[state=active]:bg-purple-600\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                My Participation\n              </TabsTrigger>\n              <TabsTrigger value=\"stats\" className=\"data-[state=active]:bg-purple-600\">\n                <TrendingUp className=\"h-4 w-4 mr-2\" />\n                Statistics\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"browse\" className=\"space-y-6\">\n              <PoolTicketList />\n            </TabsContent>\n\n            <TabsContent value=\"my-pools\" className=\"space-y-6\">\n              <Card className=\"bg-slate-800 border-purple-500/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">Your Pool Activity</CardTitle>\n                  <CardDescription>\n                    Track your submissions and participation\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-400\">\n                      Your participation history will appear here\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"stats\" className=\"space-y-6\">\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card className=\"bg-slate-800 border-purple-500/20\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-gray-400\">Total Pools</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-white\">127</div>\n                    <p className=\"text-xs text-gray-500\">+12 this week</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-slate-800 border-purple-500/20\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-gray-400\">Active Analysts</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-white\">89</div>\n                    <p className=\"text-xs text-gray-500\">+5 this week</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-slate-800 border-purple-500/20\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-gray-400\">Total Rewards</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-white\">15,432 CLT</div>\n                    <p className=\"text-xs text-gray-500\">+2,100 this week</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-slate-800 border-purple-500/20\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-gray-400\">Success Rate</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-white\">94.2%</div>\n                    <p className=\"text-xs text-gray-500\">+1.2% this week</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card className=\"bg-slate-800 border-purple-500/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">How Pool Rewards Work</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div>\n                      <h4 className=\"font-semibold text-purple-400 mb-3\">Reward Distribution</h4>\n                      <ul className=\"space-y-2 text-gray-300 text-sm\">\n                        <li>• Base reward set by ticket submitter</li>\n                        <li>• Multiplied by severity level (1x - 3x)</li>\n                        <li>• Split equally among qualified analysts</li>\n                        <li>• Bonus for high-quality submissions</li>\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-purple-400 mb-3\">Quality Assurance</h4>\n                      <ul className=\"space-y-2 text-gray-300 text-sm\">\n                        <li>• Certifiers validate all submissions</li>\n                        <li>• Consensus required for reward distribution</li>\n                        <li>• Reputation system tracks performance</li>\n                        <li>• Automated smart contract execution</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9244},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  console.warn(\"⚠️  DATABASE_URL not set, database features will use in-memory storage\");\n}\n\nexport const pool = process.env.DATABASE_URL ? new Pool({ connectionString: process.env.DATABASE_URL }) : null;\nexport const db = pool ? drizzle({ client: pool, schema }) : null;\n","size_bytes":528},"client/src/components/EVMIncidentReport.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Badge } from \"./ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport { evmContractService, CONTRACT_ADDRESSES } from \"@/lib/evm-contract\";\nimport {\n  AlertTriangle,\n  Shield,\n  FileText,\n  Send,\n  Clock,\n  DollarSign,\n  Zap\n} from \"lucide-react\";\n\ninterface EVMIncidentReportProps {\n  onClose?: () => void;\n}\n\nexport default function EVMIncidentReport(props: EVMIncidentReportProps) {\n  const [incidentData, setIncidentData] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"malware\",\n    location: \"\",\n    priority: \"medium\",\n    ethAmount: \"0.01\", // ETH amount for transaction\n    analystAddress: \"\" // Analyst wallet address\n  });\n\n  const [evidenceFiles, setEvidenceFiles] = useState<File[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { evmAddress, isEVMConnected } = useWallet();\n  const { toast } = useToast();\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setEvidenceFiles(Array.from(e.target.files));\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!isEVMConnected || !evmAddress) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your MetaMask wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!incidentData.title || !incidentData.description) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // This part of the original code was replaced by the changes.\n    // The new logic in the <changes> section handles the submission.\n    // The following is a placeholder to indicate where the original logic was.\n    // Original logic was about creating ticket on EVM blockchain and then storing in DB.\n    // The new logic directly uses formData which is not fully defined in the original code snippet provided.\n    // I am adapting the new logic to use the incidentData state and wallet info.\n\n    try {\n      setIsSubmitting(true);\n\n      // Constructing the data object based on the new submission structure,\n      // merging existing incidentData with wallet information and other fields.\n      const submissionData = {\n        title: incidentData.title,\n        description: incidentData.description,\n        severity: incidentData.priority, // Mapping priority to severity\n        category: incidentData.category,\n        client_name: 'Anonymous', // Default or could be fetched/input\n        contact_info: `EVM Wallet: ${evmAddress}`, // Using EVM address as contact info\n        client_wallet: evmAddress,\n        transaction_hash: '', // This would come from the EVM transaction, if any\n        contract_address: CONTRACT_ADDRESSES.SOC_SERVICE, // Using defined contract address\n        block_number: 0, // This would come from the EVM transaction, if any\n        gas_used: '', // This would come from the EVM transaction, if any\n        affected_systems: incidentData.location || 'Not specified', // Using location field\n        attack_vectors: '', // Not directly provided in original incidentData\n        evidence_urls: evidenceFiles.map(file => file.name).join(', '), // Placeholder for evidence URLs\n        status: 'pending', // Default status\n        network: 'scroll', // Assuming Scroll network based on context\n        submissionType: 'evm_incident_report',\n        ipfs_metadata_hash: '',\n        staking_pool_address: ''\n      };\n\n      // Mocking the EVM transaction part as the original code did,\n      // but the submission logic is now handled by the fetch call.\n      // In a real scenario, the transaction would be initiated here.\n      // For the purpose of this fix, we'll simulate getting transaction details.\n\n      // Simulate creating ticket on EVM blockchain to get transaction details\n      // This part is based on the original code's intention but adapted for the new submission flow.\n      try {\n        toast({\n          title: \"Creating EVM Ticket\",\n          description: \"Submitting to Scroll blockchain...\",\n        });\n        const tx = await evmContractService.createTicket(\n          incidentData.title,\n          incidentData.ethAmount || \"0.01\"\n        );\n        // tx now contains txHash, stakingPoolAddress, and ticketId\n        const txHash = tx.txHash;\n        const stakingPoolAddress = tx.stakingPoolAddress;\n        const ticketId = tx.ticketId;\n\n        // If analyst address is provided, assign analyst to the ticket\n        if (incidentData.analystAddress && ticketId) {\n          try {\n            console.log(`Assigning analyst ${incidentData.analystAddress} to ticket ${ticketId}`);\n            await evmContractService.setAnalyst(ticketId, incidentData.analystAddress);\n            console.log('Analyst assigned successfully');\n          } catch (analystError) {\n            console.error('Failed to assign analyst:', analystError);\n            // Continue even if analyst assignment fails\n          }\n        }\n\n        submissionData.transaction_hash = txHash || '';\n        submissionData.client_name = evmAddress || 'Anonymous';\n        submissionData.contact_info = `EVM Wallet: ${evmAddress}`;\n        \n        // Add ticket ID if available\n        if (ticketId) {\n          submissionData.ticket_id = parseInt(ticketId);\n        }\n\n        // Store staking pool metadata in IPFS\n        if (stakingPoolAddress) {\n          try {\n            console.log(\"Storing pool metadata in IPFS...\", {\n              poolAddress: stakingPoolAddress,\n              title: incidentData.title\n            });\n\n            const poolMetadataResponse = await fetch('/api/pools/metadata', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                poolAddress: stakingPoolAddress,\n                title: incidentData.title,\n                description: `Security analysis pool for \"${incidentData.title}\". Analysts investigate ${incidentData.description}. Stake CLT tokens to support this security investigation and earn rewards.`,\n                category: \"Security Analysis\",\n                riskLevel: incidentData.priority === \"critical\" ? \"High\" : incidentData.priority === \"high\" ? \"Medium-High\" : \"Medium\",\n                estimatedAPY: \"12-18%\",\n                minStake: \"10\",\n                maxStake: \"1000\"\n              }),\n            });\n\n            if (poolMetadataResponse.ok) {\n              const poolResult = await poolMetadataResponse.json();\n              console.log(\"Pool metadata stored in IPFS:\", poolResult.ipfsHash);\n              \n              // Add IPFS hash to submission data\n              submissionData.ipfs_metadata_hash = poolResult.ipfsHash;\n              submissionData.staking_pool_address = stakingPoolAddress;\n            }\n          } catch (error) {\n            console.error(\"Failed to store pool metadata:\", error);\n          }\n        }\n\n        toast({\n          title: \"Transaction successful\",\n          description: `Transaction hash: ${txHash ? txHash.slice(0, 10) + '...' : 'Transaction completed'}`,\n        });\n\n      } catch (evmError: any) {\n        console.error('EVM ticket creation failed:', evmError);\n        let errorMessage = \"Failed to create ticket on EVM\";\n\n        if (evmError.code === 4001) {\n          errorMessage = \"Transaction was rejected by user\";\n        } else if (evmError.message?.includes('insufficient funds')) {\n          errorMessage = \"Insufficient ETH for gas fees\";\n        } else if (evmError.message) {\n          errorMessage = evmError.message;\n        }\n\n        toast({\n          title: \"EVM Transaction Failed\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n        setIsSubmitting(false); // Stop submission if EVM part fails\n        return;\n      }\n\n\n      // Now submit the consolidated data to the API\n      const response = await fetch('/api/incident-reports', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(submissionData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || 'Failed to submit incident report');\n      }\n\n      const result = await response.json();\n      console.log('EVM incident report submitted:', result);\n\n      toast({\n        title: \"Success\",\n        description: `Incident report submitted successfully. Case ID: ${result.ticket_id || result.id}`,\n      });\n\n      // Reset form after successful submission\n      setIncidentData({\n        title: \"\",\n        description: \"\",\n        category: \"malware\",\n        location: \"\",\n        priority: \"medium\",\n        ethAmount: \"0.01\",\n        analystAddress: \"\"\n      });\n      setEvidenceFiles([]);\n\n    } catch (error: any) {\n      console.error('EVM ticket creation failed:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit incident report\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!isEVMConnected) {\n    return (\n      <Card className=\"bg-orange-500/5 border-orange-500/20\">\n        <CardContent className=\"p-6 text-center\">\n          <Zap className=\"h-12 w-12 text-orange-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-orange-400 mb-2\">Connect MetaMask</h3>\n          <p className=\"text-gray-300\">\n            Please connect your MetaMask wallet to submit incident reports on Scroll EVM\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-gradient-to-br from-orange-500/5 to-red-500/5 border-orange-500/20\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-orange-400\">\n          <AlertTriangle className=\"h-5 w-5\" />\n          EVM Incident Report\n        </CardTitle>\n        <CardDescription className=\"text-gray-300\">\n          Submit security incidents using ETH on Scroll blockchain. Earn CLT tokens as rewards.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Incident Title */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Incident Title *\n            </label>\n            <Input\n              value={incidentData.title}\n              onChange={(e) => setIncidentData({ ...incidentData, title: e.target.value })}\n              placeholder=\"Brief description of the security incident\"\n              className=\"bg-gray-800/50 border-orange-500/30 text-white\"\n              required\n            />\n          </div>\n\n          {/* Category and Priority */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Category\n              </label>\n              <select\n                value={incidentData.category}\n                onChange={(e) => setIncidentData({ ...incidentData, category: e.target.value })}\n                className=\"w-full p-2 bg-gray-800/50 border border-orange-500/30 rounded-md text-white\"\n              >\n                <option value=\"malware\">Malware</option>\n                <option value=\"phishing\">Phishing</option>\n                <option value=\"data-breach\">Data Breach</option>\n                <option value=\"ddos\">DDoS Attack</option>\n                <option value=\"insider-threat\">Insider Threat</option>\n                <option value=\"other\">Other</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Priority\n              </label>\n              <select\n                value={incidentData.priority}\n                onChange={(e) => setIncidentData({ ...incidentData, priority: e.target.value })}\n                className=\"w-full p-2 bg-gray-800/50 border border-orange-500/30 rounded-md text-white\"\n              >\n                <option value=\"low\">Low</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"high\">High</option>\n                <option value=\"critical\">Critical</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Analyst Address */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Analyst Address (Optional)\n            </label>\n            <Input\n              value={incidentData.analystAddress}\n              onChange={(e) => setIncidentData({ ...incidentData, analystAddress: e.target.value })}\n              placeholder=\"0x... (optional - analyst can be assigned later)\"\n              className=\"bg-gray-800/50 border-orange-500/30 text-white font-mono\"\n            />\n            <p className=\"text-gray-400 text-xs mt-1\">\n              Optional: Analyst wallet address. If not provided, can be assigned later by the client.\n            </p>\n          </div>\n\n          {/* ETH Amount */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              ETH Payment Amount\n            </label>\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-5 w-5 text-orange-400\" />\n              <Input\n                type=\"number\"\n                step=\"0.001\"\n                min=\"0.001\"\n                value={incidentData.ethAmount}\n                onChange={(e) => setIncidentData({ ...incidentData, ethAmount: e.target.value })}\n                placeholder=\"0.01\"\n                className=\"bg-gray-800/50 border-orange-500/30 text-white\"\n              />\n              <span className=\"text-orange-400 font-medium\">ETH</span>\n            </div>\n            <p className=\"text-gray-400 text-xs mt-1\">\n              ETH payment for transaction fees and premium features\n            </p>\n          </div>\n\n          {/* Location */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Location/Network\n            </label>\n            <Input\n              value={incidentData.location}\n              onChange={(e) => setIncidentData({ ...incidentData, location: e.target.value })}\n              placeholder=\"Network segment, IP range, or physical location\"\n              className=\"bg-gray-800/50 border-orange-500/30 text-white\"\n            />\n          </div>\n\n          {/* Description */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Detailed Description *\n            </label>\n            <Textarea\n              value={incidentData.description}\n              onChange={(e) => setIncidentData({ ...incidentData, description: e.target.value })}\n              placeholder=\"Provide detailed information about the incident, affected systems, timeline, and any immediate actions taken\"\n              className=\"bg-gray-800/50 border-orange-500/30 text-white min-h-[120px]\"\n              required\n            />\n          </div>\n\n          {/* Evidence Upload */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n              Evidence Files\n            </label>\n            <input\n              type=\"file\"\n              multiple\n              onChange={handleFileUpload}\n              accept=\".jpg,.jpeg,.png,.pdf,.doc,.docx,.txt,.log\"\n              className=\"w-full p-2 bg-gray-800/50 border border-orange-500/30 rounded-md text-white file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:bg-orange-600 file:text-white\"\n            />\n            {evidenceFiles.length > 0 && (\n              <div className=\"mt-2\">\n                <p className=\"text-sm text-gray-400\">Selected files:</p>\n                {evidenceFiles.map((file, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"mr-2 mt-1 text-orange-400 border-orange-500/30\">\n                    <FileText className=\"h-3 w-3 mr-1\" />\n                    {file.name}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"w-full bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-white py-3\"\n          >\n            {isSubmitting ? (\n              <>\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\" />\n                Creating Ticket on Scroll...\n              </>\n            ) : (\n              <>\n                <Send className=\"h-5 w-5 mr-2\" />\n                Submit EVM Incident Report\n              </>\n            )}\n          </Button>\n        </form>\n\n        {/* Status Info */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n          <div className=\"bg-orange-500/10 border border-orange-500/30 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Shield className=\"h-5 w-5 text-orange-400\" />\n              <span className=\"font-medium text-orange-400\">Payment</span>\n            </div>\n            <p className=\"text-gray-300 text-sm\">Pay with ETH</p>\n          </div>\n\n          <div className=\"bg-green-500/10 border border-green-500/30 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <DollarSign className=\"h-5 w-5 text-green-400\" />\n              <span className=\"font-medium text-green-400\">Rewards</span>\n            </div>\n            <p className=\"text-gray-300 text-sm\">Earn CLT tokens</p>\n          </div>\n\n          <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Clock className=\"h-5 w-5 text-blue-400\" />\n              <span className=\"font-medium text-blue-400\">Network</span>\n            </div>\n            <p className=\"text-gray-300 text-sm\">Scroll EVM</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":18669},"client/src/components/JobStakingDashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { Progress } from './ui/progress';\nimport { \n  TrendingUp, \n  DollarSign, \n  Clock, \n  Shield, \n  Users, \n  BarChart3,\n  ExternalLink,\n  Coins\n} from 'lucide-react';\nimport { useWallet } from './WalletProvider';\nimport { evmContractService } from '@/lib/evm-contract';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface JobStake {\n  ticketId: number;\n  amount: string;\n  status: 'active' | 'completed' | 'validated';\n  earnings: string;\n  startDate: string;\n  role: 'analyst' | 'client' | 'certifier';\n  apy: number;\n  rewardClaimed: boolean;\n}\n\nexport default function JobStakingDashboard() {\n  const { evmAddress, isEVMConnected } = useWallet();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [totalStaked, setTotalStaked] = useState('0');\n  const [totalEarnings, setTotalEarnings] = useState('0');\n  const [activeJobs, setActiveJobs] = useState<JobStake[]>([]);\n  const [completedJobs, setCompletedJobs] = useState<JobStake[]>([]);\n  const [cltBalance, setCltBalance] = useState('0');\n  const [rewardRate, setRewardRate] = useState('0');\n\n  useEffect(() => {\n    if (isEVMConnected && evmAddress) {\n      loadStakingData();\n    }\n  }, [isEVMConnected, evmAddress]);\n\n  const loadStakingData = async () => {\n    if (!evmAddress) return;\n    \n    try {\n      setLoading(true);\n      \n      // Get CLT balance\n      const balanceBN = await evmContractService.getCLTBalance(evmAddress);\n      const balance = evmContractService.formatCLT(balanceBN);\n      setCltBalance(balance);\n      \n      // Get staking info\n      const stakeInfo = await evmContractService.getStakeInfo(evmAddress);\n      const stakedAmount = evmContractService.formatCLT(stakeInfo.amount);\n      const rewardDebt = evmContractService.formatCLT(stakeInfo.rewardDebt);\n      setTotalStaked(stakedAmount);\n      setTotalEarnings(rewardDebt);\n      \n      // Get reward rate\n      const rateBN = await evmContractService.getRewardRate();\n      const rate = evmContractService.formatCLT(rateBN);\n      setRewardRate(rate);\n      \n      // Mock job data for demonstration (in real app, this would come from contract events)\n      const mockActiveJobs: JobStake[] = [\n        {\n          ticketId: 1,\n          amount: '1000',\n          status: 'active',\n          earnings: '45.23',\n          startDate: '2025-01-15',\n          role: 'analyst',\n          apy: 12.5,\n          rewardClaimed: false\n        },\n        {\n          ticketId: 2,\n          amount: '500',\n          status: 'active',\n          earnings: '18.92',\n          startDate: '2025-01-18',\n          role: 'certifier',\n          apy: 15.2,\n          rewardClaimed: false\n        }\n      ];\n      \n      const mockCompletedJobs: JobStake[] = [\n        {\n          ticketId: 3,\n          amount: '750',\n          status: 'completed',\n          earnings: '92.45',\n          startDate: '2025-01-10',\n          role: 'analyst',\n          apy: 14.8,\n          rewardClaimed: true\n        }\n      ];\n      \n      setActiveJobs(mockActiveJobs);\n      setCompletedJobs(mockCompletedJobs);\n      \n    } catch (error: any) {\n      console.error('Error loading staking data:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load staking data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClaimRewards = async (ticketId: number) => {\n    try {\n      const txHash = await evmContractService.claimRewards();\n      toast({\n        title: \"Rewards Claimed!\",\n        description: `Transaction: ${txHash}`,\n      });\n      \n      // Reload data\n      setTimeout(() => {\n        loadStakingData();\n      }, 2000);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to claim rewards\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'analyst': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'certifier': return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n      case 'client': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'completed': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'validated': return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  if (!isEVMConnected) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Card className=\"bg-slate-800 border-purple-500/30 p-8 text-center\">\n          <CardContent className=\"space-y-4\">\n            <Shield className=\"h-12 w-12 text-purple-400 mx-auto\" />\n            <h3 className=\"text-xl font-semibold text-white\">Connect Your Wallet</h3>\n            <p className=\"text-gray-400\">Connect your EVM wallet to view job staking dashboard</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6 animate-pulse\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-slate-800 rounded-lg\" />\n          ))}\n        </div>\n        <div className=\"h-96 bg-slate-800 rounded-lg\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card className=\"bg-slate-800 border-purple-500/30\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-400\">Total Staked</CardTitle>\n            <Coins className=\"h-4 w-4 text-purple-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{totalStaked} CLT</div>\n            <p className=\"text-xs text-green-400 mt-1\">\n              +2.5% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-purple-500/30\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-400\">Total Earnings</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{totalEarnings} CLT</div>\n            <p className=\"text-xs text-green-400 mt-1\">\n              +18.2% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-purple-500/30\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-400\">Active Jobs</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-blue-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{activeJobs.length}</div>\n            <p className=\"text-xs text-blue-400 mt-1\">\n              {completedJobs.length} completed this month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800 border-purple-500/30\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-400\">Average APY</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-purple-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">\n              {activeJobs.length > 0 \n                ? (activeJobs.reduce((acc, job) => acc + job.apy, 0) / activeJobs.length).toFixed(1)\n                : '0'\n              }%\n            </div>\n            <p className=\"text-xs text-purple-400 mt-1\">\n              Reward Rate: {rewardRate} CLT/block\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Active Jobs */}\n      <Card className=\"bg-slate-800 border-purple-500/30\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center gap-2\">\n            <Clock className=\"h-5 w-5 text-blue-400\" />\n            Active Job Stakes\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {activeJobs.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-400\">\n              No active job stakes. Start by staking on security analysis jobs.\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {activeJobs.map((job) => (\n                <div key={job.ticketId} className=\"border border-gray-700 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\">\n                        Ticket #{job.ticketId}\n                      </Badge>\n                      <Badge className={getRoleColor(job.role)}>\n                        {job.role}\n                      </Badge>\n                      <Badge className={getStatusColor(job.status)}>\n                        {job.status}\n                      </Badge>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm text-gray-400\">Staked</div>\n                      <div className=\"text-lg font-semibold text-white\">{job.amount} CLT</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                    <div>\n                      <div className=\"text-sm text-gray-400\">Current Earnings</div>\n                      <div className=\"text-lg font-semibold text-green-400\">{job.earnings} CLT</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-400\">APY</div>\n                      <div className=\"text-lg font-semibold text-purple-400\">{job.apy}%</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-400\">Started</div>\n                      <div className=\"text-lg font-semibold text-white\">{job.startDate}</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-400\">Progress</div>\n                      <Progress value={75} className=\"w-full mt-1\" />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"border-purple-500/30 text-purple-400 hover:bg-purple-500/10\"\n                      onClick={() => window.open(`https://sepolia.scrollscan.dev/`, '_blank')}\n                    >\n                      View Details\n                      <ExternalLink className=\"h-4 w-4 ml-2\" />\n                    </Button>\n                    \n                    {!job.rewardClaimed && parseFloat(job.earnings) > 0 && (\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-green-600 hover:bg-green-700\"\n                        onClick={() => handleClaimRewards(job.ticketId)}\n                      >\n                        Claim {job.earnings} CLT\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Completed Jobs */}\n      <Card className=\"bg-slate-800 border-purple-500/30\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center gap-2\">\n            <Shield className=\"h-5 w-5 text-green-400\" />\n            Completed Job Stakes\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {completedJobs.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-400\">\n              No completed job stakes yet.\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {completedJobs.map((job) => (\n                <div key={job.ticketId} className=\"border border-gray-700 rounded-lg p-4 opacity-75\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge className=\"bg-gray-500/20 text-gray-400 border-gray-500/30\">\n                        Ticket #{job.ticketId}\n                      </Badge>\n                      <Badge className={getRoleColor(job.role)}>\n                        {job.role}\n                      </Badge>\n                      <Badge className={getStatusColor(job.status)}>\n                        {job.status}\n                      </Badge>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm text-gray-400\">Total Earned</div>\n                      <div className=\"text-lg font-semibold text-green-400\">{job.earnings} CLT</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <div className=\"text-sm text-gray-400\">Amount Staked</div>\n                      <div className=\"text-lg font-semibold text-white\">{job.amount} CLT</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-400\">Final APY</div>\n                      <div className=\"text-lg font-semibold text-purple-400\">{job.apy}%</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-400\">Completion Date</div>\n                      <div className=\"text-lg font-semibold text-white\">{job.startDate}</div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14675},"client/src/pages/EVMPage.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport Dashboard from \"@/components/Dashboard\";\nimport Header from \"@/components/Header\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Wallet, Zap } from \"lucide-react\";\n\nexport default function EVMPage() {\n  const [selectedRole, setSelectedRole] = useState<string>('client');\n  const { isEVMConnected, connectEVMWallet, evmAddress } = useWallet();\n  const { toast } = useToast();\n  const [connecting, setConnecting] = useState(false);\n\n  useEffect(() => {\n    if (isEVMConnected) {\n      toast({\n        title: \"Welcome to Scroll dSOC!\",\n        description: \"You're now using Scroll (EVM) blockchain. All transactions use ETH and convert to CLT tokens.\",\n      });\n    }\n  }, [isEVMConnected, toast]);\n\n  const handleConnect = async () => {\n    setConnecting(true);\n    try {\n      await connectEVMWallet();\n      toast({\n        title: \"EVM Wallet Connected\",\n        description: \"Successfully connected to Scroll Sepolia network\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message || \"Failed to connect EVM wallet\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setConnecting(false);\n    }\n  };\n\n  if (!isEVMConnected) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-orange-900/20 to-slate-900 flex items-center justify-center\">\n        <div className=\"text-center max-w-2xl mx-auto p-8\">\n          <div className=\"mb-8\">\n            <Zap className=\"h-16 w-16 text-orange-400 mx-auto mb-4\" />\n            <h1 className=\"text-4xl font-bold text-orange-400 mb-4\">Scroll dSOC Platform</h1>\n            <p className=\"text-gray-300 mb-8\">\n              Connect your MetaMask wallet to access the EVM-powered dSOC platform\n            </p>\n          </div>\n\n          <div className=\"bg-orange-500/10 border border-orange-500/30 rounded-lg p-6 mb-8\">\n            <h3 className=\"text-orange-300 font-semibold mb-3\">EVM Features:</h3>\n            <ul className=\"text-orange-200 text-sm space-y-2 text-left\">\n              <li>• Pay with ETH for all transactions</li>\n              <li>• Earn CLT tokens as rewards</li>\n              <li>• Convert CLT back to ETH anytime</li>\n              <li>• Fast Scroll Layer 2 transactions</li>\n              <li>• EVM-compatible smart contracts</li>\n            </ul>\n          </div>\n\n          <Button\n            onClick={handleConnect}\n            disabled={connecting}\n            size=\"lg\"\n            className=\"bg-orange-600 hover:bg-orange-700 text-white px-8 py-3\"\n          >\n            {connecting ? (\n              <>\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\" />\n                Connecting...\n              </>\n            ) : (\n              <>\n                <Wallet className=\"h-5 w-5 mr-2\" />\n                Connect MetaMask Wallet\n              </>\n            )}\n          </Button>\n\n          <p className=\"text-gray-400 text-sm mt-4\">\n            Make sure you're connected to Scroll Sepolia Testnet\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-orange-900/20 to-slate-900\">\n      <Header currentRole={selectedRole} onRoleChange={setSelectedRole} />\n      <Dashboard currentRole={selectedRole} />\n    </div>\n  );\n}\n","size_bytes":3521},"client/src/pages/IOTAPage.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useCurrentAccount } from \"@iota/dapp-kit\";\nimport Dashboard from \"@/components/Dashboard\";\nimport Header from \"@/components/Header\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function IOTAPage() {\n  const [selectedRole, setSelectedRole] = useState<string>('client');\n  const { toast } = useToast();\n  const iotaAccount = useCurrentAccount();\n\n  useEffect(() => {\n    if (iotaAccount) {\n      toast({\n        title: \"Welcome to IOTA dSOC!\",\n        description: \"You're now using the IOTA blockchain for all transactions\",\n      });\n    }\n  }, [iotaAccount, toast]);\n\n  if (!iotaAccount) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900/20 to-slate-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold text-blue-400 mb-4\">IOTA dSOC Platform</h1>\n          <p className=\"text-gray-300 mb-8\">Please connect your IOTA wallet to continue</p>\n          <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-lg p-6\">\n            <p className=\"text-blue-300 text-sm\">\n              This page is exclusively for IOTA blockchain users. All transactions will use IOTA tokens.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900/20 to-slate-900\">\n      <Header currentRole={selectedRole} onRoleChange={setSelectedRole} />\n      <Dashboard currentRole={selectedRole} />\n    </div>\n  );\n}\n","size_bytes":1588},"client/src/components/CaseDetailModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"./ui/dialog\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Separator } from \"./ui/separator\";\nimport { Progress } from \"./ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"./WalletProvider\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport {\n  Eye,\n  Shield,\n  AlertTriangle,\n  Clock,\n  User,\n  Hash,\n  ExternalLink,\n  Coins,\n  FileText,\n  Activity,\n  CheckCircle,\n  XCircle,\n  Brain,\n  TrendingUp,\n  Users,\n  Target\n} from \"lucide-react\";\n\ninterface CaseDetailModalProps {\n  caseId: number;\n  children?: React.ReactNode;\n}\n\ninterface CaseDetail {\n  id: number;\n  title: string;\n  description: string;\n  severity: string;\n  status: string;\n  client_name: string;\n  contact_info: string;\n  affected_systems?: string;\n  attack_vectors?: string;\n  evidence_urls?: string;\n  ai_analysis?: string;\n  assigned_analyst?: string;\n  assigned_certifier?: string;\n  transaction_hash?: string;\n  block_number?: number;\n  gas_used?: string;\n  contract_address?: string;\n  ticket_id?: number;\n  client_wallet?: string;\n  created_at: string;\n  updated_at: string;\n  priority: string;\n  reportedBy?: string;\n  createdAt: string;\n}\n\ninterface PoolInfo {\n  totalStaked: string;\n  participantCount: number;\n  rewardPool: string;\n  stakingDeadline: string;\n  analysisProgress: number;\n}\n\nexport default function CaseDetailModal({ caseId, children }: CaseDetailModalProps) {\n  const [caseData, setCaseData] = useState<CaseDetail | null>(null);\n  const [poolInfo, setPoolInfo] = useState<PoolInfo | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const { evmAddress, isEVMConnected, ethBalance } = useWallet();\n\n  const fetchCaseDetail = async () => {\n    if (!caseId) return;\n\n    setLoading(true);\n    try {\n      // Try incident reports first, then tickets as fallback\n      let response = await fetch(`/api/incident-reports/${caseId}`);\n\n      if (!response.ok && response.status === 404) {\n        // Fallback to tickets endpoint\n        response = await fetch(`/api/tickets/${caseId}`);\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `Failed to fetch case details: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setCaseData(data);\n    } catch (error) {\n      console.error('Error fetching case details:', error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to load case details.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadPoolInfo = async () => {\n    if (!caseId) return;\n\n    try {\n      // Mock pool data - replace with actual contract calls\n      const mockPoolInfo: PoolInfo = {\n        totalStaked: \"1250.50\",\n        participantCount: 8,\n        rewardPool: \"500.00\",\n        stakingDeadline: \"2024-02-15\",\n        analysisProgress: 65\n      };\n      setPoolInfo(mockPoolInfo);\n    } catch (error) {\n      console.error('Failed to load pool info:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (isOpen && caseId) {\n      fetchCaseDetail();\n      if (isEVMConnected) { // Only load pool info if EVM is connected\n        loadPoolInfo();\n      }\n    }\n  }, [isOpen, caseId, isEVMConnected]);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity.toLowerCase()) {\n      case 'critical': return 'bg-red-500/20 text-red-400 border-red-500/50';\n      case 'high': return 'bg-orange-500/20 text-orange-400 border-orange-500/50';\n      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/50';\n      case 'low': return 'bg-green-500/20 text-green-400 border-green-500/50';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/50';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority.toLowerCase()) {\n      case 'critical': return 'bg-red-500/20 text-red-400 border-red-500/50';\n      case 'high': return 'bg-orange-500/20 text-orange-400 border-orange-500/50';\n      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/50';\n      case 'low': return 'bg-green-500/20 text-green-400 border-green-500/50';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/50';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'pending': return 'bg-yellow-500/20 text-yellow-400';\n      case 'in_progress': return 'bg-blue-500/20 text-blue-400';\n      case 'resolved': return 'bg-green-500/20 text-green-400';\n      case 'closed': return 'bg-gray-500/20 text-gray-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'pending': return <Clock className=\"h-4 w-4\" />;\n      case 'in_progress': return <Activity className=\"h-4 w-4\" />;\n      case 'resolved': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'closed': return <XCircle className=\"h-4 w-4\" />;\n      default: return <AlertTriangle className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {children || (\n          <Button variant=\"outline\" size=\"sm\" className=\"cyber-glass border-red-500/30\">\n            <Eye className=\"h-4 w-4 mr-2\" />\n            View Details\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-6xl max-h-[95vh] overflow-y-auto bg-black border-red-500/30 backdrop-blur-sm\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-red-400 flex items-center gap-3 font-mono\">\n            <div className=\"w-10 h-10 bg-red-500/20 rounded-full flex items-center justify-center\">\n              <Shield className=\"h-6 w-6 text-red-400 cyber-pulse\" />\n            </div>\n            SECURITY CASE #{caseId} - CLASSIFIED\n          </DialogTitle>\n        </DialogHeader>\n\n        {loading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-4 border-red-400\"></div>\n            <span className=\"ml-4 text-red-400 font-mono text-lg\">ACCESSING CLASSIFIED DATA...</span>\n          </div>\n        ) : caseData ? (\n          <div className=\"space-y-6\">\n            {/* Case Status Banner */}\n            <div className=\"bg-gradient-to-r from-red-900/50 to-black border border-red-500/30 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-red-400 font-mono text-sm\">STATUS:</span>\n                    <Badge className={`${getStatusColor(caseData.status)} font-mono`}>\n                      {caseData.status.toUpperCase()}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-red-400 font-mono text-sm\">PRIORITY:</span>\n                    <Badge className={`${getPriorityColor(caseData.priority)} font-mono`}>\n                      {caseData.priority.toUpperCase()}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"text-red-400 font-mono text-sm\">\n                  CASE ID: #{caseId}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Case Details */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                {/* Case Overview */}\n                <Card className=\"bg-gray-900/50 border-red-500/30\">\n                  <CardHeader>\n                    <CardTitle className=\"text-red-400 flex items-center gap-2 font-mono\">\n                      <FileText className=\"h-5 w-5\" />\n                      INCIDENT DETAILS\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-red-400 text-sm font-mono\">THREAT TYPE:</label>\n                      <p className=\"text-white mt-1 bg-red-900/20 p-2 rounded border border-red-500/30\">\n                        {caseData.title}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"text-red-400 text-sm font-mono\">DESCRIPTION:</label>\n                      <p className=\"text-gray-300 mt-1 bg-gray-900/50 p-3 rounded border border-red-500/20\">\n                        {caseData.description}\n                      </p>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-red-400 text-sm font-mono\">REPORTED BY:</label>\n                        <p className=\"text-white font-mono bg-red-900/20 p-2 rounded border border-red-500/30\">\n                          {caseData.reportedBy?.slice(0, 10)}...{caseData.reportedBy?.slice(-8)}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-red-400 text-sm font-mono\">TIMESTAMP:</label>\n                        <p className=\"text-white font-mono bg-red-900/20 p-2 rounded border border-red-500/30\">\n                          {new Date(caseData.createdAt).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Analysis Progress */}\n                <Card className=\"bg-gray-900/50 border-red-500/30\">\n                  <CardHeader>\n                    <CardTitle className=\"text-red-400 flex items-center gap-2 font-mono\">\n                      <Activity className=\"h-5 w-5\" />\n                      ANALYSIS PROGRESS\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-300 font-mono\">Analysis Completion</span>\n                        <span className=\"text-red-400 font-mono\">{poolInfo?.analysisProgress || 0}%</span>\n                      </div>\n                      <Progress\n                        value={poolInfo?.analysisProgress || 0}\n                        className=\"bg-gray-800 border border-red-500/30\"\n                      />\n                      <div className=\"text-xs text-gray-400 font-mono\">\n                        Security analysts are currently reviewing this case\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Security Pool Information */}\n              <div className=\"space-y-6\">\n                {isEVMConnected && poolInfo && (\n                  <Card className=\"bg-red-900/20 border-red-500/30\">\n                    <CardHeader>\n                      <CardTitle className=\"text-red-400 flex items-center gap-2 font-mono\">\n                        <Coins className=\"h-5 w-5\" />\n                        SECURITY POOL\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 gap-3\">\n                        <div className=\"bg-black/50 p-3 rounded border border-red-500/20\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <TrendingUp className=\"h-4 w-4 text-red-400\" />\n                            <span className=\"text-red-400 text-sm font-mono\">TOTAL STAKED</span>\n                          </div>\n                          <p className=\"text-white text-xl font-mono font-bold\">\n                            {poolInfo.totalStaked} CLT\n                          </p>\n                        </div>\n\n                        <div className=\"bg-black/50 p-3 rounded border border-red-500/20\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <Users className=\"h-4 w-4 text-red-400\" />\n                            <span className=\"text-red-400 text-sm font-mono\">PARTICIPANTS</span>\n                          </div>\n                          <p className=\"text-white text-xl font-mono font-bold\">\n                            {poolInfo.participantCount} Analysts\n                          </p>\n                        </div>\n\n                        <div className=\"bg-black/50 p-3 rounded border border-red-500/20\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <Target className=\"h-4 w-4 text-red-400\" />\n                            <span className=\"text-red-400 text-sm font-mono\">REWARD POOL</span>\n                          </div>\n                          <p className=\"text-white text-xl font-mono font-bold\">\n                            {poolInfo.rewardPool} CLT\n                          </p>\n                        </div>\n                      </div>\n\n                      <Separator className=\"bg-red-500/30\" />\n\n                      <div>\n                        <span className=\"text-red-400 text-sm font-mono\">DEADLINE:</span>\n                        <p className=\"text-white font-mono\">\n                          {new Date(poolInfo.stakingDeadline).toLocaleDateString()}\n                        </p>\n                      </div>\n\n                      <Button className=\"w-full bg-red-600 hover:bg-red-700 text-white font-mono\">\n                        JOIN SECURITY POOL\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Action Buttons */}\n                <Card className=\"bg-gray-900/50 border-red-500/30\">\n                  <CardHeader>\n                    <CardTitle className=\"text-red-400 flex items-center gap-2 font-mono\">\n                      <Shield className=\"h-5 w-5\" />\n                      ANALYST ACTIONS\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <Button className=\"w-full bg-red-600 hover:bg-red-700 text-white font-mono\">\n                      🤖 REQUEST AI ANALYSIS\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full border-red-500/30 text-red-400 hover:bg-red-900/20 font-mono\">\n                      📊 VIEW THREAT INTEL\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full border-red-500/30 text-red-400 hover:bg-red-900/20 font-mono\">\n                      🔍 START DEEP SCAN\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <AlertTriangle className=\"h-16 w-16 text-red-400 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-bold text-red-400 font-mono mb-2\">ACCESS DENIED</h3>\n            <p className=\"text-gray-400 font-mono\">Security case data is classified</p>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15731},"client/src/components/CasesList.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"./ui/card\";\nimport { Badge } from \"./ui/badge\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CaseDetailModal from \"./CaseDetailModal\";\nimport {\n  Search,\n  FileText,\n  Clock,\n  User,\n  Shield,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Eye,\n  Filter,\n  SortDesc,\n  RefreshCw,\n  ExternalLink,\n  Hash,\n  Coins,\n  Target,\n  Lock,\n  Users,\n  TrendingUp,\n} from \"lucide-react\";\nimport { LoadingSpinner } from \"./ui/loading-spinner\";\n\ninterface Case {\n  id: number;\n  title: string;\n  description: string;\n  severity: string;\n  status: string;\n  client_name: string;\n  contact_info: string;\n  assigned_analyst?: string;\n  assigned_certifier?: string;\n  transaction_hash?: string;\n  block_number?: number;\n  gas_used?: string;\n  contract_address?: string;\n  ticket_id?: number;\n  client_wallet?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface CasesListProps {\n  walletType: 'evm' | 'iota';\n}\n\nexport default function CasesList({ walletType }: CasesListProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [severityFilter, setSeverityFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const { toast } = useToast();\n  const [selectedCaseId, setSelectedCaseId] = useState<number | null>(null);\n\n  // Fetch real tickets/cases from API - real-time integration\n  const { data: tickets = [], isLoading: ticketsLoading, error: ticketsError, refetch: refetchTickets } = useQuery({\n    queryKey: ['tickets'],\n    queryFn: async () => {\n      const response = await fetch('/api/tickets');\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch tickets`);\n      }\n      return response.json();\n    },\n    refetchInterval: 5000, // Refresh every 5 seconds for real-time updates\n    retry: 3, // Retry failed requests up to 3 times\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000), // Exponential backoff\n  });\n\n  // Fetch incident reports from API\n  const { data: incidentReports = [], isLoading: reportsLoading, error: reportsError, refetch: refetchIncidentReports } = useQuery({\n    queryKey: ['incident-reports'],\n    queryFn: async () => {\n      const response = await fetch('/api/incident-reports');\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch incident reports`);\n      }\n      return response.json();\n    },\n    refetchInterval: 5000, // Refresh every 5 seconds for real-time updates\n    retry: 3, // Retry failed requests up to 3 times\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000), // Exponential backoff\n  });\n\n  // Combine tickets and incident reports\n  const allCases = [...tickets, ...incidentReports];\n\n  // Apply filters to combined cases\n  const filteredCases = allCases.filter((caseItem: Case) => {\n    const matchesSearch = caseItem.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      caseItem.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      caseItem.client_name?.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesSeverity = severityFilter === \"all\" ||\n      caseItem.severity?.toLowerCase() === severityFilter;\n\n    const matchesStatus = statusFilter === \"all\" ||\n      caseItem.status?.toLowerCase() === statusFilter;\n\n    return matchesSearch && matchesSeverity && matchesStatus;\n  });\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity?.toLowerCase()) {\n      case 'critical': return 'bg-red-700/30 text-red-400 border-red-500/30';\n      case 'high': return 'bg-orange-700/30 text-orange-400 border-orange-500/30';\n      case 'medium': return 'bg-yellow-700/30 text-yellow-400 border-yellow-500/30';\n      case 'low': return 'bg-green-700/30 text-green-400 border-green-500/30';\n      default: return 'bg-gray-700/30 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'pending': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      case 'assigned': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'in_progress': return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n      case 'completed': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'closed': return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n      case 'open': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'pending': return <Clock className=\"h-4 w-4\" />;\n      case 'assigned': return <User className=\"h-4 w-4\" />;\n      case 'in_progress': return <Shield className=\"h-4 w-4\" />;\n      case 'completed': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'closed': return <XCircle className=\"h-4 w-4\" />;\n      case 'open': return <AlertTriangle className=\"h-4 w-4\" />;\n      default: return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } catch {\n      return dateString;\n    }\n  };\n\n  const handleRefresh = () => {\n    refetchTickets();\n    refetchIncidentReports();\n    toast({\n      title: \"Refreshing Cases\",\n      description: \"Fetching latest case and incident report data...\",\n    });\n  };\n\n  const isLoading = ticketsLoading || reportsLoading;\n  const error = ticketsError || reportsError;\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <Card className=\"cyber-glass bg-red-900/20 border-red-500/30\">\n          <CardContent className=\"p-6 text-center\">\n            <AlertTriangle className=\"h-12 w-12 text-red-400 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-bold text-red-400 mb-2\">Error Loading Cases</h3>\n            <p className=\"text-gray-300 mb-4\">Failed to fetch case data from the system.</p>\n            <Button onClick={handleRefresh} className=\"btn-cyber\">\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Retry\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-red-500 mb-2 font-mono\">\n            Security Cases Management\n          </h2>\n          <p className=\"text-gray-300 text-sm\">\n            Real-time case tracking • {walletType.toUpperCase()} Network • {filteredCases.length} cases\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            onClick={handleRefresh}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"border-red-500/30 text-red-400 hover:bg-red-950/30\"\n            disabled={isLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"cyber-glass bg-red-900/10 border-red-500/30\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search cases...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 bg-black/50 border-red-500/30 text-red-100 placeholder:text-gray-500\"\n              />\n            </div>\n\n            <select\n              value={severityFilter}\n              onChange={(e) => setSeverityFilter(e.target.value)}\n              className=\"px-3 py-2 bg-black/50 border border-red-500/30 rounded-md text-red-100 text-sm\"\n            >\n              <option value=\"all\">All Severities</option>\n              <option value=\"critical\">Critical</option>\n              <option value=\"high\">High</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"low\">Low</option>\n            </select>\n\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              className=\"px-3 py-2 bg-black/50 border border-red-500/30 rounded-md text-red-100 text-sm\"\n            >\n              <option value=\"all\">All Statuses</option>\n              <option value=\"open\">Open</option>\n              <option value=\"pending\">Pending</option>\n              <option value=\"assigned\">Assigned</option>\n              <option value=\"in_progress\">In Progress</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"closed\">Closed</option>\n            </select>\n\n            <div className=\"flex items-center gap-2 text-sm text-gray-400\">\n              <Filter className=\"h-4 w-4\" />\n              <span>{filteredCases.length} of {allCases.length} cases</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Cases List */}\n      {isLoading ? (\n        <div className=\"flex items-center justify-center p-8\">\n          <div className=\"text-center\">\n            <LoadingSpinner />\n            <p className=\"text-gray-300 mt-4\">Loading real-time case data...</p>\n          </div>\n        </div>\n      ) : filteredCases.length === 0 ? (\n        <Card className=\"cyber-glass bg-yellow-900/10 border-yellow-500/30\">\n          <CardContent className=\"p-8 text-center\">\n            <FileText className=\"h-12 w-12 text-yellow-400 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-bold text-yellow-400 mb-2\">No Cases Found</h3>\n            <p className=\"text-gray-300\">\n              {allCases.length === 0\n                ? \"No security cases have been submitted yet.\"\n                : \"No cases match your current filters.\"}\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {filteredCases.map((caseItem: Case) => (\n            <Card\n              key={caseItem.id}\n              className=\"cyber-glass bg-red-900/10 border-red-500/30 hover:border-red-400/50 transition-colors\"\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row lg:items-center justify-between gap-4\">\n                  <div className=\"flex-1 space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h3 className=\"text-lg font-bold text-red-400 mb-1 font-mono\">\n                          #{caseItem.id} {caseItem.title}\n                        </h3>\n                        <p className=\"text-gray-300 text-sm line-clamp-2\">\n                          {caseItem.description}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex flex-wrap items-center gap-2\">\n                      <Badge className={getSeverityColor(caseItem.severity)}>\n                        <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                        {caseItem.severity?.toUpperCase()}\n                      </Badge>\n\n                      <Badge className={getStatusColor(caseItem.status)}>\n                        {getStatusIcon(caseItem.status)}\n                        <span className=\"ml-1\">{caseItem.status?.replace('_', ' ').toUpperCase()}</span>\n                      </Badge>\n\n                      {caseItem.client_wallet && (\n                        <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">\n                          <Hash className=\"h-3 w-3 mr-1\" />\n                          {caseItem.client_wallet.slice(0, 6)}...{caseItem.client_wallet.slice(-4)}\n                        </Badge>\n                      )}\n\n                      {caseItem.transaction_hash && (\n                        <Badge className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\">\n                          <ExternalLink className=\"h-3 w-3 mr-1\" />\n                          Tx: {caseItem.transaction_hash.slice(0, 6)}...\n                        </Badge>\n                      )}\n                    </div>\n\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 text-sm\">\n                      <div className=\"flex items-center gap-2 text-gray-400\">\n                        <User className=\"h-4 w-4\" />\n                        <span>Client: {caseItem.client_name}</span>\n                      </div>\n\n                      <div className=\"flex items-center gap-2 text-gray-400\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span>Created: {formatDate(caseItem.created_at)}</span>\n                      </div>\n\n                      {caseItem.assigned_analyst && (\n                        <div className=\"flex items-center gap-2 text-gray-400\">\n                          <Shield className=\"h-4 w-4\" />\n                          <span>Analyst: {caseItem.assigned_analyst}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col gap-2\">\n                    <Button\n                      onClick={() => setSelectedCaseId(caseItem.id)}\n                      size=\"sm\"\n                      className=\"btn-cyber whitespace-nowrap\"\n                    >\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Case Detail Modal */}\n      {selectedCaseId && (\n        <CaseDetailModal\n          caseId={selectedCaseId}\n          isOpen={selectedCaseId !== null}\n          onClose={() => setSelectedCaseId(null)}\n          walletType={walletType}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":14755},"client/src/components/EVMBalanceDisplay.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { Button } from './ui/button';\nimport { useWallet } from './WalletProvider';\nimport { evmContractService } from '@/lib/evm-contract';\nimport { useToast } from '@/hooks/use-toast';\nimport { Wallet, RefreshCw, DollarSign, Zap } from 'lucide-react';\n\nexport default function EVMBalanceDisplay() {\n  const { evmAddress, isEVMConnected } = useWallet();\n  const { toast } = useToast();\n  const [ethBalance, setEthBalance] = useState<string>('0');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const fetchBalance = async () => {\n    if (!evmAddress || !isEVMConnected) return;\n\n    try {\n      setIsLoading(true);\n      const balance = await evmContractService.getETHBalance(evmAddress);\n      setEthBalance(balance);\n    } catch (error: any) {\n      console.error('Error fetching ETH balance:', error);\n      toast({\n        title: \"Balance Fetch Failed\",\n        description: error.message || \"Failed to fetch ETH balance\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await fetchBalance();\n    setIsRefreshing(false);\n    toast({\n      title: \"Balance Updated\",\n      description: \"ETH balance has been refreshed\",\n    });\n  };\n\n  useEffect(() => {\n    if (isEVMConnected && evmAddress) {\n      fetchBalance();\n    }\n  }, [evmAddress, isEVMConnected]);\n\n  if (!isEVMConnected) {\n    return (\n      <Card className=\"bg-slate-800/50 border-orange-500/30 backdrop-blur-sm\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"w-12 h-12 bg-orange-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n            <Wallet className=\"h-6 w-6 text-orange-400\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-orange-400 mb-2\">EVM Wallet Not Connected</h3>\n          <p className=\"text-gray-400 text-sm\">Connect your MetaMask wallet to view ETH balance</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-slate-800/50 border-blue-500/30 backdrop-blur-sm\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center justify-between text-lg\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n              <DollarSign className=\"h-4 w-4 text-blue-400\" />\n            </div>\n            <span className=\"text-blue-400\">ETH Balance</span>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            className=\"text-gray-400 hover:text-white\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-gray-400 text-sm\">Wallet Address:</span>\n            <Badge variant=\"outline\" className=\"text-xs font-mono\">\n              {evmAddress?.slice(0, 6)}...{evmAddress?.slice(-4)}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-gray-400 text-sm\">Network:</span>\n            <Badge className=\"bg-orange-500/20 text-orange-400 border-orange-500/30\">\n              Scroll Sepolia\n            </Badge>\n          </div>\n\n          <div className=\"pt-2 border-t border-gray-700\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-4\">\n                <div className=\"w-6 h-6 border-2 border-blue-400 border-t-transparent rounded-full animate-spin\"></div>\n                <span className=\"ml-2 text-gray-400\">Loading balance...</span>\n              </div>\n            ) : (\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-white flex items-center justify-center gap-2\">\n                  <Zap className=\"h-6 w-6 text-blue-400\" />\n                  {parseFloat(ethBalance).toFixed(6)} ETH\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Native balance on Scroll Sepolia Testnet\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4672},"client/src/components/StakingPoolsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Badge } from \"./ui/badge\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"./WalletProvider\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { formatUnits, parseUnits } from \"ethers\";\nimport {\n  Coins,\n  Shield,\n  TrendingUp,\n  DollarSign,\n  Users,\n  Clock,\n  Target,\n  Lock,\n  Unlock,\n  Plus,\n  Minus,\n  RefreshCw\n} from \"lucide-react\";\n\ninterface StakingPool {\n  id: string;\n  caseId?: number;\n  caseTitle?: string;\n  totalStaked: string;\n  participantCount: number;\n  rewardRate: string;\n  isActive: boolean;\n  createdAt: string;\n  description: string;\n  severity: string;\n}\n\nexport default function StakingPoolsPage() {\n  const [stakingPools, setStakingPools] = useState<StakingPool[]>([]);\n  const [userStakeInfo, setUserStakeInfo] = useState({\n    amount: \"0\",\n    rewardDebt: \"0\",\n    pendingRewards: \"0\"\n  });\n  const [stakeAmount, setStakeAmount] = useState(\"10\");\n  const [unstakeAmount, setUnstakeAmount] = useState(\"5\");\n  const [loading, setLoading] = useState(false);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const { evmAddress, isEVMConnected } = useWallet();\n  const { toast } = useToast();\n\n  // Mock staking pools data based on real incident reports\n  const loadStakingPools = async () => {\n    setRefreshing(true);\n    try {\n      // Get real incident reports to create staking pools\n      const response = await fetch('/api/incident-reports');\n      const incidents = await response.json();\n\n      const pools: StakingPool[] = incidents.map((incident: any, index: number) => ({\n        id: `pool-${incident.id}`,\n        caseId: incident.id,\n        caseTitle: incident.title,\n        totalStaked: (Math.random() * 1000 + 100).toFixed(2), // Simulated staking amounts\n        participantCount: Math.floor(Math.random() * 20) + 1,\n        rewardRate: \"5.25\", // 5.25% APY\n        isActive: incident.status !== 'closed',\n        createdAt: incident.created_at,\n        description: incident.description,\n        severity: incident.severity\n      }));\n\n      // Add a general security pool\n      pools.unshift({\n        id: \"general-security-pool\",\n        caseTitle: \"General Security Operations Pool\",\n        totalStaked: \"5432.18\",\n        participantCount: 127,\n        rewardRate: \"8.50\",\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        description: \"Stake CLT tokens to support general security operations and earn rewards\",\n        severity: \"medium\"\n      });\n\n      setStakingPools(pools);\n    } catch (error) {\n      console.error('Error loading staking pools:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load staking pools\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  // Load user staking info from blockchain\n  const loadUserStakeInfo = async () => {\n    if (!isEVMConnected || !evmAddress) return;\n\n    try {\n      const stakeInfo = await evmContractService.getStakeInfo(evmAddress);\n      const cltBalance = await evmContractService.getCLTBalance(evmAddress);\n      \n      setUserStakeInfo({\n        amount: formatUnits(stakeInfo.amount, 18),\n        rewardDebt: formatUnits(stakeInfo.rewardDebt, 18),\n        pendingRewards: formatUnits(cltBalance, 18) // Simplified for demo\n      });\n    } catch (error) {\n      console.error('Error loading stake info:', error);\n    }\n  };\n\n  useEffect(() => {\n    loadStakingPools();\n    loadUserStakeInfo();\n  }, [evmAddress, isEVMConnected]);\n\n  const handleStake = async (poolId: string) => {\n    if (!isEVMConnected || !evmAddress) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your MetaMask wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const tx = await evmContractService.stake(stakeAmount);\n      await tx.wait();\n\n      toast({\n        title: \"Staking Successful!\",\n        description: `Successfully staked ${stakeAmount} CLT tokens`,\n      });\n\n      // Refresh data\n      await loadUserStakeInfo();\n      await loadStakingPools();\n\n    } catch (error: any) {\n      console.error('Staking failed:', error);\n      toast({\n        title: \"Staking Failed\",\n        description: error.message || \"Failed to stake tokens\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUnstake = async () => {\n    if (!isEVMConnected || !evmAddress) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your MetaMask wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const tx = await evmContractService.withdraw(unstakeAmount);\n      await tx.wait();\n\n      toast({\n        title: \"Unstaking Successful!\",\n        description: `Successfully unstaked ${unstakeAmount} CLT tokens`,\n      });\n\n      // Refresh data\n      await loadUserStakeInfo();\n      await loadStakingPools();\n\n    } catch (error: any) {\n      console.error('Unstaking failed:', error);\n      toast({\n        title: \"Unstaking Failed\",\n        description: error.message || \"Failed to unstake tokens\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClaimRewards = async () => {\n    if (!isEVMConnected || !evmAddress) return;\n\n    setLoading(true);\n    try {\n      const tx = await evmContractService.claimRewards();\n      await tx.wait();\n\n      toast({\n        title: \"Rewards Claimed!\",\n        description: \"Successfully claimed your staking rewards\",\n      });\n\n      await loadUserStakeInfo();\n\n    } catch (error: any) {\n      console.error('Claim failed:', error);\n      toast({\n        title: \"Claim Failed\",\n        description: error.message || \"Failed to claim rewards\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity.toLowerCase()) {\n      case 'critical': return 'bg-red-500/20 text-red-400 border-red-500/50';\n      case 'high': return 'bg-orange-500/20 text-orange-400 border-orange-500/50';\n      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/50';\n      case 'low': return 'bg-green-500/20 text-green-400 border-green-500/50';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/50';\n    }\n  };\n\n  if (!isEVMConnected) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card className=\"cyber-glass border-red-500/30\">\n          <CardContent className=\"p-8 text-center\">\n            <Shield className=\"h-16 w-16 text-red-500 mx-auto mb-4 cyber-pulse\" />\n            <h2 className=\"text-2xl font-bold text-red-400 mb-4 font-mono\">Connect MetaMask</h2>\n            <p className=\"text-gray-300\">\n              Please connect your MetaMask wallet to view and participate in staking pools\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-red-400 font-mono flex items-center gap-2\">\n            <Coins className=\"h-8 w-8\" />\n            Security Staking Pools\n          </h1>\n          <p className=\"text-gray-400 mt-2\">\n            Stake CLT tokens to support security operations and earn rewards\n          </p>\n        </div>\n        <Button\n          onClick={() => {\n            loadStakingPools();\n            loadUserStakeInfo();\n          }}\n          disabled={refreshing}\n          className=\"btn-cyber\"\n        >\n          <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n          Refresh\n        </Button>\n      </div>\n\n      {/* User Staking Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"cyber-glass border-green-500/30\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm text-green-400 flex items-center gap-2\">\n              <Lock className=\"h-4 w-4\" />\n              Your Staked\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-2xl font-bold text-white font-mono\">{parseFloat(userStakeInfo.amount).toFixed(2)} CLT</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cyber-glass border-yellow-500/30\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm text-yellow-400 flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4\" />\n              Pending Rewards\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-2xl font-bold text-white font-mono\">{parseFloat(userStakeInfo.pendingRewards).toFixed(4)} CLT</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cyber-glass border-blue-500/30\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm text-blue-400 flex items-center gap-2\">\n              <Target className=\"h-4 w-4\" />\n              Total Pools\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-2xl font-bold text-white font-mono\">{stakingPools.length}</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cyber-glass border-purple-500/30\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm text-purple-400 flex items-center gap-2\">\n              <DollarSign className=\"h-4 w-4\" />\n              Est. APY\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-2xl font-bold text-white font-mono\">8.5%</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Staking Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"cyber-glass border-green-500/30\">\n          <CardHeader>\n            <CardTitle className=\"text-green-400 flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              Stake Tokens\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm text-gray-400 mb-2\">Amount (CLT)</label>\n              <Input\n                type=\"number\"\n                value={stakeAmount}\n                onChange={(e) => setStakeAmount(e.target.value)}\n                placeholder=\"10\"\n                className=\"bg-gray-900/50 border-green-500/30\"\n              />\n            </div>\n            <Button\n              onClick={() => handleStake(\"general-security-pool\")}\n              disabled={loading}\n              className=\"w-full btn-cyber bg-green-600 hover:bg-green-500\"\n            >\n              {loading ? \"Staking...\" : \"Stake CLT\"}\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cyber-glass border-orange-500/30\">\n          <CardHeader>\n            <CardTitle className=\"text-orange-400 flex items-center gap-2\">\n              <Minus className=\"h-5 w-5\" />\n              Unstake Tokens\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm text-gray-400 mb-2\">Amount (CLT)</label>\n              <Input\n                type=\"number\"\n                value={unstakeAmount}\n                onChange={(e) => setUnstakeAmount(e.target.value)}\n                placeholder=\"5\"\n                className=\"bg-gray-900/50 border-orange-500/30\"\n              />\n            </div>\n            <Button\n              onClick={handleUnstake}\n              disabled={loading}\n              className=\"w-full btn-cyber bg-orange-600 hover:bg-orange-500\"\n            >\n              {loading ? \"Unstaking...\" : \"Unstake CLT\"}\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cyber-glass border-purple-500/30\">\n          <CardHeader>\n            <CardTitle className=\"text-purple-400 flex items-center gap-2\">\n              <Unlock className=\"h-5 w-5\" />\n              Claim Rewards\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm text-gray-400\">Available Rewards</p>\n              <p className=\"text-xl font-bold text-white font-mono\">{parseFloat(userStakeInfo.pendingRewards).toFixed(4)} CLT</p>\n            </div>\n            <Button\n              onClick={handleClaimRewards}\n              disabled={loading || parseFloat(userStakeInfo.pendingRewards) === 0}\n              className=\"w-full btn-cyber bg-purple-600 hover:bg-purple-500\"\n            >\n              {loading ? \"Claiming...\" : \"Claim Rewards\"}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Staking Pools List */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-bold text-red-400 font-mono\">Available Staking Pools</h2>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          {stakingPools.map((pool) => (\n            <Card key={pool.id} className=\"cyber-glass border-red-500/20 hover:border-red-500/40 transition-colors\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-red-400 text-lg\">\n                    {pool.caseTitle}\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className={getSeverityColor(pool.severity)}>\n                      {pool.severity.toUpperCase()}\n                    </Badge>\n                    <Badge className={pool.isActive ? \"bg-green-500/20 text-green-400\" : \"bg-gray-500/20 text-gray-400\"}>\n                      {pool.isActive ? \"Active\" : \"Closed\"}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-300 text-sm mb-4 line-clamp-2\">\n                  {pool.description}\n                </p>\n                \n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center gap-1 text-yellow-400 mb-1\">\n                      <Coins className=\"h-4 w-4\" />\n                    </div>\n                    <p className=\"text-white font-mono\">{parseFloat(pool.totalStaked).toFixed(2)}</p>\n                    <p className=\"text-gray-400 text-xs\">Total Staked</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center gap-1 text-blue-400 mb-1\">\n                      <Users className=\"h-4 w-4\" />\n                    </div>\n                    <p className=\"text-white font-mono\">{pool.participantCount}</p>\n                    <p className=\"text-gray-400 text-xs\">Participants</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center gap-1 text-green-400 mb-1\">\n                      <TrendingUp className=\"h-4 w-4\" />\n                    </div>\n                    <p className=\"text-white font-mono\">{pool.rewardRate}%</p>\n                    <p className=\"text-gray-400 text-xs\">APY</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center gap-1 text-purple-400 mb-1\">\n                      <Clock className=\"h-4 w-4\" />\n                    </div>\n                    <p className=\"text-white font-mono\">{Math.floor((Date.now() - new Date(pool.createdAt).getTime()) / (1000 * 60 * 60 * 24))}d</p>\n                    <p className=\"text-gray-400 text-xs\">Duration</p>\n                  </div>\n                </div>\n\n                {pool.isActive && (\n                  <div className=\"mt-4 pt-4 border-t border-gray-700\">\n                    <Button\n                      onClick={() => handleStake(pool.id)}\n                      disabled={loading}\n                      className=\"w-full btn-cyber text-sm\"\n                    >\n                      Stake in This Pool\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16850},"client/src/components/ui/loading-spinner.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LoadingSpinnerProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function LoadingSpinner({ className, size = \"md\" }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"h-4 w-4\",\n    md: \"h-6 w-6\", \n    lg: \"h-8 w-8\"\n  };\n\n  return (\n    <div className={cn(\"animate-spin rounded-full border-2 border-gray-600 border-t-blue-400\", sizeClasses[size], className)} />\n  );\n}","size_bytes":436},"client/src/components/CLTRewardManager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { Badge } from \"./ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"./ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"./WalletProvider\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { \n  Coins, \n  Award, \n  Users, \n  Shield,\n  Target,\n  ArrowUpCircle,\n  ExternalLink,\n  RefreshCw,\n  Wallet,\n  Activity\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\n\ninterface RewardStats {\n  totalRewardsMinted: number;\n  analystRewards: number;\n  certifierRewards: number;\n  stakerRewards: number;\n  userCLTBalance: number;\n}\n\ninterface RewardHistory {\n  id: number;\n  recipient: string;\n  amount: string;\n  type: 'analyst' | 'certifier' | 'staker';\n  txHash: string;\n  timestamp: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\nexport default function CLTRewardManager() {\n  const [rewardStats, setRewardStats] = useState<RewardStats>({\n    totalRewardsMinted: 0,\n    analystRewards: 0,\n    certifierRewards: 0,\n    stakerRewards: 0,\n    userCLTBalance: 0\n  });\n\n  const [rewardHistory, setRewardHistory] = useState<RewardHistory[]>([]);\n  const [recipientAddress, setRecipientAddress] = useState(\"\");\n  const [rewardAmount, setRewardAmount] = useState(\"50\");\n  const [rewardType, setRewardType] = useState<'analyst' | 'certifier' | 'staker'>('analyst');\n  const [ticketId, setTicketId] = useState(\"\");\n  \n  const [isLoading, setIsLoading] = useState(true);\n  const [isMinting, setIsMinting] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const { evmAddress, isEVMConnected } = useWallet();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (isEVMConnected && evmAddress) {\n      loadRewardData();\n    }\n  }, [isEVMConnected, evmAddress]);\n\n  const loadRewardData = async () => {\n    if (!evmAddress) return;\n\n    try {\n      setIsLoading(true);\n\n      // Get user's CLT balance\n      const cltBalanceBN = await evmContractService.getCLTBalance(evmAddress);\n      const cltBalance = parseFloat(evmContractService.formatCLT(cltBalanceBN));\n\n      setRewardStats({\n        totalRewardsMinted: 1250, // Mock data - in real app, fetch from events\n        analystRewards: 800,\n        certifierRewards: 300,\n        stakerRewards: 150,\n        userCLTBalance: cltBalance\n      });\n\n      // Mock reward history - in real app, fetch from blockchain events\n      setRewardHistory([\n        {\n          id: 1,\n          recipient: evmAddress,\n          amount: \"50\",\n          type: 'analyst',\n          txHash: \"0x123...abc\",\n          timestamp: new Date().toISOString(),\n          status: 'completed'\n        }\n      ]);\n\n    } catch (error) {\n      console.error(\"Error loading reward data:\", error);\n      toast({\n        title: \"Error Loading Data\",\n        description: \"Failed to load reward information\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleMintReward = async () => {\n    if (!recipientAddress || !rewardAmount) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter recipient address and reward amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsMinting(true);\n\n      let result;\n      if (rewardType === 'analyst' && ticketId) {\n        result = await evmContractService.mintAnalystReward(recipientAddress, parseInt(ticketId));\n      } else if (rewardType === 'certifier' && ticketId) {\n        result = await evmContractService.mintCertifierReward(recipientAddress, parseInt(ticketId));\n      } else if (rewardType === 'staker') {\n        result = await evmContractService.mintStakerReward(recipientAddress, rewardAmount);\n      } else {\n        result = await evmContractService.mintReward(recipientAddress, rewardAmount, rewardType);\n      }\n\n      toast({\n        title: \"Reward Minted Successfully!\",\n        description: `${rewardAmount} CLT tokens minted for ${rewardType}`,\n      });\n\n      // Add to history\n      const newReward: RewardHistory = {\n        id: rewardHistory.length + 1,\n        recipient: recipientAddress,\n        amount: rewardAmount,\n        type: rewardType,\n        txHash: result.hash,\n        timestamp: new Date().toISOString(),\n        status: 'completed'\n      };\n      setRewardHistory([newReward, ...rewardHistory]);\n\n      // Update stats\n      setRewardStats(prev => ({\n        ...prev,\n        totalRewardsMinted: prev.totalRewardsMinted + parseFloat(rewardAmount),\n        [rewardType === 'analyst' ? 'analystRewards' : \n         rewardType === 'certifier' ? 'certifierRewards' : 'stakerRewards']: \n        prev[rewardType === 'analyst' ? 'analystRewards' : \n           rewardType === 'certifier' ? 'certifierRewards' : 'stakerRewards'] + parseFloat(rewardAmount)\n      }));\n\n      // Reset form\n      setRecipientAddress(\"\");\n      setRewardAmount(rewardType === 'analyst' ? \"50\" : rewardType === 'certifier' ? \"30\" : \"25\");\n      setTicketId(\"\");\n\n    } catch (error) {\n      console.error(\"Error minting reward:\", error);\n      toast({\n        title: \"Minting Failed\",\n        description: error instanceof Error ? error.message : \"Failed to mint CLT reward\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await loadRewardData();\n    setIsRefreshing(false);\n    toast({\n      title: \"Data Refreshed\",\n      description: \"Reward data has been updated\",\n    });\n  };\n\n  const getRewardTypeIcon = (type: string) => {\n    switch (type) {\n      case 'analyst': return <Users className=\"h-4 w-4\" />;\n      case 'certifier': return <Shield className=\"h-4 w-4\" />;\n      case 'staker': return <Target className=\"h-4 w-4\" />;\n      default: return <Coins className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getRewardTypeColor = (type: string) => {\n    switch (type) {\n      case 'analyst': return 'bg-blue-500/10 text-blue-500 border-blue-500/20';\n      case 'certifier': return 'bg-green-500/10 text-green-500 border-green-500/20';\n      case 'staker': return 'bg-purple-500/10 text-purple-500 border-purple-500/20';\n      default: return 'bg-gray-500/10 text-gray-500 border-gray-500/20';\n    }\n  };\n\n  if (!isEVMConnected) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Wallet className=\"h-5 w-5\" />\n            CLT Reward Manager\n          </CardTitle>\n          <CardDescription>\n            Connect your EVM wallet to manage CLT token rewards\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground text-center py-8\">\n            Please connect your EVM wallet to access reward management\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Reward Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Coins className=\"h-4 w-4 text-yellow-500\" />\n              Your CLT Balance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{rewardStats.userCLTBalance.toFixed(2)}</div>\n            <p className=\"text-xs text-muted-foreground\">CLT Tokens</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Users className=\"h-4 w-4 text-blue-500\" />\n              Analyst Rewards\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{rewardStats.analystRewards}</div>\n            <p className=\"text-xs text-muted-foreground\">CLT Minted</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Shield className=\"h-4 w-4 text-green-500\" />\n              Certifier Rewards\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{rewardStats.certifierRewards}</div>\n            <p className=\"text-xs text-muted-foreground\">CLT Minted</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Target className=\"h-4 w-4 text-purple-500\" />\n              Staker Rewards\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{rewardStats.stakerRewards}</div>\n            <p className=\"text-xs text-muted-foreground\">CLT Minted</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"mint\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"mint\">Mint Rewards</TabsTrigger>\n          <TabsTrigger value=\"history\">Reward History</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"mint\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <Award className=\"h-5 w-5\" />\n                  Mint CLT Rewards\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleRefresh}\n                  disabled={isRefreshing}\n                >\n                  <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n                </Button>\n              </CardTitle>\n              <CardDescription>\n                Mint CLT tokens as rewards for analysts, certifiers, and stakers\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"recipientAddress\">Recipient Address</Label>\n                  <Input\n                    id=\"recipientAddress\"\n                    placeholder=\"0x...\"\n                    value={recipientAddress}\n                    onChange={(e) => setRecipientAddress(e.target.value)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"rewardType\">Reward Type</Label>\n                  <Select value={rewardType} onValueChange={(value: 'analyst' | 'certifier' | 'staker') => {\n                    setRewardType(value);\n                    // Set default amounts\n                    setRewardAmount(value === 'analyst' ? \"50\" : value === 'certifier' ? \"30\" : \"25\");\n                  }}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"analyst\">Analyst (50 CLT)</SelectItem>\n                      <SelectItem value=\"certifier\">Certifier (30 CLT)</SelectItem>\n                      <SelectItem value=\"staker\">Staker (Custom)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"rewardAmount\">Reward Amount (CLT)</Label>\n                  <Input\n                    id=\"rewardAmount\"\n                    type=\"number\"\n                    placeholder=\"50\"\n                    value={rewardAmount}\n                    onChange={(e) => setRewardAmount(e.target.value)}\n                  />\n                </div>\n                {(rewardType === 'analyst' || rewardType === 'certifier') && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ticketId\">Ticket ID (Optional)</Label>\n                    <Input\n                      id=\"ticketId\"\n                      type=\"number\"\n                      placeholder=\"123\"\n                      value={ticketId}\n                      onChange={(e) => setTicketId(e.target.value)}\n                    />\n                  </div>\n                )}\n              </div>\n\n              <Button\n                onClick={handleMintReward}\n                disabled={isMinting || !recipientAddress || !rewardAmount}\n                className=\"w-full\"\n              >\n                {isMinting ? (\n                  <RefreshCw className=\"h-4 w-4 animate-spin mr-2\" />\n                ) : (\n                  <ArrowUpCircle className=\"h-4 w-4 mr-2\" />\n                )}\n                {isMinting ? 'Minting...' : `Mint ${rewardAmount} CLT Tokens`}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"h-5 w-5\" />\n                Reward History\n              </CardTitle>\n              <CardDescription>\n                Recent CLT token reward distributions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {rewardHistory.length === 0 ? (\n                <p className=\"text-muted-foreground text-center py-8\">\n                  No reward history available\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {rewardHistory.map((reward) => (\n                    <div\n                      key={reward.id}\n                      className=\"flex items-center justify-between p-3 border rounded-lg\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        {getRewardTypeIcon(reward.type)}\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium\">{reward.amount} CLT</span>\n                            <Badge variant=\"outline\" className={getRewardTypeColor(reward.type)}>\n                              {reward.type}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            To: {reward.recipient.slice(0, 8)}...{reward.recipient.slice(-6)}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={reward.status === 'completed' ? 'default' : 'secondary'}>\n                          {reward.status}\n                        </Badge>\n                        <Button variant=\"ghost\" size=\"sm\" asChild>\n                          <a\n                            href={`https://sepolia.scrollscan.dev/tx/${reward.txHash}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            <ExternalLink className=\"h-4 w-4\" />\n                          </a>\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":16012},"client/src/components/EnhancedStakingPools.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Badge } from \"./ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"./WalletProvider\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { \n  Coins, \n  TrendingUp, \n  Shield, \n  Clock, \n  ExternalLink, \n  Wallet,\n  AlertCircle,\n  CheckCircle2,\n  Users,\n  DollarSign\n} from \"lucide-react\";\n\ninterface PoolMetadata {\n  title: string;\n  description: string;\n  category: string;\n  riskLevel: string;\n  estimatedAPY: string;\n  minStake: string;\n  maxStake: string;\n  ipfsHash?: string;\n}\n\ninterface StakingPool {\n  id: number;\n  address: string;\n  ticketTitle: string;\n  analystAddress: string;\n  clientAddress: string;\n  rewardAmount: string;\n  isValidated: boolean;\n  metadata?: PoolMetadata;\n  userStakeAmount: string;\n  totalStaked: string;\n}\n\nexport default function EnhancedStakingPools() {\n  const [pools, setPools] = useState<StakingPool[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [stakeAmounts, setStakeAmounts] = useState<{[key: string]: string}>({});\n  const [withdrawAmounts, setWithdrawAmounts] = useState<{[key: string]: string}>({});\n  const { evmAddress, isEVMConnected } = useWallet();\n  const { toast } = useToast();\n\n  // Load pools and metadata from blockchain + IPFS\n  const loadPools = async () => {\n    if (!isEVMConnected || !evmAddress) return;\n\n    try {\n      setLoading(true);\n      const ticketCounter = await evmContractService.getTicketCounter();\n      const poolsData: StakingPool[] = [];\n\n      // Fetch all tickets from SOCService\n      for (let i = 0; i < ticketCounter; i++) {\n        try {\n          const ticket = await evmContractService.getTicket(i);\n          \n          // Get user's stake info for this pool\n          const stakeInfo = await evmContractService.getStakeInfoForPool(ticket.stakingPool, evmAddress);\n          \n          // Generate metadata based on ticket information\n          const metadata: PoolMetadata = {\n            title: ticket.title,\n            description: `Security analysis pool for \"${ticket.title}\". Stake CLT tokens to earn rewards while supporting blockchain security operations.`,\n            category: ticket.isValidated ? \"Validated\" : \"Active Analysis\",\n            riskLevel: \"Medium\",\n            estimatedAPY: \"12-18%\",\n            minStake: \"10\",\n            maxStake: \"1000\",\n            ipfsHash: `Qm${Math.random().toString(36).substring(2, 15)}`\n          };\n\n          poolsData.push({\n            id: i,\n            address: ticket.stakingPool,\n            ticketTitle: ticket.title,\n            analystAddress: ticket.analyst,\n            clientAddress: ticket.client,\n            rewardAmount: ticket.rewardAmount,\n            isValidated: ticket.isValidated,\n            metadata,\n            userStakeAmount: stakeInfo.amount,\n            totalStaked: \"0\" // Would be fetched from contract in real implementation\n          });\n        } catch (error) {\n          console.error(`Error loading ticket ${i}:`, error);\n        }\n      }\n\n      setPools(poolsData);\n    } catch (error) {\n      console.error(\"Error loading staking pools:\", error);\n      toast({\n        title: \"Failed to Load Pools\",\n        description: \"Could not load staking pools from blockchain\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPools();\n  }, [isEVMConnected, evmAddress]);\n\n  const handleStake = async (poolAddress: string, amount: string) => {\n    if (!isEVMConnected || !amount || parseFloat(amount) <= 0) return;\n\n    try {\n      const txHash = await evmContractService.stakeInPool(poolAddress, amount);\n      \n      toast({\n        title: \"Stake Successful\",\n        description: `Staked ${amount} CLT tokens. Transaction: ${txHash.slice(0, 8)}...`,\n      });\n\n      // Reset input and reload pools\n      setStakeAmounts(prev => ({ ...prev, [poolAddress]: \"\" }));\n      loadPools();\n    } catch (error: any) {\n      toast({\n        title: \"Stake Failed\",\n        description: error?.message || \"Failed to stake CLT tokens\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleWithdraw = async (poolAddress: string, amount: string) => {\n    if (!isEVMConnected || !amount || parseFloat(amount) <= 0) return;\n\n    try {\n      const txHash = await evmContractService.withdrawFromPool(poolAddress, amount);\n      \n      toast({\n        title: \"Withdrawal Successful\",\n        description: `Withdrew ${amount} CLT tokens. Transaction: ${txHash.slice(0, 8)}...`,\n      });\n\n      // Reset input and reload pools\n      setWithdrawAmounts(prev => ({ ...prev, [poolAddress]: \"\" }));\n      loadPools();\n    } catch (error: any) {\n      toast({\n        title: \"Withdrawal Failed\",\n        description: error?.message || \"Failed to withdraw CLT tokens\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleClaimRewards = async (poolAddress: string) => {\n    if (!isEVMConnected) return;\n\n    try {\n      const txHash = await evmContractService.claimFromPool(poolAddress);\n      \n      toast({\n        title: \"Rewards Claimed\",\n        description: `Claimed rewards from pool. Transaction: ${txHash.slice(0, 8)}...`,\n      });\n\n      loadPools();\n    } catch (error: any) {\n      toast({\n        title: \"Claim Failed\",\n        description: error?.message || \"Failed to claim rewards\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!isEVMConnected) {\n    return (\n      <Card className=\"cyber-glass bg-red-500/10 border-red-500/30\">\n        <CardContent className=\"p-8 text-center\">\n          <Wallet className=\"h-12 w-12 text-red-400 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-semibold text-red-400 mb-2\">EVM Wallet Required</h3>\n          <p className=\"text-gray-300\">Connect your MetaMask wallet to view and interact with staking pools</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"cyber-glass bg-slate-800/50 border-slate-700\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-400 mx-auto mb-4\" />\n          <p className=\"text-gray-300\">Loading staking pools from blockchain...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-red-400 mb-2\">Enhanced Staking Pools</h2>\n        <p className=\"text-gray-300\">Stake CLT tokens in security analysis pools to earn rewards</p>\n        <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-green-500/10 border border-green-500/30 rounded-lg p-4\">\n            <Users className=\"h-6 w-6 text-green-400 mx-auto mb-2\" />\n            <p className=\"text-green-400 font-mono text-lg\">{pools.length}</p>\n            <p className=\"text-xs text-gray-400\">Active Pools</p>\n          </div>\n          <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-lg p-4\">\n            <CheckCircle2 className=\"h-6 w-6 text-blue-400 mx-auto mb-2\" />\n            <p className=\"text-blue-400 font-mono text-lg\">{pools.filter(p => p.isValidated).length}</p>\n            <p className=\"text-xs text-gray-400\">Validated Pools</p>\n          </div>\n          <div className=\"bg-purple-500/10 border border-purple-500/30 rounded-lg p-4\">\n            <Coins className=\"h-6 w-6 text-purple-400 mx-auto mb-2\" />\n            <p className=\"text-purple-400 font-mono text-lg\">\n              {pools.reduce((total, pool) => total + parseFloat(pool.userStakeAmount || \"0\"), 0).toFixed(2)} CLT\n            </p>\n            <p className=\"text-xs text-gray-400\">Your Total Staked</p>\n          </div>\n        </div>\n      </div>\n\n      {pools.length === 0 ? (\n        <Card className=\"cyber-glass bg-slate-800/50 border-slate-700\">\n          <CardContent className=\"p-8 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-yellow-400 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-yellow-400 mb-2\">No Pools Available</h3>\n            <p className=\"text-gray-300\">Create a security ticket first to generate staking pools</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {pools.map((pool) => (\n            <Card key={pool.address} className=\"cyber-glass bg-slate-800/50 border-slate-700 hover:border-red-500/50 transition-colors\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-red-400 flex items-center gap-2\">\n                      <Shield className=\"h-5 w-5\" />\n                      {pool.metadata?.title || `Pool #${pool.id}`}\n                    </CardTitle>\n                    <CardDescription className=\"text-gray-300 mt-2\">\n                      {pool.metadata?.description || \"Security analysis staking pool\"}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex flex-col gap-2\">\n                    <Badge className={pool.isValidated ? \"bg-green-500/20 text-green-400\" : \"bg-yellow-500/20 text-yellow-400\"}>\n                      {pool.isValidated ? \"Validated\" : \"Active\"}\n                    </Badge>\n                    {pool.metadata?.ipfsHash && (\n                      <Badge className=\"bg-purple-500/20 text-purple-400 text-xs\">\n                        IPFS: {pool.metadata.ipfsHash.slice(0, 8)}...\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"space-y-4\">\n                {/* Pool Info */}\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-gray-400\">Pool Reward</p>\n                    <p className=\"text-red-400 font-mono\">{parseFloat(pool.rewardAmount).toFixed(4)} ETH</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-400\">Est. APY</p>\n                    <p className=\"text-green-400 font-mono\">{pool.metadata?.estimatedAPY || \"10-15%\"}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-400\">Your Stake</p>\n                    <p className=\"text-blue-400 font-mono\">{parseFloat(pool.userStakeAmount).toFixed(2)} CLT</p>\n                  </div>\n                  <div>\n                    <p className=\"text-gray-400\">Risk Level</p>\n                    <p className=\"text-yellow-400\">{pool.metadata?.riskLevel || \"Medium\"}</p>\n                  </div>\n                </div>\n\n                {/* Pool Details */}\n                <div className=\"bg-slate-900/50 rounded-lg p-3 space-y-2 text-xs\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Pool Address:</span>\n                    <span className=\"text-gray-300 font-mono\">{pool.address.slice(0, 8)}...{pool.address.slice(-6)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Analyst:</span>\n                    <span className=\"text-gray-300 font-mono\">{pool.analystAddress.slice(0, 8)}...{pool.analystAddress.slice(-6)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Client:</span>\n                    <span className=\"text-gray-300 font-mono\">{pool.clientAddress.slice(0, 8)}...{pool.clientAddress.slice(-6)}</span>\n                  </div>\n                </div>\n\n                {/* Staking Actions */}\n                <div className=\"space-y-3\">\n                  {/* Stake Section */}\n                  <div className=\"bg-green-500/10 border border-green-500/30 rounded-lg p-3\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <TrendingUp className=\"h-4 w-4 text-green-400\" />\n                      <span className=\"text-green-400 font-semibold\">Stake CLT</span>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Amount\"\n                        value={stakeAmounts[pool.address] || \"\"}\n                        onChange={(e) => setStakeAmounts(prev => ({ ...prev, [pool.address]: e.target.value }))}\n                        className=\"bg-slate-900 border-slate-700 text-white\"\n                      />\n                      <Button\n                        onClick={() => handleStake(pool.address, stakeAmounts[pool.address] || \"\")}\n                        disabled={!stakeAmounts[pool.address] || parseFloat(stakeAmounts[pool.address]) <= 0}\n                        className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      >\n                        Stake\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Withdraw Section - only show if user has stake */}\n                  {parseFloat(pool.userStakeAmount) > 0 && (\n                    <div className=\"bg-orange-500/10 border border-orange-500/30 rounded-lg p-3\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <DollarSign className=\"h-4 w-4 text-orange-400\" />\n                        <span className=\"text-orange-400 font-semibold\">Withdraw CLT</span>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Amount\"\n                          max={pool.userStakeAmount}\n                          value={withdrawAmounts[pool.address] || \"\"}\n                          onChange={(e) => setWithdrawAmounts(prev => ({ ...prev, [pool.address]: e.target.value }))}\n                          className=\"bg-slate-900 border-slate-700 text-white\"\n                        />\n                        <Button\n                          onClick={() => handleWithdraw(pool.address, withdrawAmounts[pool.address] || \"\")}\n                          disabled={!withdrawAmounts[pool.address] || parseFloat(withdrawAmounts[pool.address]) <= 0}\n                          variant=\"outline\"\n                          className=\"border-orange-500 text-orange-400 hover:bg-orange-500/20\"\n                        >\n                          Withdraw\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Claim Rewards */}\n                  <Button\n                    onClick={() => handleClaimRewards(pool.address)}\n                    className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\"\n                  >\n                    <Coins className=\"h-4 w-4 mr-2\" />\n                    Claim Rewards\n                  </Button>\n                </div>\n\n                {/* External Links */}\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.open(`https://sepolia.scrollscan.dev/address/${pool.address}`, '_blank')}\n                    className=\"border-slate-600 text-gray-300 hover:bg-slate-700\"\n                  >\n                    <ExternalLink className=\"h-3 w-3 mr-1\" />\n                    Explorer\n                  </Button>\n                  {pool.metadata?.ipfsHash && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => window.open(`https://gateway.pinata.cloud/ipfs/${pool.metadata?.ipfsHash}`, '_blank')}\n                      className=\"border-purple-600 text-purple-300 hover:bg-purple-500/20\"\n                    >\n                      <ExternalLink className=\"h-3 w-3 mr-1\" />\n                      IPFS\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":16381},"client/src/components/UnifiedStakingDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { Badge } from \"./ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"./WalletProvider\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { \n  Coins, \n  TrendingUp, \n  Award, \n  ArrowUpCircle, \n  ArrowDownCircle,\n  Target,\n  Lock,\n  DollarSign,\n  Activity,\n  ExternalLink,\n  Shield,\n  Users,\n  Clock,\n  Plus,\n  Minus,\n  RefreshCw\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\n\ninterface StakingData {\n  stakedAmount: number;\n  rewardDebt: number;\n  cltBalance: number;\n  rewardRate: number;\n  totalPoolValue: number;\n  userPoolShare: number;\n  estimatedAPY: number;\n}\n\nexport default function UnifiedStakingDashboard() {\n  const [stakingData, setStakingData] = useState<StakingData>({\n    stakedAmount: 0,\n    rewardDebt: 0,\n    cltBalance: 0,\n    rewardRate: 0,\n    totalPoolValue: 0,\n    userPoolShare: 0,\n    estimatedAPY: 5.5\n  });\n\n  const [stakeAmount, setStakeAmount] = useState(\"100\");\n  const [withdrawAmount, setWithdrawAmount] = useState(\"50\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [isStaking, setIsStaking] = useState(false);\n  const [isWithdrawing, setIsWithdrawing] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const { evmAddress, isEVMConnected } = useWallet();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (isEVMConnected && evmAddress) {\n      loadStakingData();\n    }\n  }, [isEVMConnected, evmAddress]);\n\n  const loadStakingData = async () => {\n    if (!evmAddress) return;\n\n    try {\n      setIsLoading(true);\n\n      // Get CLT balance\n      const cltBalanceBN = await evmContractService.getCLTBalance(evmAddress);\n      const cltBalance = parseFloat(evmContractService.formatCLT(cltBalanceBN));\n\n      // Get staking info\n      const stakeInfo = await evmContractService.getStakeInfo(evmAddress);\n      const stakedAmount = parseFloat(evmContractService.formatCLT(stakeInfo.amount));\n      const rewardDebt = parseFloat(evmContractService.formatCLT(stakeInfo.rewardDebt));\n\n      // Get reward rate\n      const rewardRateBN = await evmContractService.getRewardRate();\n      const rewardRate = parseFloat(evmContractService.formatCLT(rewardRateBN));\n\n      // Calculate additional metrics\n      const totalPoolValue = stakedAmount * 10; // Simulated total pool\n      const userPoolShare = totalPoolValue > 0 ? (stakedAmount / totalPoolValue) * 100 : 0;\n\n      setStakingData({\n        stakedAmount,\n        rewardDebt,\n        cltBalance,\n        rewardRate,\n        totalPoolValue,\n        userPoolShare,\n        estimatedAPY: 5.5 // This could be calculated from contract data\n      });\n    } catch (error) {\n      console.error('Error loading staking data:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load staking data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleStake = async () => {\n    if (!stakeAmount || isNaN(Number(stakeAmount))) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid stake amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsStaking(true);\n      await evmContractService.stakeTokens(stakeAmount);\n      \n      toast({\n        title: \"Staking Successful\",\n        description: `Successfully staked ${stakeAmount} CLT tokens`,\n      });\n\n      // Reload data\n      await loadStakingData();\n      setStakeAmount(\"100\");\n    } catch (error: any) {\n      console.error('Error staking:', error);\n      toast({\n        title: \"Staking Failed\",\n        description: error.message || \"Failed to stake tokens\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsStaking(false);\n    }\n  };\n\n  const handleWithdraw = async () => {\n    if (!withdrawAmount || isNaN(Number(withdrawAmount))) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid withdrawal amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsWithdrawing(true);\n      await evmContractService.withdrawTokens(withdrawAmount);\n      \n      toast({\n        title: \"Withdrawal Successful\",\n        description: `Successfully withdrew ${withdrawAmount} CLT tokens`,\n      });\n\n      // Reload data\n      await loadStakingData();\n      setWithdrawAmount(\"50\");\n    } catch (error: any) {\n      console.error('Error withdrawing:', error);\n      toast({\n        title: \"Withdrawal Failed\",\n        description: error.message || \"Failed to withdraw tokens\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsWithdrawing(false);\n    }\n  };\n\n  const handleClaim = async () => {\n    try {\n      setIsClaiming(true);\n      await evmContractService.claimRewards();\n      \n      toast({\n        title: \"Rewards Claimed\",\n        description: \"Successfully claimed your staking rewards\",\n      });\n\n      // Reload data\n      await loadStakingData();\n    } catch (error: any) {\n      console.error('Error claiming rewards:', error);\n      toast({\n        title: \"Claim Failed\",\n        description: error.message || \"Failed to claim rewards\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsClaiming(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await loadStakingData();\n    setRefreshing(false);\n    toast({\n      title: \"Data Refreshed\",\n      description: \"Staking data has been updated\",\n    });\n  };\n\n  if (!isEVMConnected) {\n    return (\n      <Card className=\"bg-slate-800/50 border-orange-500/30 backdrop-blur-sm\">\n        <CardContent className=\"p-6 text-center\">\n          <Shield className=\"h-12 w-12 text-orange-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-orange-400 mb-2\">Connect EVM Wallet</h3>\n          <p className=\"text-gray-400 text-sm\">Connect your MetaMask wallet to access staking features</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-white\">CLT Staking Dashboard</h2>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleRefresh}\n          disabled={refreshing}\n          className=\"text-gray-400 hover:text-white\"\n        >\n          <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n          Refresh\n        </Button>\n      </div>\n\n      {/* Overview Cards */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"bg-slate-800/50 border-blue-500/30\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-blue-400\">Total Staked</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white flex items-center gap-2\">\n              <Lock className=\"h-5 w-5 text-blue-400\" />\n              {stakingData.stakedAmount.toFixed(2)} CLT\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Your staked position\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-green-500/30\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-green-400\">Pending Rewards</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white flex items-center gap-2\">\n              <Award className=\"h-5 w-5 text-green-400\" />\n              {stakingData.rewardDebt.toFixed(4)} CLT\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Available to claim\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-purple-500/30\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-purple-400\">Available Balance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white flex items-center gap-2\">\n              <Coins className=\"h-5 w-5 text-purple-400\" />\n              {stakingData.cltBalance.toFixed(2)} CLT\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Available to stake\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-orange-500/30\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-orange-400\">Estimated APY</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-orange-400\" />\n              {stakingData.estimatedAPY}%\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Annual percentage yield\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"stake\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"stake\">Stake Tokens</TabsTrigger>\n          <TabsTrigger value=\"withdraw\">Withdraw</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"stake\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Plus className=\"h-5 w-5\" />\n                  Stake CLT Tokens\n                </CardTitle>\n                <CardDescription>\n                  Stake your CLT tokens to earn rewards and participate in governance\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"stakeAmount\">Amount to Stake</Label>\n                  <Input\n                    id=\"stakeAmount\"\n                    type=\"number\"\n                    value={stakeAmount}\n                    onChange={(e) => setStakeAmount(e.target.value)}\n                    placeholder=\"Enter CLT amount\"\n                    className=\"mt-1\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Available: {stakingData.cltBalance.toFixed(2)} CLT\n                  </p>\n                </div>\n                <Button\n                  onClick={handleStake}\n                  disabled={isStaking || isLoading}\n                  className=\"w-full\"\n                >\n                  {isStaking ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                      Staking...\n                    </>\n                  ) : (\n                    <>\n                      <ArrowUpCircle className=\"h-4 w-4 mr-2\" />\n                      Stake Tokens\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"h-5 w-5\" />\n                  Claim Rewards\n                </CardTitle>\n                <CardDescription>\n                  Claim your earned staking rewards\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-4 bg-green-500/10 border border-green-500/30 rounded-lg\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-400\">\n                      {stakingData.rewardDebt.toFixed(4)} CLT\n                    </div>\n                    <p className=\"text-sm text-gray-400\">Pending Rewards</p>\n                  </div>\n                </div>\n                <Button\n                  onClick={handleClaim}\n                  disabled={isClaiming || stakingData.rewardDebt === 0}\n                  className=\"w-full bg-green-600 hover:bg-green-700\"\n                >\n                  {isClaiming ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                      Claiming...\n                    </>\n                  ) : (\n                    <>\n                      <Award className=\"h-4 w-4 mr-2\" />\n                      Claim Rewards\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"withdraw\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Minus className=\"h-5 w-5\" />\n                Withdraw Staked Tokens\n              </CardTitle>\n              <CardDescription>\n                Withdraw your staked CLT tokens (may affect rewards)\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"withdrawAmount\">Amount to Withdraw</Label>\n                <Input\n                  id=\"withdrawAmount\"\n                  type=\"number\"\n                  value={withdrawAmount}\n                  onChange={(e) => setWithdrawAmount(e.target.value)}\n                  placeholder=\"Enter CLT amount\"\n                  className=\"mt-1\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Staked: {stakingData.stakedAmount.toFixed(2)} CLT\n                </p>\n              </div>\n              <Button\n                onClick={handleWithdraw}\n                disabled={isWithdrawing || stakingData.stakedAmount === 0}\n                variant=\"destructive\"\n                className=\"w-full\"\n              >\n                {isWithdrawing ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                    Withdrawing...\n                  </>\n                ) : (\n                  <>\n                    <ArrowDownCircle className=\"h-4 w-4 mr-2\" />\n                    Withdraw Tokens\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Pool Statistics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Total Pool Value</span>\n                  <span className=\"font-semibold\">{stakingData.totalPoolValue.toFixed(2)} CLT</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Your Pool Share</span>\n                  <span className=\"font-semibold\">{stakingData.userPoolShare.toFixed(2)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Reward Rate</span>\n                  <span className=\"font-semibold\">{stakingData.rewardRate} CLT/block</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Current APY</span>\n                  <span className=\"font-semibold text-green-400\">{stakingData.estimatedAPY}%</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Contract Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-400 mb-2\">Staking Pool Contract</p>\n                  <div className=\"flex items-center justify-between\">\n                    <code className=\"text-xs bg-muted px-2 py-1 rounded\">\n                      0xB480...a01e\n                    </code>\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <a\n                        href=\"https://sepolia.scrollscan.dev/address/0xB480FA23e8d586Af034aae3CA9a0D111E071a01e\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </a>\n                    </Button>\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-400 mb-2\">CLT Token Contract</p>\n                  <div className=\"flex items-center justify-between\">\n                    <code className=\"text-xs bg-muted px-2 py-1 rounded\">\n                      0xBb64...1403\n                    </code>\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <a\n                        href=\"https://sepolia.scrollscan.dev/address/0xBb647745eFfFD6a950d08cE6Dddc6D6c308D1403\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </a>\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":18083},"client/src/components/UserGuide.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { \n  BookOpen, \n  ChevronRight, \n  Shield, \n  Wallet, \n  Coins, \n  FileText, \n  Users, \n  CheckCircle, \n  AlertTriangle,\n  ExternalLink,\n  ArrowRight,\n  Play,\n  Settings,\n  Database,\n  Code\n} from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\n\nexport default function UserGuide() {\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const steps = [\n    {\n      title: \"Connect Your Wallet\",\n      description: \"Connect either your IOTA wallet or EVM wallet (MetaMask) to get started\",\n      icon: <Wallet className=\"h-6 w-6\" />,\n      details: [\n        \"For IOTA: Use the IOTA wallet button in the top right\",\n        \"For EVM: Use MetaMask or compatible wallet\",\n        \"Switch to Scroll Sepolia testnet for EVM operations\"\n      ]\n    },\n    {\n      title: \"Select Your Role\",\n      description: \"Choose your role in the dSOC ecosystem\",\n      icon: <Users className=\"h-6 w-6\" />,\n      details: [\n        \"Client: Submit security incidents and reports\",\n        \"Analyst: Analyze incidents and provide solutions\", \n        \"Certifier: Validate analyst reports and solutions\"\n      ]\n    },\n    {\n      title: \"Manage CLT Tokens\",\n      description: \"Stake CLT tokens to participate in the ecosystem\",\n      icon: <Coins className=\"h-6 w-6\" />,\n      details: [\n        \"Stake CLT tokens to earn rewards\",\n        \"Higher stakes = higher earning potential\",\n        \"Unstake anytime (may have cooldown periods)\"\n      ]\n    },\n    {\n      title: \"Submit Incidents\",\n      description: \"Report security incidents for analysis\",\n      icon: <FileText className=\"h-6 w-6\" />,\n      details: [\n        \"Provide detailed incident descriptions\",\n        \"Include affected systems and evidence\",\n        \"AI analysis helps categorize severity\"\n      ]\n    },\n    {\n      title: \"Earn Rewards\",\n      description: \"Complete tasks to earn CLT token rewards\",\n      icon: <CheckCircle className=\"h-6 w-6\" />,\n      details: [\n        \"Analysts earn by providing quality reports\",\n        \"Certifiers earn by validating solutions\",\n        \"Clients can earn by reporting valid incidents\"\n      ]\n    }\n  ];\n\n  const blockchainFeatures = [\n    {\n      title: \"IOTA Integration\",\n      description: \"Feeless transactions and data integrity\",\n      features: [\"Zero transaction fees\", \"Immutable audit trails\", \"Scalable architecture\"]\n    },\n    {\n      title: \"EVM Compatibility\", \n      description: \"Smart contracts on Scroll Sepolia\",\n      features: [\"CLT token staking\", \"Automated rewards\", \"Cross-chain interoperability\"]\n    }\n  ];\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\">\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n          dSOC User Guide\n        </h1>\n        <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n          Learn how to use the Decentralized Security Operations Center platform\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"getting-started\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"getting-started\">Getting Started</TabsTrigger>\n          <TabsTrigger value=\"blockchain\">Blockchain Features</TabsTrigger>\n          <TabsTrigger value=\"roles\">User Roles</TabsTrigger>\n          <TabsTrigger value=\"contracts\">Smart Contracts</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"getting-started\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Play className=\"h-5 w-5\" />\n                Quick Start Guide\n              </CardTitle>\n              <CardDescription>\n                Follow these steps to get started with dSOC\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {steps.map((step, index) => (\n                  <div\n                    key={index}\n                    className={`border rounded-lg p-4 cursor-pointer transition-all ${\n                      currentStep === index \n                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-950/20' \n                        : 'border-border hover:border-blue-300'\n                    }`}\n                    onClick={() => setCurrentStep(index)}\n                  >\n                    <div className=\"flex items-start gap-4\">\n                      <div className={`p-2 rounded-full ${\n                        currentStep === index \n                          ? 'bg-blue-500 text-white' \n                          : 'bg-muted text-muted-foreground'\n                      }`}>\n                        {step.icon}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <h3 className=\"font-semibold\">{step.title}</h3>\n                          <Badge variant={currentStep === index ? \"default\" : \"secondary\"}>\n                            Step {index + 1}\n                          </Badge>\n                        </div>\n                        <p className=\"text-muted-foreground mt-1\">{step.description}</p>\n                        {currentStep === index && (\n                          <ul className=\"mt-3 space-y-1\">\n                            {step.details.map((detail, i) => (\n                              <li key={i} className=\"flex items-center gap-2 text-sm\">\n                                <ChevronRight className=\"h-4 w-4 text-blue-500\" />\n                                {detail}\n                              </li>\n                            ))}\n                          </ul>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"blockchain\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {blockchainFeatures.map((feature, index) => (\n              <Card key={index}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Database className=\"h-5 w-5\" />\n                    {feature.title}\n                  </CardTitle>\n                  <CardDescription>{feature.description}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {feature.features.map((item, i) => (\n                      <li key={i} className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        {item}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Network Configuration\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-4 border rounded-lg bg-muted/50\">\n                <h4 className=\"font-semibold mb-2\">Scroll Sepolia Testnet</h4>\n                <div className=\"grid gap-2 text-sm\">\n                  <div><strong>Chain ID:</strong> 534351</div>\n                  <div><strong>RPC URL:</strong> https://sepolia-rpc.scroll.io/</div>\n                  <div><strong>Explorer:</strong> https://sepolia.scrollscan.dev/</div>\n                </div>\n              </div>\n              <Button className=\"w-full\" onClick={() => {\n                if (window.ethereum) {\n                  window.ethereum.request({\n                    method: 'wallet_addEthereumChain',\n                    params: [{\n                      chainId: '0x8274F',\n                      chainName: 'Scroll Sepolia Testnet',\n                      nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 },\n                      rpcUrls: ['https://sepolia-rpc.scroll.io/'],\n                      blockExplorerUrls: ['https://sepolia.scrollscan.dev/']\n                    }]\n                  });\n                }\n              }}>\n                Add Scroll Sepolia to MetaMask\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"roles\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-3\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-blue-600\">Client</CardTitle>\n                <CardDescription>Submit security incidents</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <h4 className=\"font-semibold\">Responsibilities:</h4>\n                <ul className=\"text-sm space-y-1\">\n                  <li>• Report security incidents</li>\n                  <li>• Provide evidence and details</li>\n                  <li>• Stake CLT for priority handling</li>\n                  <li>• Review analyst reports</li>\n                </ul>\n                <h4 className=\"font-semibold mt-4\">Rewards:</h4>\n                <ul className=\"text-sm space-y-1\">\n                  <li>• CLT tokens for valid reports</li>\n                  <li>• Staking rewards</li>\n                  <li>• Priority support benefits</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-green-600\">Analyst</CardTitle>\n                <CardDescription>Analyze and solve incidents</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <h4 className=\"font-semibold\">Responsibilities:</h4>\n                <ul className=\"text-sm space-y-1\">\n                  <li>• Investigate security incidents</li>\n                  <li>• Provide detailed analysis</li>\n                  <li>• Submit solution reports</li>\n                  <li>• Stake CLT for credibility</li>\n                </ul>\n                <h4 className=\"font-semibold mt-4\">Rewards:</h4>\n                <ul className=\"text-sm space-y-1\">\n                  <li>• CLT tokens per report</li>\n                  <li>• Bonus for quality work</li>\n                  <li>• Reputation building</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-purple-600\">Certifier</CardTitle>\n                <CardDescription>Validate reports and solutions</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <h4 className=\"font-semibold\">Responsibilities:</h4>\n                <ul className=\"text-sm space-y-1\">\n                  <li>• Review analyst reports</li>\n                  <li>• Validate solutions</li>\n                  <li>• Approve token distributions</li>\n                  <li>• Maintain quality standards</li>\n                </ul>\n                <h4 className=\"font-semibold mt-4\">Rewards:</h4>\n                <ul className=\"text-sm space-y-1\">\n                  <li>• CLT tokens per validation</li>\n                  <li>• Higher staking rewards</li>\n                  <li>• Governance voting power</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"contracts\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Code className=\"h-5 w-5\" />\n                Smart Contract Addresses\n              </CardTitle>\n              <CardDescription>\n                Deployed on Scroll Sepolia Testnet\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <h4 className=\"font-semibold\">CLT Reward Token</h4>\n                      <p className=\"text-sm text-muted-foreground\">ERC20 token for rewards</p>\n                      <code className=\"text-xs bg-muted px-2 py-1 rounded mt-2 block\">\n                        0xBb647745eFfFD6a950d08cE6Dddc6D6c308D1403\n                      </code>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <a href=\"https://sepolia.scrollscan.dev/address/0xBb647745eFfFD6a950d08cE6Dddc6D6c308D1403\" target=\"_blank\">\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </a>\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <h4 className=\"font-semibold\">Staking Pool</h4>\n                      <p className=\"text-sm text-muted-foreground\">CLT token staking contract</p>\n                      <code className=\"text-xs bg-muted px-2 py-1 rounded mt-2 block\">\n                        0xB480FA23e8d586Af034aae3CA9a0D111E071a01e\n                      </code>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <a href=\"https://sepolia.scrollscan.dev/address/0xB480FA23e8d586Af034aae3CA9a0D111E071a01e\" target=\"_blank\">\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </a>\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <h4 className=\"font-semibold\">SOC Service</h4>\n                      <p className=\"text-sm text-muted-foreground\">Main dSOC operations contract</p>\n                      <code className=\"text-xs bg-muted px-2 py-1 rounded mt-2 block\">\n                        0xE87bFbFC9fC93b94756384e07cCa4B1e857bfC94\n                      </code>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <a href=\"https://sepolia.scrollscan.dev/address/0xE87bFbFC9fC93b94756384e07cCa4B1e857bfC94\" target=\"_blank\">\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </a>\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Contract Features</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <h4 className=\"font-semibold mb-2\">CLT Reward Token</h4>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• ERC20 standard compliance</li>\n                    <li>• Mintable by contract owner</li>\n                    <li>• Used for staking and rewards</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Staking Pool</h4>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Stake CLT tokens</li>\n                    <li>• Earn block-based rewards</li>\n                    <li>• Withdraw anytime</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2\">SOC Service</h4>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Create security tickets</li>\n                    <li>• Assign analysts</li>\n                    <li>• Validate and reward</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <div className=\"text-center\">\n        <p className=\"text-muted-foreground\">\n          Need help? Check our documentation or contact support\n        </p>\n        <div className=\"flex justify-center gap-4 mt-4\">\n          <Button variant=\"outline\" asChild>\n            <a href=\"https://docs.iota.org\" target=\"_blank\">\n              IOTA Docs <ExternalLink className=\"h-4 w-4 ml-1\" />\n            </a>\n          </Button>\n          <Button variant=\"outline\" asChild>\n            <a href=\"https://scroll.io/docs\" target=\"_blank\">\n              Scroll Docs <ExternalLink className=\"h-4 w-4 ml-1\" />\n            </a>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17225},"client/src/lib/evm-contract-old.ts":{"content":"import { ethers, BrowserProvider, Contract, formatUnits, parseUnits } from 'ethers';\n\n// Scroll Sepolia Testnet configuration\nexport const SCROLL_TESTNET_CONFIG = {\n  chainId: '0x8274F', // 534351 in hex\n  chainName: 'Scroll Sepolia Testnet',\n  nativeCurrency: {\n    name: 'ETH',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  rpcUrls: ['https://sepolia-rpc.scroll.io/'],\n  blockExplorerUrls: ['https://sepolia.scrollscan.dev/'],\n};\n\n// Contract addresses from your deployment\nexport const CONTRACT_ADDRESSES = {\n  CLT_REWARD: '0xD0fD6bD7a7b1f5d7B3fCCD99e72f1013a3ebD097', // Updated CLT Token contract\n  SOC_SERVICE: '0x7874f6b9f9547D0bb89493E9430d8ceC44CE8B41', // New SOCService with integrated staking pools\n};\n\n// CLT Reward Token ABI (Simple ERC20 with mint)\nexport const CLT_REWARD_ABI = [\n  {\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"mint\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\n// CLT Staking Pool ABI\nexport const CLT_STAKING_POOL_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_clt\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"initialOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"claim\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"clt\",\n    \"outputs\": [\n      {\n        \"internalType\": \"contract IERC20\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"lastUpdateBlock\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"rewardRate\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_rate\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"setRewardRate\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"stake\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"stakes\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"rewardDebt\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\n// SOC Service ABI\nexport const SOC_SERVICE_ABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_rewardToken\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"initialOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"ticketId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"analyst\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"assignAnalyst\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"createTicket\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"nextTicketId\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"rewardToken\",\n    \"outputs\": [\n      {\n        \"internalType\": \"contract CLTReward\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"ticketId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"reportLink\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"submitReport\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tickets\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"reporter\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"analyst\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"validated\",\n        \"type\": \"bool\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"rewardClaimed\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"ticketId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"certifier\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"rewardAmount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"validateTicket\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\n// EVM Contract Service\nclass EVMContractService {\n  private provider: BrowserProvider | null = null;\n  private signer: any = null;\n  private cltRewardContract: Contract | null = null;\n  private stakingPoolContract: Contract | null = null;\n  private socServiceContract: Contract | null = null;\n\n  async connectWallet(): Promise<string | null> {\n    if (typeof window.ethereum === 'undefined') {\n      throw new Error('MetaMask is not installed');\n    }\n\n    try {\n      // Request account access\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      \n      // Initialize provider and signer\n      this.provider = new BrowserProvider(window.ethereum);\n      this.signer = await this.provider.getSigner();\n      \n      // Initialize contracts\n      this.cltRewardContract = new Contract(\n        CONTRACT_ADDRESSES.CLT_REWARD,\n        CLT_REWARD_ABI,\n        this.signer\n      );\n\n      this.cltTokenContract = new Contract(\n        CONTRACT_ADDRESSES.CLT_REWARD,\n        CLT_REWARD_ABI,\n        this.signer\n      );\n      \n      this.stakingPoolContract = new Contract(\n        CONTRACT_ADDRESSES.CLT_STAKING_POOL,\n        CLT_STAKING_POOL_ABI,\n        this.signer\n      );\n      \n      this.socServiceContract = new Contract(\n        CONTRACT_ADDRESSES.SOC_SERVICE,\n        SOC_SERVICE_ABI,\n        this.signer\n      );\n\n      const address = await this.signer.getAddress();\n      console.log('EVM Wallet connected:', address);\n      return address;\n    } catch (error) {\n      console.error('Failed to connect EVM wallet:', error);\n      throw error;\n    }\n  }\n\n  async switchToScrollTestnet(): Promise<void> {\n    if (typeof window.ethereum === 'undefined') {\n      throw new Error('MetaMask is not installed');\n    }\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: SCROLL_TESTNET_CONFIG.chainId }],\n      });\n    } catch (switchError: any) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [SCROLL_TESTNET_CONFIG],\n          });\n        } catch (addError) {\n          throw addError;\n        }\n      }\n      throw switchError;\n    }\n  }\n\n  async getCurrentNetwork(): Promise<string> {\n    if (!this.provider) {\n      throw new Error('Provider not initialized');\n    }\n    const network = await this.provider.getNetwork();\n    return network.chainId.toString();\n  }\n\n  async isConnectedToScrollTestnet(): Promise<boolean> {\n    try {\n      const currentChainId = await this.getCurrentNetwork();\n      return currentChainId === '534351'; // Scroll Sepolia chainId in decimal\n    } catch (error) {\n      console.error('Error checking network:', error);\n      return false;\n    }\n  }\n\n  // Get ETH balance (wallet-based function using ethers.js)\n  async getETHBalance(address: string): Promise<string> {\n    try {\n      if (!this.provider) {\n        console.log('Provider not initialized, connecting wallet...');\n        await this.connectWallet();\n      }\n      \n      if (!this.provider) {\n        throw new Error('Failed to initialize provider');\n      }\n\n      console.log('Fetching ETH balance for address:', address);\n      const balance = await this.provider.getBalance(address);\n      const formattedBalance = formatUnits(balance, 18);\n      console.log('ETH balance fetched:', formattedBalance);\n      return formattedBalance;\n    } catch (error) {\n      console.error('Error getting ETH balance:', error);\n      throw error; // Re-throw to let calling code handle it\n    }\n  }\n\n  // Get contract addresses\n  getSocServiceAddress(): string {\n    return CONTRACT_ADDRESSES.SOC_SERVICE;\n  }\n\n  getCLTAddress(): string {\n    return CONTRACT_ADDRESSES.CLT_REWARD;\n  }\n\n  getStakingPoolAddress(): string {\n    return CONTRACT_ADDRESSES.CLT_STAKING_POOL;\n  }\n\n  // CLT Token functions\n  async getCLTBalance(address: string): Promise<bigint> {\n    if (!this.cltRewardContract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.cltRewardContract.balanceOf(address);\n  }\n\n  async approveCLT(spender: string, amount: string): Promise<any> {\n    if (!this.cltRewardContract) {\n      throw new Error('Contract not initialized');\n    }\n    const amountWei = parseUnits(amount, 18);\n    return await this.cltRewardContract.approve(spender, amountWei);\n  }\n\n  // Staking functions\n  async getStakeInfo(address: string): Promise<{ amount: bigint; rewardDebt: bigint }> {\n    if (!this.stakingPoolContract) {\n      throw new Error('Contract not initialized');\n    }\n    const result = await this.stakingPoolContract.stakes(address);\n    return {\n      amount: result.amount,\n      rewardDebt: result.rewardDebt\n    };\n  }\n\n  async stake(amount: string): Promise<any> {\n    if (!this.stakingPoolContract) {\n      throw new Error('Contract not initialized');\n    }\n    const amountWei = parseUnits(amount, 18);\n    \n    // First approve the staking pool to spend CLT tokens\n    await this.approveCLT(CONTRACT_ADDRESSES.CLT_STAKING_POOL, amount);\n    \n    // Then stake\n    return await this.stakingPoolContract.stake(amountWei);\n  }\n\n  async withdraw(amount: string): Promise<any> {\n    if (!this.stakingPoolContract) {\n      throw new Error('Contract not initialized');\n    }\n    const amountWei = parseUnits(amount, 18);\n    return await this.stakingPoolContract.withdraw(amountWei);\n  }\n\n\n\n  async getRewardRate(): Promise<bigint> {\n    if (!this.stakingPoolContract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.stakingPoolContract.rewardRate();\n  }\n\n  // SOC Service functions\n  async createTicket(): Promise<any> {\n    if (!this.socServiceContract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.socServiceContract.createTicket();\n  }\n\n  async getTicket(ticketId: number): Promise<{\n    reporter: string;\n    analyst: string;\n    validated: boolean;\n    rewardClaimed: boolean;\n  }> {\n    if (!this.socServiceContract) {\n      throw new Error('Contract not initialized');\n    }\n    const result = await this.socServiceContract.tickets(ticketId);\n    return {\n      reporter: result.reporter,\n      analyst: result.analyst,\n      validated: result.validated,\n      rewardClaimed: result.rewardClaimed\n    };\n  }\n\n  async assignAnalyst(ticketId: number, analyst: string): Promise<any> {\n    if (!this.socServiceContract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.socServiceContract.assignAnalyst(ticketId, analyst);\n  }\n\n  async submitReport(ticketId: number, reportLink: string): Promise<any> {\n    if (!this.socServiceContract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.socServiceContract.submitReport(ticketId, reportLink);\n  }\n\n  async validateTicket(ticketId: number, certifier: string, rewardAmount: string): Promise<any> {\n    if (!this.socServiceContract) {\n      throw new Error('Contract not initialized');\n    }\n    const rewardWei = parseUnits(rewardAmount, 18);\n    return await this.socServiceContract.validateTicket(ticketId, certifier, rewardWei);\n  }\n\n  async getNextTicketId(): Promise<bigint> {\n    if (!this.socServiceContract) {\n      throw new Error('Contract not initialized');\n    }\n    return await this.socServiceContract.nextTicketId();\n  }\n\n  // Utility functions\n  formatCLT(amount: bigint): string {\n    return formatUnits(amount, 18);\n  }\n\n  parseCLT(amount: string): bigint {\n    return parseUnits(amount, 18);\n  }\n\n  formatETH(amount: bigint): string {\n    return formatUnits(amount, 18);\n  }\n\n  parseETH(amount: string): bigint {\n    return parseUnits(amount, 18);\n  }\n\n  // Staking operations\n  async stakeTokens(amount: string): Promise<any> {\n    if (!this.stakingPoolContract) {\n      throw new Error('Staking contract not initialized');\n    }\n    const amountWei = parseUnits(amount, 18);\n    \n    // First approve the staking contract to spend tokens\n    if (this.cltTokenContract) {\n      const approveTx = await this.cltTokenContract.approve(CONTRACT_ADDRESSES.CLT_STAKING_POOL, amountWei);\n      await approveTx.wait();\n    }\n    \n    // Then stake the tokens\n    const stakeTx = await this.stakingPoolContract.stake(amountWei);\n    return await stakeTx.wait();\n  }\n\n  async withdrawTokens(amount: string): Promise<any> {\n    if (!this.stakingPoolContract) {\n      throw new Error('Staking contract not initialized');\n    }\n    const amountWei = parseUnits(amount, 18);\n    const withdrawTx = await this.stakingPoolContract.withdraw(amountWei);\n    return await withdrawTx.wait();\n  }\n\n  async claimRewards(): Promise<any> {\n    if (!this.stakingPoolContract) {\n      throw new Error('Staking contract not initialized');\n    }\n    const claimTx = await this.stakingPoolContract.claim();\n    return await claimTx.wait();\n  }\n\n  // CLT Token Reward Distribution Functions\n  async mintReward(recipientAddress: string, amount: string, rewardType: 'analyst' | 'certifier' | 'staker'): Promise<any> {\n    if (!this.cltTokenContract) {\n      throw new Error('CLT Token contract not initialized');\n    }\n    \n    console.log(`🎯 Minting ${amount} CLT reward tokens for ${rewardType}: ${recipientAddress}`);\n    \n    const amountWei = parseUnits(amount, 18);\n    const mintTx = await this.cltTokenContract.mint(recipientAddress, amountWei);\n    const receipt = await mintTx.wait();\n    \n    console.log(`✅ CLT reward minted successfully:`, {\n      recipient: recipientAddress,\n      amount: amount,\n      type: rewardType,\n      txHash: receipt.hash,\n      blockNumber: receipt.blockNumber\n    });\n    \n    return receipt;\n  }\n\n  async mintAnalystReward(analystAddress: string, ticketId: number): Promise<any> {\n    // Standard analyst reward: 50 CLT tokens\n    const rewardAmount = \"50\";\n    console.log(`💼 Minting analyst reward for ticket #${ticketId}`);\n    return await this.mintReward(analystAddress, rewardAmount, 'analyst');\n  }\n\n  async mintCertifierReward(certifierAddress: string, ticketId: number): Promise<any> {\n    // Standard certifier reward: 30 CLT tokens\n    const rewardAmount = \"30\";\n    console.log(`🛡️ Minting certifier reward for ticket #${ticketId}`);\n    return await this.mintReward(certifierAddress, rewardAmount, 'certifier');\n  }\n\n  async mintStakerReward(stakerAddress: string, stakeAmount: string): Promise<any> {\n    // Staker reward: 5% of staked amount as CLT tokens\n    const stakeAmountNum = parseFloat(stakeAmount);\n    const rewardAmount = (stakeAmountNum * 0.05).toString();\n    console.log(`💰 Minting staker reward: ${rewardAmount} CLT for ${stakeAmount} stake`);\n    return await this.mintReward(stakerAddress, rewardAmount, 'staker');\n  }\n\n  async batchMintRewards(rewards: Array<{address: string, amount: string, type: 'analyst' | 'certifier' | 'staker'}>): Promise<any[]> {\n    console.log(`🔄 Processing batch reward minting for ${rewards.length} recipients`);\n    const results = [];\n    \n    for (const reward of rewards) {\n      try {\n        const result = await this.mintReward(reward.address, reward.amount, reward.type);\n        results.push({ success: true, ...result });\n      } catch (error) {\n        console.error(`❌ Failed to mint reward for ${reward.address}:`, error);\n        results.push({ success: false, error: error.message, address: reward.address });\n      }\n    }\n    \n    return results;\n  }\n\n  async getClaimableReward(userAddress: string): Promise<string> {\n    if (!this.stakingPoolContract) {\n      throw new Error('Staking contract not initialized');\n    }\n    \n    try {\n      const pendingReward = await this.stakingPoolContract.pendingReward(userAddress);\n      return formatUnits(pendingReward, 18);\n    } catch (error) {\n      console.warn('Could not fetch pending reward:', error);\n      return \"0\";\n    }\n  }\n\n\n\n  // Event listeners\n  onTicketCreated(callback: (ticketId: number, reporter: string) => void) {\n    if (!this.socServiceContract) return;\n    this.socServiceContract.on('TicketCreated', callback);\n  }\n\n  onAnalystAssigned(callback: (ticketId: number, analyst: string) => void) {\n    if (!this.socServiceContract) return;\n    this.socServiceContract.on('AnalystAssigned', callback);\n  }\n\n  onReportSubmitted(callback: (ticketId: number, reportLink: string) => void) {\n    if (!this.socServiceContract) return;\n    this.socServiceContract.on('ReportSubmitted', callback);\n  }\n\n  onTicketValidated(callback: (ticketId: number, certifier: string, reward: bigint) => void) {\n    if (!this.socServiceContract) return;\n    this.socServiceContract.on('TicketValidated', callback);\n  }\n}\n\n// Export singleton instance\nexport const evmContractService = new EVMContractService();\n\n// Type declarations for window.ethereum\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}","size_bytes":23082},"client/src/pages/GuidePage.tsx":{"content":"import Header from \"@/components/Header\";\nimport UserGuide from \"@/components/UserGuide\";\n\nexport default function GuidePage() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900/20 to-slate-900\">\n      <Header currentRole=\"\" onRoleChange={() => {}} />\n      <UserGuide />\n    </div>\n  );\n}","size_bytes":332},"client/src/pages/RewardsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport Header from \"@/components/Header\";\nimport CLTRewardManager from \"@/components/CLTRewardManager\";\n\nexport default function RewardsPage() {\n  const [selectedRole, setSelectedRole] = useState<string>('client');\n  const { isEVMConnected } = useWallet();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-red-900/20 to-slate-900\">\n      <Header onRoleChange={setSelectedRole} currentRole={selectedRole} />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-red-400 mb-2\">CLT Reward Manager</h1>\n          <p className=\"text-gray-300\">Mint and distribute CLT token rewards for analysts, certifiers, and stakers</p>\n        </div>\n        \n        <CLTRewardManager />\n      </main>\n    </div>\n  );\n}","size_bytes":912},"client/src/pages/FaucetPage.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWallet } from \"@/components/WalletProvider\";\nimport { useCurrentAccount } from \"@iota/dapp-kit\";\nimport Header from \"@/components/Header\";\nimport { evmContractService } from \"@/lib/evm-contract\";\nimport { \n  Coins, \n  Droplets, \n  Wallet, \n  Clock, \n  CheckCircle, \n  AlertCircle,\n  Network,\n  Zap,\n  RefreshCw\n} from \"lucide-react\";\n\ninterface FaucetRequest {\n  address: string;\n  amount: string;\n  txHash?: string;\n  timestamp: number;\n  status: 'pending' | 'completed' | 'failed';\n}\n\nexport default function FaucetPage() {\n  const [selectedRole, setSelectedRole] = useState<string>('client');\n  const [loading, setLoading] = useState(false);\n  const [iotaLoading, setIotaLoading] = useState(false);\n  const [evmLoading, setEvmLoading] = useState(false);\n  const [customAmount, setCustomAmount] = useState('100');\n  const [recentRequests, setRecentRequests] = useState<FaucetRequest[]>([]);\n  \n  const { walletType, evmAddress, isEVMConnected, isIOTAConnected, connectEVMWallet } = useWallet();\n  const iotaAccount = useCurrentAccount();\n  const { toast } = useToast();\n\n  const iotaAddress = iotaAccount?.address;\n  \n  const faucetOptions = [\n    { amount: '50', label: 'Small', description: 'Good for testing' },\n    { amount: '100', label: 'Medium', description: 'Standard amount' },\n    { amount: '250', label: 'Large', description: 'For extensive testing' },\n  ];\n\n  const handleCLTFaucet = async (amount: string) => {\n    if (!isEVMConnected || !evmAddress) {\n      try {\n        await connectEVMWallet();\n      } catch (error) {\n        toast({\n          title: \"Connection Required\",\n          description: \"Please connect your MetaMask wallet first\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    setEvmLoading(true);\n    try {\n      const txHash = await evmContractService.mintCLTReward(evmAddress!, amount);\n      \n      const newRequest: FaucetRequest = {\n        address: evmAddress!,\n        amount: `${amount} CLT`,\n        txHash,\n        timestamp: Date.now(),\n        status: 'completed'\n      };\n      \n      setRecentRequests(prev => [newRequest, ...prev.slice(0, 4)]);\n      \n      toast({\n        title: \"CLT Tokens Minted!\",\n        description: `Successfully minted ${amount} CLT tokens to your wallet`,\n      });\n    } catch (error: any) {\n      const newRequest: FaucetRequest = {\n        address: evmAddress!,\n        amount: `${amount} CLT`,\n        timestamp: Date.now(),\n        status: 'failed'\n      };\n      \n      setRecentRequests(prev => [newRequest, ...prev.slice(0, 4)]);\n      \n      toast({\n        title: \"Minting Failed\",\n        description: error.message || \"Failed to mint CLT tokens\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setEvmLoading(false);\n    }\n  };\n\n  const handleIOTAFaucet = async () => {\n    if (!isIOTAConnected || !iotaAddress) {\n      toast({\n        title: \"Connection Required\",\n        description: \"Please connect your IOTA wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIotaLoading(true);\n    try {\n      // Since this is a testnet faucet, we'll provide instructions\n      // In a real implementation, this would call the IOTA testnet faucet API\n      \n      toast({\n        title: \"IOTA Testnet Faucet\",\n        description: \"Please visit https://faucet.testnet.iota.org/ to get IOTA testnet tokens\",\n      });\n      \n      // Open the IOTA faucet in a new tab\n      window.open('https://faucet.testnet.iota.org/', '_blank');\n      \n      const newRequest: FaucetRequest = {\n        address: iotaAddress,\n        amount: \"1000 IOTA\",\n        timestamp: Date.now(),\n        status: 'pending'\n      };\n      \n      setRecentRequests(prev => [newRequest, ...prev.slice(0, 4)]);\n      \n    } catch (error: any) {\n      toast({\n        title: \"Faucet Error\",\n        description: error.message || \"Failed to access IOTA faucet\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIotaLoading(false);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"h-4 w-4 text-green-400\" />;\n      case 'failed': return <AlertCircle className=\"h-4 w-4 text-red-400\" />;\n      case 'pending': return <Clock className=\"h-4 w-4 text-yellow-400\" />;\n      default: return <Clock className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'failed': return 'bg-red-500/20 text-red-400 border-red-500/30';\n      case 'pending': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900/20 to-slate-900\">\n      <Header currentRole={selectedRole} onRoleChange={setSelectedRole} />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header Section */}\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"p-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg cyber-pulse\">\n                <Droplets className=\"h-8 w-8 text-white\" />\n              </div>\n            </div>\n            <h1 className=\"text-4xl font-bold text-blue-400 mb-4\">dSOC Token Faucet</h1>\n            <p className=\"text-gray-300 text-lg\">\n              Get test tokens for the dSOC platform development and testing\n            </p>\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* CLT Token Faucet */}\n            <Card className=\"bg-slate-800 border-orange-500/30 hover:border-orange-500/50 transition-colors\">\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <Zap className=\"h-6 w-6 text-orange-400\" />\n                  <div>\n                    <CardTitle className=\"text-orange-400\">CLT Token Faucet</CardTitle>\n                    <CardDescription>Get CLT tokens for EVM testing on Scroll Sepolia</CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {!isEVMConnected ? (\n                  <div className=\"text-center py-4\">\n                    <Wallet className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-400 mb-4\">Connect your MetaMask wallet to get CLT tokens</p>\n                    <Button \n                      onClick={connectEVMWallet}\n                      className=\"bg-orange-600 hover:bg-orange-700\"\n                      data-testid=\"button-connect-metamask\"\n                    >\n                      Connect MetaMask\n                    </Button>\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between p-3 bg-orange-500/10 rounded-lg border border-orange-500/20\">\n                        <span className=\"text-sm text-orange-300\">Connected Address:</span>\n                        <Badge variant=\"outline\" className=\"bg-orange-500/20 text-orange-400 border-orange-500/30\">\n                          {evmAddress?.slice(0, 6)}...{evmAddress?.slice(-4)}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label className=\"text-orange-300\">Select Amount</Label>\n                      <div className=\"grid grid-cols-3 gap-2\">\n                        {faucetOptions.map((option) => (\n                          <Button\n                            key={option.amount}\n                            variant=\"outline\"\n                            className=\"bg-orange-500/10 border-orange-500/30 hover:bg-orange-500/20 text-orange-300\"\n                            onClick={() => setCustomAmount(option.amount)}\n                            data-testid={`button-amount-${option.amount}`}\n                          >\n                            {option.amount} CLT\n                          </Button>\n                        ))}\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"custom-amount\" className=\"text-orange-300\">Custom Amount</Label>\n                        <Input\n                          id=\"custom-amount\"\n                          type=\"number\"\n                          value={customAmount}\n                          onChange={(e) => setCustomAmount(e.target.value)}\n                          className=\"bg-slate-700 border-orange-500/30 text-orange-300\"\n                          placeholder=\"Enter amount\"\n                          data-testid=\"input-custom-amount\"\n                        />\n                      </div>\n                    </div>\n\n                    <Button\n                      onClick={() => handleCLTFaucet(customAmount)}\n                      disabled={evmLoading || !customAmount || parseFloat(customAmount) <= 0}\n                      className=\"w-full bg-orange-600 hover:bg-orange-700 disabled:opacity-50\"\n                      data-testid=\"button-claim-clt\"\n                    >\n                      {evmLoading ? (\n                        <>\n                          <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Minting CLT...\n                        </>\n                      ) : (\n                        <>\n                          <Coins className=\"h-4 w-4 mr-2\" />\n                          Claim {customAmount} CLT\n                        </>\n                      )}\n                    </Button>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* IOTA Token Faucet */}\n            <Card className=\"bg-slate-800 border-blue-500/30 hover:border-blue-500/50 transition-colors\">\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <Network className=\"h-6 w-6 text-blue-400\" />\n                  <div>\n                    <CardTitle className=\"text-blue-400\">IOTA Token Faucet</CardTitle>\n                    <CardDescription>Get IOTA testnet tokens for testing</CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {!isIOTAConnected ? (\n                  <div className=\"text-center py-4\">\n                    <Wallet className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-400 mb-4\">Connect your IOTA wallet to get testnet tokens</p>\n                    <p className=\"text-xs text-gray-500\">Use the IOTA wallet connection in the header</p>\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between p-3 bg-blue-500/10 rounded-lg border border-blue-500/20\">\n                        <span className=\"text-sm text-blue-300\">Connected Address:</span>\n                        <Badge variant=\"outline\" className=\"bg-blue-500/20 text-blue-400 border-blue-500/30\">\n                          {iotaAddress?.slice(0, 6)}...{iotaAddress?.slice(-4)}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"p-4 bg-blue-500/10 rounded-lg border border-blue-500/20\">\n                        <h4 className=\"text-blue-300 font-medium mb-2\">Standard Amount</h4>\n                        <p className=\"text-blue-200 text-sm mb-3\">1000 IOTA testnet tokens</p>\n                        <p className=\"text-xs text-gray-400\">\n                          Will redirect to official IOTA testnet faucet\n                        </p>\n                      </div>\n                    </div>\n\n                    <Button\n                      onClick={handleIOTAFaucet}\n                      disabled={iotaLoading}\n                      className=\"w-full bg-blue-600 hover:bg-blue-700 disabled:opacity-50\"\n                      data-testid=\"button-claim-iota\"\n                    >\n                      {iotaLoading ? (\n                        <>\n                          <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Opening Faucet...\n                        </>\n                      ) : (\n                        <>\n                          <Droplets className=\"h-4 w-4 mr-2\" />\n                          Get IOTA Tokens\n                        </>\n                      )}\n                    </Button>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Requests */}\n          {recentRequests.length > 0 && (\n            <Card className=\"mt-8 bg-slate-800 border-purple-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-400 flex items-center\">\n                  <Clock className=\"h-5 w-5 mr-2\" />\n                  Recent Faucet Requests\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {recentRequests.map((request, index) => (\n                    <div \n                      key={index}\n                      className=\"flex items-center justify-between p-3 bg-slate-700 rounded-lg border border-gray-600\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        {getStatusIcon(request.status)}\n                        <div>\n                          <p className=\"text-white font-medium\">{request.amount}</p>\n                          <p className=\"text-xs text-gray-400\">\n                            {request.address?.slice(0, 6)}...{request.address?.slice(-4)}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge className={getStatusColor(request.status)}>\n                          {request.status}\n                        </Badge>\n                        {request.txHash && (\n                          <p className=\"text-xs text-gray-400 mt-1\">\n                            TX: {request.txHash.slice(0, 8)}...\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Info Section */}\n          <Card className=\"mt-8 bg-slate-800 border-gray-600\">\n            <CardContent className=\"pt-6\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <h4 className=\"text-cyan-400 font-semibold mb-2\">CLT Tokens</h4>\n                  <ul className=\"text-sm text-gray-300 space-y-1\">\n                    <li>• Used for staking in security cases</li>\n                    <li>• Reward token for analysts and certifiers</li>\n                    <li>• Required for creating tickets</li>\n                    <li>• ERC-20 compatible on Scroll</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"text-blue-400 font-semibold mb-2\">IOTA Tokens</h4>\n                  <ul className=\"text-sm text-gray-300 space-y-1\">\n                    <li>• Gas fees for IOTA transactions</li>\n                    <li>• Required for IOTA dApp interactions</li>\n                    <li>• Testnet tokens only for development</li>\n                    <li>• Zero-fee microtransactions</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16477}}}